<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kerberos Module Editor - Erweiterte Version</title>
    <style>
        /* Editor-spezifische Styles (nicht f√ºr Website) */
        :root {
            --kerberos-primary: #063AA8;
            --kerberos-secondary: #009CE6;
            --kerberos-accent: #B265E9;
            --kerberos-orange: #EF8646;
            --kerberos-dark: #212529;
            --kerberos-light: #F8F9FA;
            --kerberos-border: #DEE2E6;
            --kerberos-shadow: 0 4px 12px rgba(6, 58, 168, 0.1);
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: 'Inter', sans-serif;
            background: var(--kerberos-light);
            color: var(--kerberos-dark);
            line-height: 1.6;
        }

        /* Editor Layout */
        .editor-header {
            background: linear-gradient(135deg, var(--kerberos-primary), var(--kerberos-secondary));
            color: white;
            padding: 1rem 2rem;
            box-shadow: var(--kerberos-shadow);
        }

        .editor-main {
            display: grid;
            grid-template-columns: 300px 1fr 380px;
            gap: 1rem;
            padding: 1rem;
            min-height: calc(100vh - 80px);
        }

        .panel {
            background: white;
            border-radius: 8px;
            box-shadow: var(--kerberos-shadow);
            overflow: hidden;
        }

        .panel-header {
            background: var(--kerberos-primary);
            color: white;
            padding: 1rem;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .panel-content {
            padding: 1rem;
            height: calc(100vh - 160px);
            overflow-y: auto;
        }

        /* Module Bibliothek */
        .module-template {
            border: 1px solid var(--kerberos-border);
            border-radius: 6px;
            padding: 0.75rem;
            margin-bottom: 0.5rem;
            cursor: pointer;
            transition: all 0.2s;
            background: #fafbfc;
        }

        .module-template:hover {
            border-color: var(--kerberos-secondary);
            background: white;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 156, 230, 0.1);
        }

        .module-name {
            font-weight: 600;
            color: var(--kerberos-primary);
            margin-bottom: 0.25rem;
            font-size: 0.9rem;
        }

        .module-description {
            font-size: 0.8rem;
            color: #6c757d;
            line-height: 1.4;
        }

        .category-title {
            color: var(--kerberos-primary);
            font-size: 0.8rem;
            font-weight: 600;
            margin: 1rem 0 0.5rem 0;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        /* Canvas */
        .canvas {
            background: #fafbfc;
            border: 2px dashed var(--kerberos-border);
            border-radius: 8px;
            min-height: 600px;
            position: relative;
            padding: 1rem;
        }

        .canvas.drag-over {
            border-color: var(--kerberos-secondary);
            background: rgba(0, 156, 230, 0.05);
        }

        .canvas-placeholder {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: #6c757d;
        }

        .canvas-module {
            position: relative;
            margin-bottom: 1rem;
            border: 2px solid transparent;
            border-radius: 6px;
            transition: all 0.2s;
            padding: 0.5rem;
        }

        .canvas-module:hover {
            border-color: var(--kerberos-secondary);
            background: rgba(0, 156, 230, 0.02);
        }

        .canvas-module.selected {
            border-color: var(--kerberos-primary);
            background: rgba(6, 58, 168, 0.05);
        }

        .module-controls {
            position: absolute;
            top: -8px;
            right: -8px;
            display: none;
            gap: 0.25rem;
            z-index: 10;
        }

        .canvas-module:hover .module-controls,
        .canvas-module.selected .module-controls {
            display: flex;
        }

        .control-btn {
            width: 22px;
            height: 22px;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            font-size: 0.7rem;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 6px rgba(0,0,0,0.2);
            font-weight: 600;
        }

        .btn-edit { background: var(--kerberos-secondary); color: white; }
        .btn-copy { background: var(--kerberos-accent); color: white; }
        .btn-move { background: var(--kerberos-orange); color: white; }
        .btn-delete { background: #dc3545; color: white; }

        /* Buttons */
        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.85rem;
        }

        .btn-primary { background: var(--kerberos-primary); color: white; }
        .btn-success { background: #28a745; color: white; }
        .btn-warning { background: var(--kerberos-orange); color: white; }
        .btn-secondary { background: #6c757d; color: white; }

        .btn:hover { transform: translateY(-1px); opacity: 0.9; }

        /* Property Panel */
        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--kerberos-dark);
            font-size: 0.85rem;
        }

        .form-control {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid var(--kerberos-border);
            border-radius: 4px;
            font-size: 0.85rem;
            font-family: inherit;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--kerberos-primary);
            box-shadow: 0 0 0 2px rgba(6, 58, 168, 0.1);
        }

        .color-picker {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
            margin-top: 0.5rem;
        }

        .color-option {
            width: 30px;
            height: 30px;
            border-radius: 4px;
            cursor: pointer;
            border: 2px solid transparent;
            transition: all 0.2s;
        }

        .color-option:hover {
            transform: scale(1.1);
        }

        .color-option.selected {
            border-color: var(--kerberos-dark);
            transform: scale(1.1);
        }

        .icon-picker {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));
            gap: 0.5rem;
            max-height: 200px;
            overflow-y: auto;
            margin-top: 0.5rem;
            padding: 0.5rem;
            border: 1px solid var(--kerberos-border);
            border-radius: 4px;
        }

        .icon-option {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid var(--kerberos-border);
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 1.2rem;
        }

        .icon-option:hover {
            background: var(--kerberos-secondary);
            color: white;
        }

        .icon-option.selected {
            background: var(--kerberos-primary);
            color: white;
        }

        .image-upload {
            border: 2px dashed var(--kerberos-border);
            border-radius: 4px;
            padding: 1rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s;
        }

        .image-upload:hover {
            border-color: var(--kerberos-secondary);
            background: rgba(0, 156, 230, 0.05);
        }

        .image-preview {
            max-width: 100%;
            max-height: 150px;
            border-radius: 4px;
            margin-top: 0.5rem;
        }

        /* Code Output */
        .code-output {
            background: #1a1a1a;
            color: #e6e6e6;
            padding: 1rem;
            border-radius: 6px;
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 0.8rem;
            line-height: 1.4;
            max-height: 200px;
            overflow-y: auto;
            margin-top: 1rem;
            border: 1px solid var(--kerberos-border);
        }

        .copy-btn {
            background: var(--kerberos-accent);
            color: white;
            border: none;
            padding: 0.4rem 0.8rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            font-weight: 600;
            margin-top: 0.5rem;
        }

        /* Responsive */
        @media (max-width: 1200px) {
            .editor-main {
                grid-template-columns: 1fr;
                gap: 0.5rem;
            }
            
            .panel-content {
                height: auto;
                max-height: 300px;
            }
        }

        /* Notification */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--kerberos-primary);
            color: white;
            padding: 0.75rem 1.25rem;
            border-radius: 6px;
            box-shadow: var(--kerberos-shadow);
            z-index: 3000;
            font-weight: 600;
            font-size: 0.9rem;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 2000;
        }

        .modal-content {
            background: white;
            margin: 2rem auto;
            padding: 2rem;
            border-radius: 8px;
            max-width: 800px;
            max-height: calc(100vh - 4rem);
            overflow-y: auto;
        }

        .tabs {
            display: flex;
            border-bottom: 1px solid var(--kerberos-border);
            margin-bottom: 1rem;
        }

        .tab {
            padding: 0.5rem 1rem;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.2s;
        }

        .tab.active {
            color: var(--kerberos-primary);
            border-bottom-color: var(--kerberos-primary);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <header class="editor-header">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <h1 style="font-size: 1.5rem;">üõ°Ô∏è Kerberos Module Editor</h1>
                <p style="font-size: 0.9rem; opacity: 0.9; margin: 0;">Erweiterte Version ‚Ä¢ www.kerberos-compliance.com</p>
            </div>
            <div style="display: flex; gap: 0.75rem;">
                <button class="btn btn-success" id="exportPageBtn">üìÑ Seite exportieren</button>
                <button class="btn btn-primary" id="savePageBtn">üíæ Seite speichern</button>
                <button class="btn btn-secondary" id="loadPageBtn">üìÇ Seite laden</button>
                <button class="btn btn-warning" id="importBtn">üì• Import</button>
                <button class="btn btn-secondary" id="settingsBtn">‚öôÔ∏è Einstellungen</button>
                <button class="btn btn-warning" id="clearBtn">üóëÔ∏è Leeren</button>
                <button class="btn btn-secondary" id="previewBtn">üëÅÔ∏è Vorschau</button>
            </div>
        </div>
    </header>

    <main class="editor-main">
        <!-- Module Bibliothek -->
        <div class="panel">
            <div class="panel-header">
                üìö Kerberos Module
            </div>
            <div class="panel-content">
                <input type="text" class="form-control" placeholder="üîç Module suchen..." id="searchInput" style="margin-bottom: 1rem;">
                <div id="moduleLibrary">
                    <!-- Module werden hier geladen -->
                </div>
            </div>
        </div>

        <!-- Landing Page Canvas -->
        <div class="panel">
            <div class="panel-header">
                üèóÔ∏è Seiten-Builder
                <input type="text" placeholder="Seitenname..." id="pageNameInput" 
                       style="margin-left: 1rem; padding: 0.25rem 0.5rem; border: 1px solid rgba(255,255,255,0.3); border-radius: 4px; background: rgba(255,255,255,0.1); color: white; width: 180px; font-size: 0.85rem;">
            </div>
            <div class="panel-content" style="padding: 0;">
                <div class="canvas" id="canvas">
                    <div class="canvas-placeholder">
                        <div style="font-size: 2.5rem; margin-bottom: 1rem;">üì±</div>
                        <h3 style="margin-bottom: 0.5rem;">Kerberos Seite erstellen</h3>
                        <p style="margin-bottom: 1rem;">Module hierher ziehen oder klicken</p>
                        <small style="color: #999;">Bereit f√ºr Squarespace Integration</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Code & Eigenschaften -->
        <div class="panel">
            <div class="panel-header">
                ‚öôÔ∏è Eigenschaften & Code
            </div>
            <div class="panel-content">
                <div style="background: #e3f2fd; border: 1px solid #2196f3; border-radius: 6px; padding: 1rem; margin-bottom: 1rem; font-size: 0.85rem;">
                    <h4 style="color: #1976d2; margin-bottom: 0.5rem; font-size: 0.9rem;">üöÄ Vollversion Features</h4>
                    <p>üíæ Seiten speichern/laden ‚Ä¢ üì•üì§ Import/Export ‚Ä¢ ‚öôÔ∏è Abst√§nde anpassen ‚Ä¢ üìù Module bearbeiten ‚Ä¢ üé® Unicode Icons</p>
                </div>
                
                <div id="propertyPanel">
                    <p style="color: #6c757d; text-align: center; padding: 1.5rem;">
                        Modul ausw√§hlen zum Bearbeiten
                    </p>
                </div>
            </div>
        </div>
    </main>

    <!-- Modals -->
    <div id="iconModal" class="modal">
        <div class="modal-content">
            <h3>Icon ausw√§hlen</h3>
            <input type="text" class="form-control" placeholder="Icon suchen..." id="iconSearch" style="margin: 1rem 0;">
            <div class="icon-picker" id="iconPicker"></div>
            <div style="margin-top: 1rem; text-align: right;">
                <button class="btn btn-secondary" onclick="closeIconModal()">Abbrechen</button>
            </div>
        </div>
    </div>

    <div id="imageModal" class="modal">
        <div class="modal-content">
            <h3>Bild verwalten</h3>
            <div class="tabs">
                <div class="tab active" onclick="switchTab('upload')">Upload</div>
                <div class="tab" onclick="switchTab('stock')">Stock Bilder</div>
                <div class="tab" onclick="switchTab('manage')">Verwalten</div>
            </div>
            
            <div id="uploadTab" class="tab-content active">
                <div class="image-upload" onclick="document.getElementById('imageInput').click()">
                    <div>üì∏ Bild hochladen</div>
                    <small>JPG, PNG, WebP bis 5MB</small>
                </div>
                <input type="file" id="imageInput" accept="image/*" style="display: none;">
                <div id="uploadPreview"></div>
            </div>
            
            <div id="stockTab" class="tab-content">
                <div id="stockImages" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); gap: 0.5rem;">
                    <!-- Stock Images -->
                </div>
            </div>
            
            <div id="manageTab" class="tab-content">
                <div id="uploadedImages">
                    <p>Ihre hochgeladenen Bilder erscheinen hier.</p>
                </div>
            </div>
            
            <div style="margin-top: 1rem; text-align: right;">
                <button class="btn btn-secondary" onclick="closeImageModal()">Schlie√üen</button>
            </div>
        </div>
    </div>

    <!-- Neue Modals -->
    <div id="savePageModal" class="modal">
        <div class="modal-content">
            <h3>Seite speichern</h3>
            <div class="form-group">
                <label class="form-label">Seitenname</label>
                <input type="text" class="form-control" id="savePageName" placeholder="Meine Kerberos Seite">
            </div>
            <div class="form-group">
                <label class="form-label">Beschreibung (optional)</label>
                <textarea class="form-control" id="savePageDescription" placeholder="Beschreibung der Seite..."></textarea>
            </div>
            <div style="margin-top: 1rem; text-align: right; gap: 0.5rem; display: flex; justify-content: flex-end;">
                <button class="btn btn-secondary" onclick="closeSavePageModal()">Abbrechen</button>
                <button class="btn btn-success" onclick="saveCurrentPage()">üíæ Speichern</button>
            </div>
        </div>
    </div>

    <div id="loadPageModal" class="modal">
        <div class="modal-content">
            <h3>Gespeicherte Seiten</h3>
            <div id="savedPagesList" style="max-height: 400px; overflow-y: auto;">
                <!-- Gespeicherte Seiten -->
            </div>
            <div style="margin-top: 1rem; text-align: right;">
                <button class="btn btn-secondary" onclick="closeLoadPageModal()">Schlie√üen</button>
            </div>
        </div>
    </div>

    <div id="importModal" class="modal">
        <div class="modal-content">
            <h3>Import / Export</h3>
            <div class="tabs">
                <div class="tab active" onclick="switchImportTab('import')">Import</div>
                <div class="tab" onclick="switchImportTab('export')">Export</div>
            </div>
            
            <div id="importImportTab" class="tab-content active">
                <div style="margin: 1rem 0;">
                    <div class="image-upload" onclick="document.getElementById('importInput').click()">
                        <div>üì• JSON-Datei importieren</div>
                        <small>Module oder komplette Seiten</small>
                    </div>
                    <input type="file" id="importInput" accept=".json" style="display: none;">
                </div>
                <div style="margin: 1rem 0;">
                    <label class="form-label">Oder JSON-Code einf√ºgen:</label>
                    <textarea class="form-control" id="importTextarea" placeholder='{"modules": [...]}' style="min-height: 200px; font-family: monospace;"></textarea>
                </div>
                <button class="btn btn-primary" onclick="importData()" style="width: 100%;">Importieren</button>
            </div>
            
            <div id="importExportTab" class="tab-content">
                <div style="margin: 1rem 0;">
                    <button class="btn btn-success" onclick="exportCurrentPage()" style="width: 100%; margin-bottom: 0.5rem;">üìÑ Aktuelle Seite exportieren</button>
                    <button class="btn btn-secondary" onclick="exportModuleTemplates()" style="width: 100%; margin-bottom: 0.5rem;">üì¶ Alle Module exportieren</button>
                    <button class="btn btn-warning" onclick="exportSelectedModule()" style="width: 100%;" id="exportSelectedBtn" disabled>üîß Ausgew√§hltes Modul exportieren</button>
                </div>
            </div>
            
            <div style="margin-top: 1rem; text-align: right;">
                <button class="btn btn-secondary" onclick="closeImportModal()">Schlie√üen</button>
            </div>
        </div>
    </div>

    <div id="settingsModal" class="modal">
        <div class="modal-content">
            <h3>Einstellungen</h3>
            <div class="tabs">
                <div class="tab active" onclick="switchSettingsTab('spacing')">Abst√§nde</div>
                <div class="tab" onclick="switchSettingsTab('modules')">Module verwalten</div>
            </div>
            
            <div id="settingsSpacingTab" class="tab-content active">
                <h4>Globale Abst√§nde</h4>
                <div class="form-group">
                    <label class="form-label">Section Padding</label>
                    <select class="form-control" id="sectionPaddingSelect" onchange="updateSpacing('sectionPadding', this.value)">
                        <option value="4rem 0">Klein (4rem 0)</option>
                        <option value="6rem 0" selected>Standard (6rem 0)</option>
                        <option value="8rem 0">Gro√ü (8rem 0)</option>
                        <option value="10rem 0">Extra Gro√ü (10rem 0)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Element-Abst√§nde</label>
                    <select class="form-control" id="elementSpacingSelect" onchange="updateSpacing('elementSpacing', this.value)">
                        <option value="1rem">Klein (1rem)</option>
                        <option value="2rem" selected>Standard (2rem)</option>
                        <option value="3rem">Gro√ü (3rem)</option>
                        <option value="4rem">Extra Gro√ü (4rem)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Text-Abst√§nde</label>
                    <select class="form-control" id="textSpacingSelect" onchange="updateSpacing('textSpacing', this.value)">
                        <option value="0.5rem">Klein (0.5rem)</option>
                        <option value="1rem" selected>Standard (1rem)</option>
                        <option value="1.5rem">Gro√ü (1.5rem)</option>
                        <option value="2rem">Extra Gro√ü (2rem)</option>
                    </select>
                </div>
                <button class="btn btn-primary" onclick="applySpacingToAll()" style="width: 100%;">Auf alle Module anwenden</button>
            </div>
            
            <div id="settingsModulesTab" class="tab-content">
                <h4>Benutzerdefinierte Module</h4>
                <div id="customModulesList">
                    <!-- Custom modules -->
                </div>
                <button class="btn btn-success" onclick="showCreateModuleDialog()" style="width: 100%; margin-top: 1rem;">+ Neues Modul erstellen</button>
            </div>
            
            <div style="margin-top: 1rem; text-align: right;">
                <button class="btn btn-secondary" onclick="closeSettingsModal()">Schlie√üen</button>
            </div>
        </div>
    </div>

    <div id="moduleEditModal" class="modal">
        <div class="modal-content">
            <h3>Modul-Informationen bearbeiten</h3>
            <div class="form-group">
                <label class="form-label">Name</label>
                <input type="text" class="form-control" id="editModuleName">
            </div>
            <div class="form-group">
                <label class="form-label">Kategorie</label>
                <select class="form-control" id="editModuleCategory">
                    <option value="Hero & Header">Hero & Header</option>
                    <option value="Content & Services">Content & Services</option>
                    <option value="Team & About">Team & About</option>
                    <option value="Contact & CTA">Contact & CTA</option>
                    <option value="Statistics & Numbers">Statistics & Numbers</option>
                    <option value="Content & Images">Content & Images</option>
                    <option value="Process & Steps">Process & Steps</option>
                    <option value="Custom">Custom</option>
                </select>
            </div>
            <div class="form-group">
                <label class="form-label">Beschreibung</label>
                <textarea class="form-control" id="editModuleDescription" style="min-height: 80px;"></textarea>
            </div>
            <div style="margin-top: 1rem; text-align: right; gap: 0.5rem; display: flex; justify-content: flex-end;">
                <button class="btn btn-secondary" onclick="closeModuleEditModal()">Abbrechen</button>
                <button class="btn btn-success" onclick="saveModuleInfo()">üíæ Speichern</button>
            </div>
        </div>
    </div>

    <!-- Preview Modal -->
    <div id="previewModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 2000;">
        <div style="background: white; margin: 1rem; border-radius: 8px; height: calc(100vh - 2rem); display: flex; flex-direction: column;">
            <div style="padding: 1rem; border-bottom: 1px solid var(--kerberos-border); display: flex; justify-content: space-between; align-items: center;">
                <h3 style="margin: 0;">üëÅÔ∏è Kerberos Seiten-Vorschau</h3>
                <button class="btn btn-secondary" onclick="closePreview()">‚ùå Schlie√üen</button>
            </div>
            <div style="flex: 1; overflow: auto;">
                <div id="previewContent"></div>
            </div>
        </div>
    </div>

    <script>
        // Globale Variablen
        let modules = [];
        let selectedModule = null;
        let moduleCounter = 0;
        let currentProperty = '';
        let uploadedImages = {};
        let savedPages = {};
        let globalSpacing = {
            sectionPadding: '6rem 0',
            elementSpacing: '2rem',
            textSpacing: '1rem'
        };

        // Kerberos Farben
        const KERBEROS_COLORS = {
            primary: '#063AA8',
            secondary: '#009CE6',
            accent: '#B265E9',
            orange: '#EF8646',
            dark: '#212529',
            gray: '#ADB5BD',
            white: '#FFFFFF'
        };

        // FontAwesome Icons mit Unicode-Zeichen
        const FONT_AWESOME_ICONS = [
            { name: 'Shield', unicode: '&#xf132;', className: 'shield-alt' },
            // Business & Finance Icons
            { name: 'Chart Bar', unicode: '&#xf080;', className: 'chart-bar' },
            { name: 'Chart Pie', unicode: '&#xf200;', className: 'chart-pie' },
            { name: 'Coins', unicode: '&#xf51e;', className: 'coins' },
            { name: 'Credit Card', unicode: '&#xf09d;', className: 'credit-card' },
            { name: 'Briefcase', unicode: '&#xf0b1;', className: 'briefcase' },
            { name: 'Handshake', unicode: '&#xf2b5;', className: 'handshake' },
            { name: 'Calculator', unicode: '&#xf1ec;', className: 'calculator' },
            { name: 'Piggy Bank', unicode: '&#xf4d3;', className: 'piggy-bank' },
            
            // Technology Icons
            { name: 'Laptop', unicode: '&#xf109;', className: 'laptop' },
            { name: 'Mobile Alt', unicode: '&#xf3cd;', className: 'mobile-alt' },
            { name: 'Desktop', unicode: '&#xf108;', className: 'desktop' },
            { name: 'Server', unicode: '&#xf233;', className: 'server' },
            { name: 'Database', unicode: '&#xf1c0;', className: 'database' },
            { name: 'Wifi', unicode: '&#xf1eb;', className: 'wifi' },
            { name: 'Code', unicode: '&#xf121;', className: 'code' },
            { name: 'Bug', unicode: '&#xf188;', className: 'bug' },
            
            // Communication Icons
            { name: 'Comments', unicode: '&#xf086;', className: 'comments' },
            { name: 'Comment', unicode: '&#xf075;', className: 'comment' },
            { name: 'Video', unicode: '&#xf03d;', className: 'video' },
            { name: 'Microphone', unicode: '&#xf130;', className: 'microphone' },
            { name: 'Bullhorn', unicode: '&#xf0a1;', className: 'bullhorn' },
            { name: 'Rss', unicode: '&#xf09e;', className: 'rss' },
            
            // E-Commerce Icons
            { name: 'Shopping Cart', unicode: '&#xf07a;', className: 'shopping-cart' },
            { name: 'Shopping Bag', unicode: '&#xf290;', className: 'shopping-bag' },
            { name: 'Store', unicode: '&#xf54e;', className: 'store' },
            { name: 'Tags', unicode: '&#xf02c;', className: 'tags' },
            { name: 'Percent', unicode: '&#xf295;', className: 'percent' },
            { name: 'Receipt', unicode: '&#xf543;', className: 'receipt' },
            
            // Social Media Icons
            { name: 'Facebook', unicode: '&#xf09a;', className: 'facebook' },
            { name: 'Twitter', unicode: '&#xf099;', className: 'twitter' },
            { name: 'LinkedIn', unicode: '&#xf08c;', className: 'linkedin' },
            { name: 'Instagram', unicode: '&#xf16d;', className: 'instagram' },
            { name: 'YouTube', unicode: '&#xf167;', className: 'youtube' },
            { name: 'Share Alt', unicode: '&#xf1e0;', className: 'share-alt' },
            
            // Weather & Nature Icons
            { name: 'Sun', unicode: '&#xf185;', className: 'sun' },
            { name: 'Moon', unicode: '&#xf186;', className: 'moon' },
            { name: 'Cloud', unicode: '&#xf0c2;', className: 'cloud' },
            { name: 'Leaf', unicode: '&#xf06c;', className: 'leaf' },
            { name: 'Tree', unicode: '&#xf1bb;', className: 'tree' },
            { name: 'Seedling', unicode: '&#xf4d8;', className: 'seedling' },
            
            // Medical & Health Icons
            { name: 'Heartbeat', unicode: '&#xf21e;', className: 'heartbeat' },
            { name: 'Stethoscope', unicode: '&#xf0f1;', className: 'stethoscope' },
            { name: 'Pills', unicode: '&#xf484;', className: 'pills' },
            { name: 'Band Aid', unicode: '&#xf462;', className: 'band-aid' },
            { name: 'First Aid', unicode: '&#xf479;', className: 'first-aid' },
            
            // Transport Icons
            { name: 'Car', unicode: '&#xf1b9;', className: 'car' },
            { name: 'Plane', unicode: '&#xf072;', className: 'plane' },
            { name: 'Ship', unicode: '&#xf21a;', className: 'ship' },
            { name: 'Truck', unicode: '&#xf0d1;', className: 'truck' },
            { name: 'Bicycle', unicode: '&#xf206;', className: 'bicycle' },
            { name: 'Subway', unicode: '&#xf239;', className: 'subway' },
            
            // Food & Drink Icons
            { name: 'Coffee', unicode: '&#xf0f4;', className: 'coffee' },
            { name: 'Utensils', unicode: '&#xf2e7;', className: 'utensils' },
            { name: 'Wine Glass', unicode: '&#xf4e3;', className: 'wine-glass' },
            { name: 'Pizza Slice', unicode: '&#xf818;', className: 'pizza-slice' },
            { name: 'Apple Alt', unicode: '&#xf5d1;', className: 'apple-alt' },
            
            // Education Icons
            { name: 'Graduation Cap', unicode: '&#xf19d;', className: 'graduation-cap' },
            { name: 'Book', unicode: '&#xf02d;', className: 'book' },
            { name: 'Book Open', unicode: '&#xf518;', className: 'book-open' },
            { name: 'Pencil Alt', unicode: '&#xf303;', className: 'pencil-alt' },
            { name: 'Chalkboard', unicode: '&#xf51b;', className: 'chalkboard' },
            { name: 'University', unicode: '&#xf19c;', className: 'university' },
            
            // Security & Legal Icons
            { name: 'Key', unicode: '&#xf084;', className: 'key' },
            { name: 'Unlock', unicode: '&#xf09c;', className: 'unlock' },
            { name: 'User Shield', unicode: '&#xf505;', className: 'user-shield' },
            { name: 'Shield Check', unicode: '&#xf2f7;', className: 'shield-check' },
            { name: 'Gavel', unicode: '&#xf0e3;', className: 'gavel' },
            { name: 'Fingerprint', unicode: '&#xf577;', className: 'fingerprint' },
            
            // Time & Calendar Icons
            { name: 'Clock', unicode: '&#xf017;', className: 'clock' },
            { name: 'Stopwatch', unicode: '&#xf2f2;', className: 'stopwatch' },
            { name: 'Calendar Alt', unicode: '&#xf073;', className: 'calendar-alt' },
            { name: 'Calendar Check', unicode: '&#xf274;', className: 'calendar-check' },
            { name: 'History', unicode: '&#xf1da;', className: 'history' },
            
            // Sports & Recreation Icons
            { name: 'Futbol', unicode: '&#xf1e3;', className: 'futbol' },
            { name: 'Basketball Ball', unicode: '&#xf434;', className: 'basketball-ball' },
            { name: 'Dumbbell', unicode: '&#xf44b;', className: 'dumbbell' },
            { name: 'Swimming Pool', unicode: '&#xf5c5;', className: 'swimming-pool' },
            { name: 'Running', unicode: '&#xf70c;', className: 'running' },
            
            // Tools & Utilities Icons
            { name: 'Wrench', unicode: '&#xf0ad;', className: 'wrench' },
            { name: 'Hammer', unicode: '&#xf6e3;', className: 'hammer' },
            { name: 'Screwdriver', unicode: '&#xf54a;', className: 'screwdriver' },
            { name: 'Toolbox', unicode: '&#xf552;', className: 'toolbox' },
            { name: 'Hard Hat', unicode: '&#xf807;', className: 'hard-hat' },
            { name: 'Lock', unicode: '&#xf023;', className: 'lock' },
            { name: 'User Check', unicode: '&#xf4fc;', className: 'user-check' },
            { name: 'Chart Line', unicode: '&#xf201;', className: 'chart-line' },
            { name: 'Settings', unicode: '&#xf013;', className: 'cog' },
            { name: 'Users', unicode: '&#xf0c0;', className: 'users' },
            { name: 'Contract', unicode: '&#xf56c;', className: 'file-contract' },
            { name: 'Balance Scale', unicode: '&#xf24e;', className: 'balance-scale' },
            { name: 'Handshake', unicode: '&#xf2b5;', className: 'handshake' },
            { name: 'Award', unicode: '&#xf559;', className: 'award' },
            { name: 'Clipboard Check', unicode: '&#xf46c;', className: 'clipboard-check' },
            { name: 'Search', unicode: '&#xf002;', className: 'search' },
            { name: 'Eye', unicode: '&#xf06e;', className: 'eye' },
            { name: 'Bell', unicode: '&#xf0f3;', className: 'bell' },
            { name: 'Calendar', unicode: '&#xf073;', className: 'calendar' },
            { name: 'Envelope', unicode: '&#xf0e0;', className: 'envelope' },
            { name: 'Phone', unicode: '&#xf095;', className: 'phone' },
            { name: 'Map Marker', unicode: '&#xf3c5;', className: 'map-marker-alt' },
            { name: 'Home', unicode: '&#xf015;', className: 'home' },
            { name: 'Building', unicode: '&#xf1ad;', className: 'building' },
            { name: 'Industry', unicode: '&#xf275;', className: 'industry' },
            { name: 'Globe', unicode: '&#xf0ac;', className: 'globe' },
            { name: 'Star', unicode: '&#xf005;', className: 'star' },
            { name: 'Heart', unicode: '&#xf004;', className: 'heart' },
            { name: 'Thumbs Up', unicode: '&#xf164;', className: 'thumbs-up' },
            { name: 'Check', unicode: '&#xf00c;', className: 'check' },
            { name: 'Times', unicode: '&#xf00d;', className: 'times' },
            { name: 'Plus', unicode: '&#xf067;', className: 'plus' },
            { name: 'Minus', unicode: '&#xf068;', className: 'minus' },
            { name: 'Arrow Right', unicode: '&#xf061;', className: 'arrow-right' },
            { name: 'Arrow Left', unicode: '&#xf060;', className: 'arrow-left' },
            { name: 'Arrow Up', unicode: '&#xf062;', className: 'arrow-up' },
            { name: 'Arrow Down', unicode: '&#xf063;', className: 'arrow-down' },
            { name: 'Play', unicode: '&#xf04b;', className: 'play' },
            { name: 'Pause', unicode: '&#xf04c;', className: 'pause' },
            { name: 'Stop', unicode: '&#xf04d;', className: 'stop' },
            { name: 'Download', unicode: '&#xf019;', className: 'download' },
            { name: 'Upload', unicode: '&#xf093;', className: 'upload' },
            { name: 'Print', unicode: '&#xf02f;', className: 'print' },
            { name: 'Share', unicode: '&#xf064;', className: 'share' },
            { name: 'Link', unicode: '&#xf0c1;', className: 'link' },
            { name: 'External Link', unicode: '&#xf35d;', className: 'external-link-alt' },
            { name: 'Anchor', unicode: '&#xf13d;', className: 'anchor' },
            { name: 'Headset', unicode: '&#xf590;', className: 'headset' },
            { name: 'Hourglass', unicode: '&#xf251;', className: 'hourglass' }
        ];

        // Stock Images (Placeholder URLs - in Produktion echte URLs verwenden)
        const STOCK_IMAGES = [
            'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400',
            'https://images.unsplash.com/photo-1551434678-e076c223a692?w=400',
            'https://images.unsplash.com/photo-1552664730-d307ca884978?w=400',
            'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400',
            'https://images.unsplash.com/photo-1573164713714-d95e436ab8d6?w=400',
            'https://images.unsplash.com/photo-1556157382-97eda2d62296?w=400'
        ];

        // Erweiterte Module Templates
        const MODULE_TEMPLATES = [
            {
                id: 'kerberos-hero-advanced',
                name: 'Hero mit Bild & Icon',
                category: 'Hero & Header',
                description: 'Hero-Bereich mit anpassbarem Bild und Icon',
                html: `<section style="background: linear-gradient(135deg, #063AA8, #009CE6); color: white; padding: 6rem 0; text-align: center; position: relative; overflow: hidden;">
    <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: url('{{backgroundImage}}') center/cover; opacity: 0.2;"></div>
    <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem; position: relative; z-index: 2;">
        <div style="font-family: 'Font Awesome 5 Pro'; font-size: var(--large-text-size); color: {{iconColor}};">{{iconClass}}</div>
        <h1 style="font-family: var(--heading-font-font-family); font-size: var(--heading-1-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}};">{{title}}</h1>
        <p style="font-family: var(--body-font-font-family); font-size: var(--large-text-size); line-height: var(--body-font-line-height); opacity: 0.9; color: {{subtitleColor}};">{{subtitle}}</p>
        <a href="{{buttonLink}}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: rgba(255,255,255,0.2); color: {{buttonColor}}; padding: 1rem 2rem; border-radius: 8px; text-decoration: none; display: inline-block; border: 2px solid rgba(255,255,255,0.3); transition: all 0.3s ease;">{{buttonText}}</a>
    </div>
</section>`,
                properties: {
                    title: 'Compliance & Security Excellence',
                    titleColor: '#FFFFFF',
                    subtitle: 'Professionelle L√∂sungen f√ºr Ihre Compliance-Anforderungen',
                    subtitleColor: '#FFFFFF',
                    buttonText: 'Jetzt Beratung anfragen',
                    buttonColor: '#FFFFFF',
                    buttonLink: '#kontakt',
                    iconClass: '&#xf132;',
                    iconColor: '#FFFFFF',
                    backgroundImage: ''
                }
            },
            {
                id: 'kerberos-team-gallery',
                name: 'Team Galerie',
                category: 'Team & About',
                description: 'Mitarbeiter-Galerie mit Bildern',
                html: `<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}};">
    <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
        <div style="text-align: center;">
            <h2 style="font-family: var(--heading-font-font-family); font-size: var(--heading-2-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}};">{{title}}</h2>
            <p style="font-family: var(--body-font-font-family); font-size: var(--normal-text-size); line-height: var(--body-font-line-height); color: {{subtitleColor}}; max-width: 600px; margin: 0 auto;">{{subtitle}}</p>
        </div>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 2rem;">
            <div style="background: white; border-radius: 8px; padding: 2rem; text-align: center; box-shadow: 0 4px 12px rgba(6,58,168,0.1);">
                <div style="width: 120px; height: 120px; border-radius: 50%; margin: 0 auto; background: url('{{member1Image}}') center/cover; background-color: #E9ECEF;"></div>
                <h4 style="font-family: var(--heading-font-font-family); font-size: var(--heading-4-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{nameColor}};">{{member1Name}}</h4>
                <p style="font-family: var(--body-font-font-family); font-size: var(--small-text-size); line-height: var(--body-font-line-height); color: {{positionColor}};">{{member1Position}}</p>
                <p style="font-family: var(--body-font-font-family); font-size: var(--small-text-size); line-height: var(--body-font-line-height); color: {{descriptionColor}};">{{member1Description}}</p>
            </div>
            <div style="background: white; border-radius: 8px; padding: 2rem; text-align: center; box-shadow: 0 4px 12px rgba(6,58,168,0.1);">
                <div style="width: 120px; height: 120px; border-radius: 50%; margin: 0 auto; background: url('{{member2Image}}') center/cover; background-color: #E9ECEF;"></div>
                <h4 style="font-family: var(--heading-font-font-family); font-size: var(--heading-4-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{nameColor}};">{{member2Name}}</h4>
                <p style="font-family: var(--body-font-font-family); font-size: var(--small-text-size); line-height: var(--body-font-line-height); color: {{positionColor}};">{{member2Position}}</p>
                <p style="font-family: var(--body-font-font-family); font-size: var(--small-text-size); line-height: var(--body-font-line-height); color: {{descriptionColor}};">{{member2Description}}</p>
            </div>
        </div>
    </div>
</section>`,
                properties: {
                    title: 'Unser Expertenteam',
                    titleColor: '#063AA8',
                    subtitle: 'Professionelle Compliance-Beratung von erfahrenen Spezialisten',
                    subtitleColor: '#6c757d',
                    member1Name: 'Dr. Michael Kerberos',
                    member1Position: 'Senior Compliance Consultant',
                    member1Description: '√úber 15 Jahre Erfahrung in Geldw√§sche-Pr√§vention und Compliance-Management.',
                    member1Image: '',
                    member2Name: 'Anna Schmidt',
                    member2Position: 'DSGVO & Datenschutz Spezialistin',
                    member2Description: 'Expertin f√ºr Datenschutzrecht und DSGVO-konforme Implementierungen.',
                    member2Image: '',
                    nameColor: '#212529',
                    positionColor: '#6c757d',
                    descriptionColor: '#6c757d'
                }
            },
            {
                id: 'kerberos-stats',
                name: 'Statistiken mit Icons',
                category: 'Statistics & Numbers',
                description: 'Zahlen und Fakten mit anpassbaren Icons und Abst√§nden',
                html: `<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}};">
                <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
                    <div style="text-align: center; margin-bottom: {{titleSpacing}};">
                        <h2 style="font-family: var(--heading-font-font-family); font-size: var(--heading-2-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}}; margin: 0;">{{title}}</h2>
                    </div>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax({{statMinWidth}}, 1fr)); gap: {{statsGap}};">
                        {{statsBlocks}}
                    </div>
                </div>
            </section>`,
properties: {
    title: 'Unsere Erfolge in Zahlen',
    titleColor: '#063AA8',
    titleSpacing: '3rem',
    sectionSpacing: '6rem 0',
    backgroundColor: '#FFFFFF',
    statsGap: '2rem',
    statMinWidth: '250px',
    statPadding: '1rem',
    iconSize: 'var(--large-text-size)',
    iconSpacing: '1rem',
    numberSize: 'var(--heading-1-size)',
    numberSpacing: '0.5rem',
    textSize: 'var(--normal-text-size)',
    stat1Number: '500+',
    stat1Text: 'Zufriedene Kunden',
    stat1Icon: '&#xf0c0;',
    stat1IconColor: '#063AA8',
    stat1NumberColor: '#063AA8',
    stat1TextColor: '#6c757d',
    stat2Number: '15+',
    stat2Text: 'Jahre Erfahrung',
    stat2Icon: '&#xf559;',
    stat2IconColor: '#009CE6',
    stat2NumberColor: '#009CE6',
    stat2TextColor: '#6c757d',
    stat3Number: '99%',
    stat3Text: 'Erfolgsquote',
    stat3Icon: '&#xf005;',
    stat3IconColor: '#B265E9',
    stat3NumberColor: '#B265E9',
    stat3TextColor: '#6c757d',
    stat4Number: '24/7',
    stat4Text: 'Support',
    stat4Icon: '&#xf590;',
    stat4IconColor: '#EF8646',
    stat4NumberColor: '#EF8646',
    stat4TextColor: '#6c757d'
     }
    },
{
    id: 'kerberos-image-text',
    name: 'Bild-Text Kombination',
    description: 'Kombination aus Bild und Text mit Icon und Button',
    category: 'Content & Images',
    html: `<section style="background: {{backgroundColor}}; padding: {{sectionSpacing}};">
    <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: {{contentGap}}; align-items: center;">
            <div style="order: {{imageOrder}};">
                <img src="{{imageUrl}}" alt="{{imageAlt}}" style="width: 100%; border-radius: 8px; box-shadow: 0 4px 12px rgba(6,58,168,0.1);">
            </div>
            <div style="order: {{textOrder}};">
                <div style="font-family: 'Font Awesome 5 Pro'; font-size: var(--large-text-size); color: {{iconColor}};">{{iconClass}}</div>
                <h3 style="font-family: var(--heading-font-font-family); font-size: var(--heading-3-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}};">{{title}}</h3>
                <p style="font-family: var(--body-font-font-family); font-size: var(--normal-text-size); line-height: var(--body-font-line-height); color: {{textColor}};">{{text}}</p>
                <a href="{{buttonLink}}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: {{buttonBgColor}}; color: {{buttonTextColor}}; padding: 0.75rem 1.5rem; border-radius: 6px; text-decoration: none; display: inline-block;">{{buttonText}}</a>
            </div>
        </div>
    </div>
</section>`,
    properties: {
            title: 'Professionelle Compliance-L√∂sungen',
            titleColor: '#063AA8',
            text: 'Wir unterst√ºtzen Sie bei der Umsetzung aller Compliance-Anforderungen. Von der Erstberatung bis zur vollst√§ndigen Implementierung stehen wir Ihnen zur Seite.',
            textColor: '#6c757d',
            buttonText: 'Mehr erfahren',
            buttonLink: '#',
            buttonBgColor: '#063AA8',
            buttonTextColor: '#FFFFFF',
            imageUrl: '',
            imageAlt: 'Compliance Beratung',
            iconClass: '&#xf132;',
            iconColor: '#063AA8',
            backgroundColor: '#FFFFFF',
            imageOrder: '1',
            textOrder: '2',
            sectionSpacing: '6rem 0',
            contentGap: '4rem'
        }
},
            // Moderne Module aus Artifact integrieren
            {
                id: 'kerberos-image-text-modern',
                name: 'Modernes Bild-Text Layout',
                category: 'Content & Images',
                description: 'Vollst√§ndig responsives Bild-Text Layout mit modernen Design-Elementen',
                html: `<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}};">
    <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: {{contentGap}}; align-items: center; min-height: 400px;">
            <div style="order: {{imageOrder}}; position: relative;">
                <div style="position: relative; overflow: hidden; border-radius: {{imageRadius}}; box-shadow: {{imageShadow}}; transform: translateY(0); transition: all 0.3s ease;">
                    <img src="{{imageUrl}}" alt="{{imageAlt}}" style="width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease;">
                    <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: {{imageOverlay}}; opacity: 0; transition: opacity 0.3s ease;"></div>
                </div>
            </div>
            <div style="order: {{textOrder}}; padding: {{contentPadding}};">
                <div style="margin-bottom: {{iconSpacing}};">
                    <div style="font-family: 'Font Awesome 5 Pro'; font-size: {{iconSize}}; color: {{iconColor}}; display: inline-flex; align-items: center; justify-content: center; width: {{iconContainerSize}}; height: {{iconContainerSize}}; background: {{iconBackground}}; border-radius: {{iconRadius}};">{{iconClass}}</div>
                </div>
                <div style="margin-bottom: {{titleSpacing}};">
                    <h3 style="font-family: var(--heading-font-font-family); font-size: {{titleSize}}; font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}}; margin: 0;">{{title}}</h3>
                </div>
                <div style="margin-bottom: {{textSpacing}};">
                    <p style="font-family: var(--body-font-font-family); font-size: {{textSize}}; line-height: var(--body-font-line-height); color: {{textColor}}; margin: 0;">{{text}}</p>
                </div>
                <div style="margin-top: {{buttonSpacing}};">
                    <a href="{{buttonLink}}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: {{buttonBgColor}}; color: {{buttonTextColor}}; padding: {{buttonPadding}}; border-radius: {{buttonRadius}}; text-decoration: none; display: inline-flex; align-items: center; gap: 0.5rem; border: {{buttonBorder}}; transition: all 0.3s ease; box-shadow: {{buttonShadow}};">
                        {{buttonText}}
                        <span style="font-family: 'Font Awesome 5 Pro'; transition: transform 0.3s ease;">{{buttonIcon}}</span>
                    </a>
                </div>
            </div>
        </div>
    </div>
</section>`,
                properties: {
                    title: 'Professionelle Compliance-L√∂sungen',
                    titleColor: '#063AA8',
                    titleSize: 'var(--heading-2-size)',
                    titleSpacing: '1rem',
                    text: 'Wir unterst√ºtzen Sie bei der Umsetzung aller Compliance-Anforderungen. Von der Erstberatung bis zur vollst√§ndigen Implementierung stehen wir Ihnen zur Seite.',
                    textColor: '#6c757d',
                    textSize: 'var(--normal-text-size)',
                    textSpacing: '2rem',
                    buttonText: 'Mehr erfahren',
                    buttonLink: '#',
                    buttonBgColor: '#063AA8',
                    buttonTextColor: '#FFFFFF',
                    buttonPadding: '1rem 2rem',
                    buttonRadius: '8px',
                    buttonBorder: 'none',
                    buttonShadow: '0 4px 12px rgba(6,58,168,0.2)',
                    buttonSpacing: '2rem',
                    buttonIcon: '&#xf061;',
                    imageUrl: '',
                    imageAlt: 'Compliance Beratung',
                    imageRadius: '12px',
                    imageShadow: '0 8px 32px rgba(6,58,168,0.15)',
                    imageOverlay: 'linear-gradient(45deg, rgba(6,58,168,0.1), rgba(0,156,230,0.1))',
                    iconClass: '&#xf132;',
                    iconColor: '#063AA8',
                    iconSize: '2rem',
                    iconPadding: '1rem',
                    iconBackground: 'rgba(6,58,168,0.1)',
                    iconRadius: '50%',
                    iconSpacing: '1rem',
                    backgroundColor: '#FFFFFF',
                    imageOrder: '1',
                    textOrder: '2',
                    sectionSpacing: '6rem 0',
                    contentGap: '4rem',
                    contentPadding: '2rem'
                }
            },
            {
                id: 'kerberos-cta-modern',
                name: 'Moderne Call-to-Action',
                category: 'Contact & CTA',
                description: 'Moderne CTA-Sektion mit Gradient-Hintergrund und animierten Elementen',
                html: `<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}}; position: relative; overflow: hidden;">
    <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: {{backgroundPattern}}; opacity: 0.05;"></div>
    <div style="max-width: 1000px; margin: 0 auto; padding: 0 2rem; text-align: center; position: relative; z-index: 2;">
        <div style="margin-bottom: {{iconSpacing}};">
            <div style="font-family: 'Font Awesome 5 Pro'; font-size: {{iconSize}}; color: {{iconColor}}; display: inline-flex; align-items: center; justify-content: center; width: {{iconContainerSize}}; height: {{iconContainerSize}}; background: {{iconBackground}}; border-radius: {{iconRadius}}; box-shadow: {{iconShadow}};">{{iconClass}}</div>
        </div>
        <div style="margin-bottom: {{titleSpacing}};">
            <h2 style="font-family: var(--heading-font-font-family); font-size: {{titleSize}}; font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}}; margin: 0;">{{title}}</h2>
        </div>
        <div style="margin-bottom: {{textSpacing}};">
            <p style="font-family: var(--body-font-font-family); font-size: {{textSize}}; line-height: var(--body-font-line-height); color: {{textColor}}; margin: 0; max-width: 700px; margin-left: auto; margin-right: auto;">{{text}}</p>
        </div>
        <div style="display: flex; flex-wrap: wrap; gap: {{buttonGap}}; justify-content: center; margin-top: {{buttonSpacing}};">
            <a href="{{primaryButtonLink}}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: {{primaryButtonBg}}; color: {{primaryButtonColor}}; padding: {{primaryButtonPadding}}; border-radius: {{buttonRadius}}; text-decoration: none; display: inline-flex; align-items: center; gap: 0.75rem; border: {{primaryButtonBorder}}; transition: all 0.3s ease; box-shadow: {{primaryButtonShadow}}; font-size: {{buttonTextSize}};">
                {{primaryButtonText}}
                <span style="font-family: 'Font Awesome 5 Pro';">{{primaryButtonIcon}}</span>
            </a>
            <a href="{{secondaryButtonLink}}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: {{secondaryButtonBg}}; color: {{secondaryButtonColor}}; padding: {{secondaryButtonPadding}}; border-radius: {{buttonRadius}}; text-decoration: none; display: inline-flex; align-items: center; gap: 0.75rem; border: {{secondaryButtonBorder}}; transition: all 0.3s ease; box-shadow: {{secondaryButtonShadow}}; font-size: {{buttonTextSize}};">
                {{secondaryButtonText}}
                <span style="font-family: 'Font Awesome 5 Pro';">{{secondaryButtonIcon}}</span>
            </a>
        </div>
    </div>
</section>`,
                properties: {
                    title: 'Bereit f√ºr professionelle Compliance?',
                    titleColor: '#FFFFFF',
                    titleSize: 'var(--heading-1-size)',
                    titleSpacing: '1.5rem',
                    text: 'Lassen Sie uns gemeinsam Ihre Compliance-Herausforderungen meistern. Kontaktieren Sie unser Expertenteam f√ºr eine kostenlose Erstberatung.',
                    textColor: 'rgba(255,255,255,0.9)',
                    textSize: 'var(--normal-text-size)',
                    textSpacing: '3rem',
                    iconClass: '&#xf0e0;',
                    iconColor: '#FFFFFF',
                    iconSize: '4rem',
                    iconPadding: '2rem',
                    iconBackground: 'rgba(255,255,255,0.1)',
                    iconRadius: '50%',
                    iconShadow: '0 8px 32px rgba(255,255,255,0.1)',
                    iconSpacing: '2rem',
                    primaryButtonText: 'Kostenlose Beratung',
                    primaryButtonLink: '#kontakt',
                    primaryButtonBg: '#FFFFFF',
                    primaryButtonColor: '#063AA8',
                    primaryButtonPadding: '1.25rem 2.5rem',
                    primaryButtonBorder: 'none',
                    primaryButtonShadow: '0 8px 32px rgba(255,255,255,0.2)',
                    primaryButtonIcon: '&#xf095;',
                    secondaryButtonText: 'Portfolio ansehen',
                    secondaryButtonLink: '#portfolio',
                    secondaryButtonBg: 'transparent',
                    secondaryButtonColor: '#FFFFFF',
                    secondaryButtonPadding: '1.25rem 2.5rem',
                    secondaryButtonBorder: '2px solid rgba(255,255,255,0.3)',
                    secondaryButtonShadow: 'none',
                    secondaryButtonIcon: '&#xf35d;',
                    buttonRadius: '12px',
                    buttonTextSize: '1.1rem',
                    buttonSpacing: '3rem',
                    buttonGap: '1rem',
                    sectionSpacing: '8rem 0',
                    backgroundColor: 'linear-gradient(135deg, #063AA8, #009CE6)',
                    backgroundPattern: 'radial-gradient(circle at 20% 20%, rgba(255,255,255,0.1) 0%, transparent 50%)'
                }
            },
            
            // Vorhandene Module beibehalten...
            {
                id: 'kerberos-hero',
                name: 'Kerberos Hero Section',
                category: 'Hero & Header',
                description: 'Hauptbereich mit Kerberos Branding',
                html: `<section style="background: linear-gradient(135deg, #063AA8, #009CE6); color: white; padding: 6rem 0; text-align: center;">
    <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
        <h1 style="font-family: var(--heading-font-font-family); font-size: var(--heading-1-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height);">{{title}}</h1>
        <p style="font-family: var(--body-font-font-family); font-size: var(--large-text-size); line-height: var(--body-font-line-height); opacity: 0.9;">{{subtitle}}</p>
        <a href="{{buttonLink}}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: rgba(255,255,255,0.2); color: white; padding: 1rem 2rem; border-radius: 8px; text-decoration: none; display: inline-block; border: 2px solid rgba(255,255,255,0.3); transition: all 0.3s ease;">{{buttonText}}</a>
    </div>
</section>`,
                properties: {
                    title: 'Compliance & Security Excellence',
                    subtitle: 'Professionelle L√∂sungen f√ºr Ihre Compliance-Anforderungen',
                    buttonText: 'Jetzt Beratung anfragen',
                    buttonLink: '#kontakt'
                }
            },
        ];

        // Module Bibliothek laden
        function loadModuleLibrary() {
            const library = document.getElementById('moduleLibrary');
            library.innerHTML = '';
            
            const categories = [...new Set(MODULE_TEMPLATES.map(t => t.category))];
            
            categories.forEach(category => {
                const categoryDiv = document.createElement('div');
                categoryDiv.innerHTML = `<h4 class="category-title">${category}</h4>`;
                library.appendChild(categoryDiv);
                
                MODULE_TEMPLATES.filter(t => t.category === category).forEach(template => {
                    const moduleDiv = document.createElement('div');
                    moduleDiv.className = 'module-template';
                    moduleDiv.dataset.templateId = template.id;
                    
                    moduleDiv.innerHTML = `
                        <div class="module-name">${template.name}</div>
                        <div class="module-description">${template.description}</div>
                    `;
                    
                    moduleDiv.addEventListener('click', () => {
                        addModuleToCanvas(template.id);
                    });
                    
                    library.appendChild(moduleDiv);
                });
            });
        }

        // Icon Modal Functions
        function showIconPicker(property) {
            currentProperty = property;
            const modal = document.getElementById('iconModal');
            const picker = document.getElementById('iconPicker');
            
            picker.innerHTML = '';
            FONT_AWESOME_ICONS.forEach(icon => {
                const iconDiv = document.createElement('div');
                iconDiv.className = 'icon-option';
                iconDiv.innerHTML = `<span style="font-family: 'Font Awesome 5 Pro';">${icon.unicode}</span>`;
                iconDiv.title = icon.name;
                iconDiv.onclick = () => selectIcon(icon.unicode);
                picker.appendChild(iconDiv);
            });
            
            modal.style.display = 'block';
        }

        function selectIcon(iconUnicode) {
            if (selectedModule && currentProperty) {
                selectedModule.properties[currentProperty] = iconUnicode;
                renderPropertyPanel();
                closeIconModal();
                showNotification('‚úÖ Icon aktualisiert');
            }
        }

        function closeIconModal() {
            document.getElementById('iconModal').style.display = 'none';
        }

        // Image Modal Functions
        function showImagePicker(property) {
            currentProperty = property;
            const modal = document.getElementById('imageModal');
            loadStockImages();
            modal.style.display = 'block';
        }

        function loadStockImages() {
            const container = document.getElementById('stockImages');
            container.innerHTML = '';
            
            STOCK_IMAGES.forEach(url => {
                const img = document.createElement('img');
                img.src = url;
                img.style.cssText = 'width: 100%; height: 80px; object-fit: cover; border-radius: 4px; cursor: pointer; transition: transform 0.2s;';
                img.onmouseover = () => img.style.transform = 'scale(1.05)';
                img.onmouseout = () => img.style.transform = 'scale(1)';
                img.onclick = () => selectImage(url);
                container.appendChild(img);
            });
        }

        function selectImage(imageUrl) {
            if (selectedModule && currentProperty) {
                selectedModule.properties[currentProperty] = imageUrl;
                renderPropertyPanel();
                closeImageModal();
                showNotification('‚úÖ Bild aktualisiert');
            }
        }

        function switchTab(tabName) {
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            document.querySelector(`[onclick="switchTab('${tabName}')"]`).classList.add('active');
            document.getElementById(`${tabName}Tab`).classList.add('active');
        }

        function closeImageModal() {
            document.getElementById('imageModal').style.display = 'none';
        }

        // Image Upload
        document.getElementById('imageInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const imageUrl = e.target.result;
                    const fileName = `uploaded_${Date.now()}_${file.name}`;
                    uploadedImages[fileName] = imageUrl;
                    
                    if (selectedModule && currentProperty) {
                        selectedModule.properties[currentProperty] = imageUrl;
                        renderPropertyPanel();
                        closeImageModal();
                        showNotification('‚úÖ Bild hochgeladen und zugewiesen');
                    }
                };
                reader.readAsDataURL(file);
            }
        });

        // Modul zum Canvas hinzuf√ºgen
        function addModuleToCanvas(templateId) {
            const template = MODULE_TEMPLATES.find(t => t.id === templateId);
            if (!template) return;
            
            const module = {
                id: `module_${++moduleCounter}`,
                templateId: templateId,
                html: template.html,
                properties: { ...template.properties },
                name: template.name,
                category: template.category,
                description: template.description
            };
            
            modules.push(module);
            renderCanvas();
            selectModule(module.id);
            
            const placeholder = document.querySelector('.canvas-placeholder');
            if (placeholder) placeholder.style.display = 'none';
            
            showNotification('‚úÖ ' + template.name + ' hinzugef√ºgt');
        }

        // Canvas rendern
        function renderCanvas() {
            const canvas = document.getElementById('canvas');
            const placeholder = canvas.querySelector('.canvas-placeholder');
            
            const moduleElements = canvas.querySelectorAll('.canvas-module');
            moduleElements.forEach(el => el.remove());
            
            if (modules.length === 0) {
                if (placeholder) placeholder.style.display = 'block';
                return;
            }
            
            if (placeholder) placeholder.style.display = 'none';
            
            modules.forEach((module, index) => {
                const moduleDiv = document.createElement('div');
                moduleDiv.className = 'canvas-module';
                moduleDiv.dataset.moduleId = module.id;
                
                moduleDiv.innerHTML = `
                    <div class="module-controls">
                        <button class="control-btn btn-edit" onclick="selectModule('${module.id}')" title="Bearbeiten">‚úèÔ∏è</button>
                        <button class="control-btn btn-edit" onclick="editModuleInfo('${module.id}')" title="Modul-Info bearbeiten">‚ÑπÔ∏è</button>
                        <button class="control-btn btn-copy" onclick="copyModuleCode('${module.id}')" title="Code kopieren">üìã</button>
                        <button class="control-btn btn-move" onclick="moveModule('${module.id}', -1)" title="Nach oben">‚Üë</button>
                        <button class="control-btn btn-move" onclick="moveModule('${module.id}', 1)" title="Nach unten">‚Üì</button>
                        <button class="control-btn btn-delete" onclick="deleteModule('${module.id}')" title="L√∂schen">√ó</button>
                    </div>
                    <div style="padding: 0.5rem; background: rgba(6,58,168,0.02); border-radius: 4px; margin-bottom: 0.5rem; font-size: 0.8rem; color: #6c757d; border: 1px solid rgba(6,58,168,0.1);">
                        üìÑ ${module.name} <span style="opacity: 0.7;">| ${module.category || 'Uncategorized'}</span>
                    </div>
                    <div class="module-content">${processModuleHTML(module)}</div>
                `;
                
                moduleDiv.addEventListener('click', (e) => {
                    if (!e.target.classList.contains('control-btn')) {
                        selectModule(module.id);
                    }
                });
                
                canvas.appendChild(moduleDiv);
            });
        }

        // HTML mit Properties verarbeiten
        function processModuleHTML(module) {
            let html = module.html;
            Object.entries(module.properties).forEach(([key, value]) => {
                const regex = new RegExp(`{{${key}}}`, 'g');
                html = html.replace(regex, value);
            });
            return html;
        }

        // Modul ausw√§hlen
        function selectModule(moduleId) {
            document.querySelectorAll('.canvas-module').forEach(el => {
                el.classList.remove('selected');
            });
            
            const moduleEl = document.querySelector(`[data-module-id="${moduleId}"]`);
            if (moduleEl) {
                moduleEl.classList.add('selected');
            }
            
            selectedModule = modules.find(m => m.id === moduleId);
            renderPropertyPanel();
            updateExportButtons(); // Update export buttons when module is selected
        }
        function renderPropertyPanel() {
            const panel = document.getElementById('propertyPanel');
            
            if (!selectedModule) {
                panel.innerHTML = '<p style="color: #6c757d; text-align: center; padding: 1.5rem;">Modul ausw√§hlen zum Bearbeiten</p>';
                return;
            }
            
            const template = MODULE_TEMPLATES.find(t => t.id === selectedModule.templateId);
            
            let html = `
                <h4 style="color: var(--kerberos-primary); margin-bottom: 1rem; font-size: 1rem;">${template.name}</h4>
                <p style="font-size: 0.8rem; color: #6c757d; margin-bottom: 1.5rem;">${template.description}</p>
            `;
            
            Object.entries(selectedModule.properties).forEach(([key, value]) => {
                const fieldType = getFieldType(key, value);
                const label = formatPropertyName(key);
                
                html += `<div class="form-group">`;
                html += `<label class="form-label">${label}</label>`;
                
                if (fieldType === 'color') {
                    html += renderColorPicker(key, value);
                } else if (fieldType === 'icon') {
                    html += renderIconPicker(key, value);
                } else if (fieldType === 'image') {
                    html += renderImagePicker(key, value);
                } else if (fieldType === 'spacing') {
                    html += renderSpacingPicker(key, value);
                } else if (fieldType === 'textarea') {
                    html += `<textarea class="form-control" onchange="updateProperty('${key}', this.value)" style="min-height: 80px;">${value}</textarea>`;
                } else {
                    html += `<input type="text" class="form-control" value="${value}" onchange="updateProperty('${key}', this.value)">`;
                }
                
                html += `</div>`;
            });
            
            html += `
                <div style="margin-top: 1.5rem; padding-top: 1rem; border-top: 1px solid var(--kerberos-border);">
                    <button class="btn btn-success" onclick="applyChanges()" style="width: 100%; margin-bottom: 0.5rem;">üíæ √Ñnderungen √ºbernehmen</button>
                    <button class="btn btn-secondary" onclick="copyModuleCode('${selectedModule.id}')" style="width: 100%; margin-bottom: 0.5rem;">üìã Code kopieren</button>
                    <button class="btn btn-warning" onclick="duplicateModule('${selectedModule.id}')" style="width: 100%; margin-bottom: 0.5rem;">üìÑ Duplizieren</button>
                </div>
            `;

            html += `
                <div style="margin-top: 1rem;">
                    <h5 style="font-size: 0.9rem; margin-bottom: 0.5rem; color: var(--kerberos-primary);">Squarespace Code:</h5>
                    <div class="code-output" id="moduleCode">${escapeHtml(processModuleHTML(selectedModule))}</div>
                    <button class="copy-btn" onclick="copyToClipboard('moduleCode')">üìã Squarespace Code kopieren</button>
                </div>
            `;
            
            panel.innerHTML = html;
        }

        // Feld-Typ bestimmen
        function getFieldType(key, value) {
            if (key.includes('Color') || key.includes('color')) return 'color';
            if (key.includes('Icon') || key.includes('icon')) return 'icon';
            if (key.includes('Image') || key.includes('image') || key.includes('Url')) return 'image';
            if (key.includes('Spacing') || key.includes('spacing') || key.includes('Margin') || key.includes('margin') || key.includes('Padding') || key.includes('padding') || key.includes('Gap') || key.includes('gap')) return 'spacing';
            if (key.includes('text') && value.length > 50) return 'textarea';
            return 'text';
        }

        // Spacing Picker rendern
        function renderSpacingPicker(key, currentValue) {
            const spacingOptions = [
                { label: 'Keine', value: '0' },
                { label: 'Extra Klein', value: '0.25rem' },
                { label: 'Klein', value: '0.5rem' },
                { label: 'Standard', value: '1rem' },
                { label: 'Mittel', value: '1.5rem' },
                { label: 'Gro√ü', value: '2rem' },
                { label: 'Extra Gro√ü', value: '3rem' },
                { label: 'XXL', value: '4rem' }
            ];
            
            let html = `<select class="form-control" onchange="updateProperty('${key}', this.value)">`;
            
            spacingOptions.forEach(option => {
                const selected = option.value === currentValue ? 'selected' : '';
                html += `<option value="${option.value}" ${selected}>${option.label} (${option.value})</option>`;
            });
            
            html += `</select>`;
            html += `<input type="text" class="form-control" value="${currentValue}" onchange="updateProperty('${key}', this.value)" style="margin-top: 0.5rem;" placeholder="Benutzerdefiniert (z.B. 2.5rem)">`;
            
            return html;
        }

        // Color Picker rendern
        function renderColorPicker(key, currentValue) {
            const colors = Object.values(KERBEROS_COLORS);
            let html = `<div class="color-picker">`;
            
            colors.forEach(color => {
                const selected = color === currentValue ? 'selected' : '';
                html += `<div class="color-option ${selected}" style="background: ${color};" onclick="updateProperty('${key}', '${color}')"></div>`;
            });
            
            html += `</div>`;
            html += `<input type="text" class="form-control" value="${currentValue}" onchange="updateProperty('${key}', this.value)" style="margin-top: 0.5rem;" placeholder="Hex-Code oder Farbname">`;
            
            return html;
        }

        // Icon Picker rendern
        function renderIconPicker(key, currentValue) {
            return `
                <div style="display: flex; align-items: center; gap: 0.5rem;">
                    <div style="font-family: 'Font Awesome 5 Pro'; font-size: 1.5rem; padding: 0.5rem; border: 1px solid var(--kerberos-border); border-radius: 4px; min-width: 50px; text-align: center;">
                        ${currentValue || '&#xf132;'}
                    </div>
                    <button type="button" class="btn btn-primary" onclick="showIconPicker('${key}')" style="flex: 1;">Icon ausw√§hlen</button>
                </div>
                <input type="text" class="form-control" value="${currentValue}" onchange="updateProperty('${key}', this.value)" style="margin-top: 0.5rem;" placeholder="Unicode (z.B. &#xf132;)">
            `;
        }

        // Image Picker rendern
        function renderImagePicker(key, currentValue) {
            const preview = currentValue ? `<img src="${currentValue}" class="image-preview" alt="Vorschau">` : '';
            
            return `
                <input type="text" class="form-control" value="${currentValue}" onchange="updateProperty('${key}', this.value)" placeholder="Squarespace Bild-URL eingeben..." style="margin-bottom: 0.5rem;">
                <div style="display: flex; gap: 0.5rem; margin-bottom: 0.5rem;">
                    <button type="button" class="btn btn-secondary" onclick="showImagePicker('${key}')" style="flex: 1;">üì∏ Bild hochladen/Stock</button>
                    <button type="button" class="btn btn-secondary" onclick="updateProperty('${key}', '')" style="min-width: auto;">üóëÔ∏è</button>
                </div>
                ${preview}
                <small style="color: #6c757d; font-size: 0.75rem;">üí° Tipp: Kopieren Sie die Bild-URL direkt aus Squarespace</small>
            `;
        }

        // Property Name formatieren
        function formatPropertyName(key) {
            const names = {
                title: 'Haupttitel',
                titleColor: 'Titel-Farbe',
                // Spacing Properties
                titleSpacing: 'Titel-Abstand',
                subtitleSpacing: 'Untertitel-Abstand',
                textSpacing: 'Text-Abstand',
                buttonSpacing: 'Button-Abstand',
                iconSpacing: 'Icon-Abstand',
                imageSpacing: 'Bild-Abstand',
                elementSpacing: 'Element-Abstand',
                sectionSpacing: 'Bereich-Abstand',
                contentSpacing: 'Inhalt-Abstand',
                marginTop: 'Abstand oben',
                marginBottom: 'Abstand unten',
                marginLeft: 'Abstand links',
                marginRight: 'Abstand rechts',
                paddingTop: 'Innenabstand oben',
                paddingBottom: 'Innenabstand unten',
                gap: 'Zwischenabstand',
                subtitle: 'Untertitel',
                subtitleColor: 'Untertitel-Farbe',
                buttonText: 'Button Text',
                buttonColor: 'Button Farbe',
                buttonBgColor: 'Button Hintergrund',
                buttonTextColor: 'Button Text-Farbe',
                buttonLink: 'Button Link',
                text: 'Text',
                textColor: 'Text-Farbe',
                iconClass: 'Icon',
                iconColor: 'Icon-Farbe',
                backgroundImage: 'Hintergrundbild',
                imageUrl: 'Bild-URL',
                imageAlt: 'Bild-Alt-Text',
                backgroundColor: 'Hintergrundfarbe',
                nameColor: 'Name-Farbe',
                positionColor: 'Position-Farbe',
                descriptionColor: 'Beschreibung-Farbe',
                member1Name: 'Person 1 Name',
                member1Position: 'Person 1 Position',
                member1Description: 'Person 1 Beschreibung',
                member1Image: 'Person 1 Bild',
                member2Name: 'Person 2 Name',
                member2Position: 'Person 2 Position',
                member2Description: 'Person 2 Beschreibung',
                member2Image: 'Person 2 Bild',
                stat1Number: 'Statistik 1 Zahl',
                stat1Text: 'Statistik 1 Text',
                stat1Icon: 'Statistik 1 Icon',
                stat1IconColor: 'Statistik 1 Icon-Farbe',
                stat1NumberColor: 'Statistik 1 Zahlen-Farbe',
                stat1TextColor: 'Statistik 1 Text-Farbe',
                imageOrder: 'Bild-Reihenfolge (1 oder 2)',
                textOrder: 'Text-Reihenfolge (1 oder 2)',
                // Spacing f√ºr Statistiken
                titleSpacing: 'Titel-Abstand',
                sectionSpacing: 'Bereich-Abstand',
                statsGap: 'Statistik-Zwischenabstand',
                statMinWidth: 'Statistik Mindestbreite',
                statPadding: 'Statistik Innenabstand',
                iconSize: 'Icon-Gr√∂√üe',
                iconSpacing: 'Icon-Abstand',
                numberSize: 'Zahlen-Gr√∂√üe',
                numberSpacing: 'Zahlen-Abstand',
                textSize: 'Text-Gr√∂√üe',
                stat2Number: 'Statistik 2 Zahl',
                stat2Text: 'Statistik 2 Text',
                stat2Icon: 'Statistik 2 Icon',
                stat2IconColor: 'Statistik 2 Icon-Farbe',
                stat2NumberColor: 'Statistik 2 Zahlen-Farbe',
                stat2TextColor: 'Statistik 2 Text-Farbe',
                stat3Number: 'Statistik 3 Zahl',
                stat3Text: 'Statistik 3 Text',
                stat3Icon: 'Statistik 3 Icon',
                stat3IconColor: 'Statistik 3 Icon-Farbe',
                stat3NumberColor: 'Statistik 3 Zahlen-Farbe',
                stat3TextColor: 'Statistik 3 Text-Farbe',
                stat4Number: 'Statistik 4 Zahl',
                stat4Text: 'Statistik 4 Text',
                stat4Icon: 'Statistik 4 Icon',
                stat4IconColor: 'Statistik 4 Icon-Farbe',
                stat4NumberColor: 'Statistik 4 Zahlen-Farbe',
                stat4TextColor: 'Statistik 4 Text-Farbe',
                // Layout Properties
                contentGap: 'Inhalt-Zwischenabstand',
                iconContainerSize: 'Icon-Container Gr√∂√üe',
                // CTA Properties
                primaryButtonText: 'Hauptbutton Text',
                primaryButtonLink: 'Hauptbutton Link',
                primaryButtonBg: 'Hauptbutton Hintergrund',
                primaryButtonColor: 'Hauptbutton Farbe',
                primaryButtonPadding: 'Hauptbutton Padding',
                primaryButtonBorder: 'Hauptbutton Rahmen',
                primaryButtonShadow: 'Hauptbutton Schatten',
                primaryButtonIcon: 'Hauptbutton Icon',
                secondaryButtonText: 'Zweitbutton Text',
                secondaryButtonLink: 'Zweitbutton Link',
                secondaryButtonBg: 'Zweitbutton Hintergrund',
                secondaryButtonColor: 'Zweitbutton Farbe',
                secondaryButtonPadding: 'Zweitbutton Padding',
                secondaryButtonBorder: 'Zweitbutton Rahmen',
                secondaryButtonShadow: 'Zweitbutton Schatten',
                secondaryButtonIcon: 'Zweitbutton Icon',
                buttonRadius: 'Button Rundung',
                buttonTextSize: 'Button Text-Gr√∂√üe',
                buttonGap: 'Button-Abstand',
                backgroundPattern: 'Hintergrund-Muster',
                // Modern Layout Properties
                titleSize: 'Titel-Gr√∂√üe',
                textSize: 'Text-Gr√∂√üe',
                buttonPadding: 'Button-Padding',
                buttonRadius: 'Button-Rundung',
                buttonBorder: 'Button-Rahmen',
                buttonShadow: 'Button-Schatten',
                buttonIcon: 'Button-Icon',
                imageRadius: 'Bild-Rundung',
                imageShadow: 'Bild-Schatten',
                imageOverlay: 'Bild-Overlay',
                iconSize: 'Icon-Gr√∂√üe',
                iconPadding: 'Icon-Padding',
                iconBackground: 'Icon-Hintergrund',
                iconRadius: 'Icon-Rundung',
                contentPadding: 'Inhalt-Padding'
            };
            return names[key] || key.charAt(0).toUpperCase() + key.slice(1);
        }

        // Property aktualisieren
        function updateProperty(key, value) {
            if (selectedModule) {
                selectedModule.properties[key] = value;
                // Live-Update f√ºr Farben
                if (key.includes('Color') || key.includes('color')) {
                    applyChanges();
                }
            }
        }

        // √Ñnderungen √ºbernehmen
        function applyChanges() {
            if (!selectedModule) return;
            
            renderCanvas();
            selectModule(selectedModule.id);
            showNotification('‚úÖ √Ñnderungen √ºbernommen');
        }

        // Globale Funktionen
        window.selectModule = selectModule;
        window.editModuleInfo = editModuleInfo;
        
        // Seite speichern
        function showSavePageDialog() {
            const modal = document.getElementById('savePageModal');
            const pageName = document.getElementById('pageNameInput').value || 'Neue Seite';
            document.getElementById('savePageName').value = pageName;
            modal.style.display = 'block';
        }

        function saveCurrentPage() {
            const pageName = document.getElementById('savePageName').value.trim();
            const description = document.getElementById('savePageDescription').value.trim();
            
            if (!pageName) {
                showNotification('‚ùå Bitte Seitenname eingeben');
                return;
            }
            
            const pageData = {
                name: pageName,
                description: description,
                modules: JSON.parse(JSON.stringify(modules)),
                created: new Date().toISOString(),
                spacing: { ...globalSpacing }
            };
            
            savedPages[pageName] = pageData;
            localStorage.setItem('kerberos-saved-pages', JSON.stringify(savedPages));
            
            closeSavePageModal();
            showNotification('‚úÖ Seite "' + pageName + '" gespeichert');
        }

        function closeSavePageModal() {
            document.getElementById('savePageModal').style.display = 'none';
        }

        // Seite laden
        function showLoadPageDialog() {
            loadSavedPages();
            const modal = document.getElementById('loadPageModal');
            const container = document.getElementById('savedPagesList');
            
            container.innerHTML = '';
            
            if (Object.keys(savedPages).length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #6c757d; padding: 2rem;">Keine gespeicherten Seiten gefunden</p>';
            } else {
                Object.entries(savedPages).forEach(([name, data]) => {
                    const pageDiv = document.createElement('div');
                    pageDiv.style.cssText = 'border: 1px solid var(--kerberos-border); border-radius: 6px; padding: 1rem; margin-bottom: 1rem; cursor: pointer; transition: all 0.2s;';
                    pageDiv.innerHTML = `
                        <h4 style="margin: 0 0 0.5rem 0; color: var(--kerberos-primary);">${name}</h4>
                        <p style="margin: 0 0 0.5rem 0; font-size: 0.9rem; color: #6c757d;">${data.description || 'Keine Beschreibung'}</p>
                        <small style="color: #999;">Erstellt: ${new Date(data.created).toLocaleString('de-DE')} | ${data.modules.length} Module</small>
                        <div style="margin-top: 0.5rem; display: flex; gap: 0.5rem;">
                            <button class="btn btn-primary" onclick="loadPage('${name}')" style="flex: 1;">Laden</button>
                            <button class="btn btn-warning" onclick="exportSavedPage('${name}')">Export</button>
                            <button class="btn btn-secondary" onclick="deleteSavedPage('${name}')">üóëÔ∏è</button>
                        </div>
                    `;
                    container.appendChild(pageDiv);
                });
            }
            
            modal.style.display = 'block';
        }

        function loadPage(pageName) {
            const pageData = savedPages[pageName];
            if (!pageData) return;
            
            modules = JSON.parse(JSON.stringify(pageData.modules));
            if (pageData.spacing) {
                globalSpacing = { ...pageData.spacing };
            }
            
            document.getElementById('pageNameInput').value = pageName;
            renderCanvas();
            selectedModule = null;
            renderPropertyPanel();
            closeLoadPageModal();
            
            showNotification('‚úÖ Seite "' + pageName + '" geladen');
        }

        function deleteSavedPage(pageName) {
            if (confirm('Seite "' + pageName + '" wirklich l√∂schen?')) {
                delete savedPages[pageName];
                localStorage.setItem('kerberos-saved-pages', JSON.stringify(savedPages));
                showLoadPageDialog(); // Refresh
                showNotification('üóëÔ∏è Seite gel√∂scht');
            }
        }

        function exportSavedPage(pageName) {
            const pageData = savedPages[pageName];
            if (!pageData) return;
            
            const jsonData = JSON.stringify(pageData, null, 2);
            downloadJSON(jsonData, `kerberos-page-${pageName.toLowerCase().replace(/[^a-z0-9]/g, '-')}.json`);
        }

        function closeLoadPageModal() {
            document.getElementById('loadPageModal').style.display = 'none';
        }

        function loadSavedPages() {
            try {
                const saved = localStorage.getItem('kerberos-saved-pages');
                if (saved) {
                    savedPages = JSON.parse(saved);
                }
            } catch (e) {
                console.error('Fehler beim Laden der Seiten:', e);
                savedPages = {};
            }
        }

        // Import/Export System
        function showImportModal() {
            document.getElementById('importModal').style.display = 'block';
            updateExportButtons();
        }

        function closeImportModal() {
            document.getElementById('importModal').style.display = 'none';
        }

        function switchImportTab(tabName) {
            document.querySelectorAll('#importModal .tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('#importModal .tab-content').forEach(content => content.classList.remove('active'));
            
            document.querySelector(`[onclick="switchImportTab('${tabName}')"]`).classList.add('active');
            document.getElementById(`import${tabName.charAt(0).toUpperCase() + tabName.slice(1)}Tab`).classList.add('active');
        }

        function exportCurrentPage() {
            const pageName = document.getElementById('pageNameInput').value || 'kerberos-page';
            const pageData = {
                name: pageName,
                description: 'Exportierte Kerberos Seite',
                modules: modules,
                created: new Date().toISOString(),
                spacing: globalSpacing,
                type: 'page'
            };
            
            const jsonData = JSON.stringify(pageData, null, 2);
            downloadJSON(jsonData, `${pageName.toLowerCase().replace(/[^a-z0-9]/g, '-')}.json`);
            showNotification('üìÑ Seite exportiert');
        }

        function exportModuleTemplates() {
            const templateData = {
                name: 'Kerberos Module Templates',
                description: 'Sammlung aller Kerberos Module',
                templates: MODULE_TEMPLATES,
                created: new Date().toISOString(),
                type: 'templates'
            };
            
            const jsonData = JSON.stringify(templateData, null, 2);
            downloadJSON(jsonData, 'kerberos-module-templates.json');
            showNotification('üì¶ Module Templates exportiert');
        }

        function exportSelectedModule() {
            if (!selectedModule) return;
            
            const template = MODULE_TEMPLATES.find(t => t.id === selectedModule.templateId);
            const moduleData = {
                name: selectedModule.name,
                description: template?.description || 'Exportiertes Modul',
                module: {
                    ...template,
                    customProperties: selectedModule.properties
                },
                created: new Date().toISOString(),
                type: 'module'
            };
            
            const jsonData = JSON.stringify(moduleData, null, 2);
            downloadJSON(jsonData, `${selectedModule.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}.json`);
            showNotification('üîß Modul exportiert');
        }

        function downloadJSON(jsonData, filename) {
            const blob = new Blob([jsonData], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            a.click();
            URL.revokeObjectURL(url);
        }

        function importData() {
            const textarea = document.getElementById('importTextarea');
            let jsonData = textarea.value.trim();
            
            if (!jsonData) {
                showNotification('‚ùå Bitte JSON-Daten eingeben oder Datei ausw√§hlen');
                return;
            }
            
            try {
                const data = JSON.parse(jsonData);
                handleImportData(data);
            } catch (e) {
                showNotification('‚ùå Ung√ºltige JSON-Daten: ' + e.message);
            }
        }

        function handleImportData(data) {
            if (!data.type) {
                showNotification('‚ùå Unbekanntes Datenformat');
                return;
            }
            
            switch (data.type) {
                case 'page':
                    if (confirm('Aktuelle Seite √ºberschreiben und ' + data.name + ' laden?')) {
                        modules = data.modules || [];
                        if (data.spacing) globalSpacing = data.spacing;
                        document.getElementById('pageNameInput').value = data.name;
                        renderCanvas();
                        selectedModule = null;
                        renderPropertyPanel();
                        showNotification('‚úÖ Seite importiert: ' + data.name);
                        closeImportModal();
                    }
                    break;
                    
                case 'module':
                    if (data.module) {
                        addModuleToCanvas(data.module.id);
                        showNotification('‚úÖ Modul importiert: ' + data.name);
                        closeImportModal();
                    }
                    break;
                    
                case 'templates':
                    if (confirm('Neue Module-Templates hinzuf√ºgen?')) {
                        if (data.templates && Array.isArray(data.templates)) {
                            data.templates.forEach(template => {
                                if (!MODULE_TEMPLATES.find(t => t.id === template.id)) {
                                    MODULE_TEMPLATES.push(template);
                                }
                            });
                            loadModuleLibrary();
                            showNotification('‚úÖ Templates importiert: ' + data.templates.length + ' Module');
                            closeImportModal();
                        }
                    }
                    break;
                    
                default:
                    showNotification('‚ùå Unbekannter Datentyp: ' + data.type);
            }
        }

        function updateExportButtons() {
            const btn = document.getElementById('exportSelectedBtn');
            if (selectedModule) {
                btn.disabled = false;
                btn.textContent = 'üîß "' + selectedModule.name + '" exportieren';
            } else {
                btn.disabled = true;
                btn.textContent = 'üîß Ausgew√§hltes Modul exportieren';
            }
        }

        // Spacing/Ratio System
        function showSettingsModal() {
            document.getElementById('settingsModal').style.display = 'block';
            loadSpacingSettings();
        }

        function closeSettingsModal() {
            document.getElementById('settingsModal').style.display = 'none';
        }

        function switchSettingsTab(tabName) {
            document.querySelectorAll('#settingsModal .tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('#settingsModal .tab-content').forEach(content => content.classList.remove('active'));
            
            document.querySelector(`[onclick="switchSettingsTab('${tabName}')"]`).classList.add('active');
            document.getElementById(`settings${tabName.charAt(0).toUpperCase() + tabName.slice(1)}Tab`).classList.add('active');
        }

        function loadSpacingSettings() {
            document.getElementById('sectionPaddingSelect').value = globalSpacing.sectionPadding;
            document.getElementById('elementSpacingSelect').value = globalSpacing.elementSpacing;
            document.getElementById('textSpacingSelect').value = globalSpacing.textSpacing;
        }

        function updateSpacing(type, value) {
            globalSpacing[type] = value;
            localStorage.setItem('kerberos-global-spacing', JSON.stringify(globalSpacing));
            showNotification('‚úÖ ' + type + ' aktualisiert');
        }

        function applySpacingToAll() {
            if (confirm('Neue Abst√§nde auf alle Module anwenden?')) {
                modules.forEach(module => {
                    module.html = updateModuleSpacing(module.html);
                });
                renderCanvas();
                showNotification('‚úÖ Abst√§nde auf alle Module angewandt');
            }
        }

        function updateModuleSpacing(html) {
            // Padding ersetzen
            html = html.replace(/padding:\s*[\d\.]+rem\s+[\d\.]+/g, `padding: ${globalSpacing.sectionPadding}`);
            // Gap ersetzen
            html = html.replace(/gap:\s*[\d\.]+rem/g, `gap: ${globalSpacing.elementSpacing}`);
            return html;
        }

        // Modul-Info bearbeiten
        function editModuleInfo(moduleId) {
            const module = modules.find(m => m.id === moduleId);
            if (!module) return;
            
            const template = MODULE_TEMPLATES.find(t => t.id === module.templateId);
            
            document.getElementById('editModuleName').value = module.name;
            document.getElementById('editModuleCategory').value = module.category || template?.category || 'Custom';
            document.getElementById('editModuleDescription').value = module.description || template?.description || '';
            
            document.getElementById('moduleEditModal').style.display = 'block';
            document.getElementById('moduleEditModal').dataset.moduleId = moduleId;
        }

        function closeModuleEditModal() {
            document.getElementById('moduleEditModal').style.display = 'none';
        }

        function saveModuleInfo() {
            const moduleId = document.getElementById('moduleEditModal').dataset.moduleId;
            const module = modules.find(m => m.id === moduleId);
            if (!module) return;
            
            module.name = document.getElementById('editModuleName').value;
            module.category = document.getElementById('editModuleCategory').value;
            module.description = document.getElementById('editModuleDescription').value;
            
            renderCanvas();
            closeModuleEditModal();
            showNotification('‚úÖ Modul-Info aktualisiert');
        }

        // Import File Handler
        document.getElementById('importInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file && file.type === 'application/json') {
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        const data = JSON.parse(e.target.result);
                        document.getElementById('importTextarea').value = JSON.stringify(data, null, 2);
                        handleImportData(data);
                    } catch (err) {
                        showNotification('‚ùå Fehler beim Lesen der Datei: ' + err.message);
                    }
                };
                reader.readAsText(file);
            }
        });
        
        window.copyModuleCode = function(moduleId) {
            const module = modules.find(m => m.id === moduleId);
            if (!module) return;
            
            navigator.clipboard.writeText(processModuleHTML(module)).then(() => {
                showNotification('üìã ' + module.name + ' Code kopiert');
            });
        };

        window.moveModule = function(moduleId, direction) {
            const index = modules.findIndex(m => m.id === moduleId);
            if (index === -1) return;
            
            const newIndex = index + direction;
            if (newIndex < 0 || newIndex >= modules.length) return;
            
            [modules[index], modules[newIndex]] = [modules[newIndex], modules[index]];
            renderCanvas();
            selectModule(moduleId);
        };

        window.deleteModule = function(moduleId) {
            if (confirm('Modul wirklich l√∂schen?')) {
                modules = modules.filter(m => m.id !== moduleId);
                renderCanvas();
                if (selectedModule && selectedModule.id === moduleId) {
                    selectedModule = null;
                    renderPropertyPanel();
                }
                showNotification('üóëÔ∏è Modul gel√∂scht');
            }
        };

        window.duplicateModule = function(moduleId) {
            const module = modules.find(m => m.id === moduleId);
            if (!module) return;
            
            const duplicate = {
                id: `module_${++moduleCounter}`,
                templateId: module.templateId,
                html: module.html,
                properties: { ...module.properties },
                name: module.name + ' (Kopie)'
            };
            
            const index = modules.findIndex(m => m.id === moduleId);
            modules.splice(index + 1, 0, duplicate);
            renderCanvas();
            showNotification('üìã Modul dupliziert');
        };

        // Export & Preview
        function exportPage() {
            const pageName = document.getElementById('pageNameInput').value || 'Kerberos-Seite';
            
            let html = `<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${pageName} - Kerberos Compliance</title>
    <!-- Kerberos Website CSS wird automatisch geladen -->
    <!-- Module verwenden Squarespace CSS-Variablen f√ºr optimale Integration -->
</head>
<body>
    <!-- Kerberos ${pageName} -->
    <!-- Erstellt mit Kerberos Module Editor (Squarespace-optimiert) -->
    
`;
            
            modules.forEach((module, index) => {
                html += `    <!-- ${module.name} -->\n`;
                html += '    ' + processModuleHTML(module).replace(/\n/g, '\n    ') + '\n\n';
            });
            
            html += `    <!-- Ende ${pageName} -->
    <!-- Hinweis: Module nutzen var(--heading-font-font-family) und andere Squarespace CSS-Variablen -->
</body>
</html>`;
            
            const blob = new Blob([html], { type: 'text/html; charset=utf-8' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${pageName.toLowerCase().replace(/[^a-z0-9]/g, '-')}-kerberos.html`;
            a.click();
            URL.revokeObjectURL(url);
            
            showNotification('üìÑ Squarespace-optimierte Seite exportiert');
        }

        function showPreview() {
            const modal = document.getElementById('previewModal');
            const content = document.getElementById('previewContent');
            
            let html = '';
            modules.forEach(module => {
                html += processModuleHTML(module);
            });
            
            content.innerHTML = html;
            modal.style.display = 'block';
        }

        window.closePreview = function() {
            document.getElementById('previewModal').style.display = 'none';
        };

        function clearAll() {
            if (confirm('Alle Module l√∂schen?')) {
                modules = [];
                selectedModule = null;
                renderCanvas();
                renderPropertyPanel();
                showNotification('üóëÔ∏è Alle Module gel√∂scht');
            }
        }

        // Utility Functions
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function copyToClipboard(elementId) {
            const text = processModuleHTML(selectedModule);
            
            navigator.clipboard.writeText(text).then(() => {
                showNotification('üìã Code in Zwischenablage kopiert');
            }).catch(() => {
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                showNotification('üìã Code kopiert');
            });
        }

        // Search
        function setupSearch() {
            const searchInput = document.getElementById('searchInput');
            searchInput.addEventListener('input', (e) => {
                const term = e.target.value.toLowerCase();
                document.querySelectorAll('.module-template').forEach(el => {
                    const name = el.querySelector('.module-name').textContent.toLowerCase();
                    const desc = el.querySelector('.module-description').textContent.toLowerCase();
                    el.style.display = (name.includes(term) || desc.includes(term)) ? 'block' : 'none';
                });
                
                document.querySelectorAll('.category-title').forEach(title => {
                    const nextElements = [];
                    let next = title.nextElementSibling;
                    while (next && !next.classList.contains('category-title')) {
                        if (next.classList.contains('module-template')) {
                            nextElements.push(next);
                        }
                        next = next.nextElementSibling;
                    }
                    const hasVisibleModules = nextElements.some(el => el.style.display !== 'none');
                    title.style.display = hasVisibleModules ? 'block' : 'none';
                });
            });
        }

        // Icon Search
        document.getElementById('iconSearch').addEventListener('input', (e) => {
            const term = e.target.value.toLowerCase();
            document.querySelectorAll('.icon-option').forEach((icon, index) => {
                const iconData = FONT_AWESOME_ICONS[index];
                const iconName = iconData ? iconData.name.toLowerCase() : '';
                icon.style.display = iconName.includes(term) ? 'block' : 'none';
            });
        });

        // Notification
        function showNotification(message) {
            const notification = document.createElement('div');
            notification.className = 'notification';
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => notification.classList.add('show'), 100);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // Event Listeners
        document.getElementById('exportPageBtn').addEventListener('click', exportPage);
        document.getElementById('savePageBtn').addEventListener('click', showSavePageDialog);
        document.getElementById('loadPageBtn').addEventListener('click', showLoadPageDialog);
        document.getElementById('importBtn').addEventListener('click', showImportModal);
        document.getElementById('settingsBtn').addEventListener('click', showSettingsModal);
        document.getElementById('clearBtn').addEventListener('click', clearAll);
        document.getElementById('previewBtn').addEventListener('click', showPreview);

        // Modal close
        document.getElementById('previewModal').addEventListener('click', (e) => {
            if (e.target.id === 'previewModal') {
                closePreview();
            }
        });

        // Close modals on escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closePreview();
                closeIconModal();
                closeImageModal();
                closeSavePageModal();
                closeLoadPageModal();
                closeImportModal();
                closeSettingsModal();
                closeModuleEditModal();
            }
        });

        // Keyboard Shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case 's':
                        e.preventDefault();
                        if (selectedModule) applyChanges();
                        break;
                    case 'e':
                        e.preventDefault();
                        exportPage();
                        break;
                    case 'p':
                        e.preventDefault();
                        showPreview();
                        break;
                    case 'c':
                        if (selectedModule) {
                            e.preventDefault();
                            copyModuleCode(selectedModule.id);
                        }
                        break;
                }
            }
        });

        // Initialisierung
        document.addEventListener('DOMContentLoaded', () => {
            loadModuleLibrary();
            setupSearch();
            renderPropertyPanel();
            loadSavedPages();
            
            // Load global spacing settings
            try {
                const savedSpacing = localStorage.getItem('kerberos-global-spacing');
                if (savedSpacing) {
                    globalSpacing = JSON.parse(savedSpacing);
                }
            } catch (e) {
                console.error('Fehler beim Laden der Spacing-Einstellungen:', e);
            }
            
            setTimeout(() => {
                showNotification('üõ°Ô∏è Kerberos Module Editor (Vollversion) bereit');
            }, 500);
        });
    </script>
</body>
</html>
