<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kerberos Module Editor - Erweiterte Version</title>
    <style>
        /* Editor-spezifische Styles (nicht f√ºr Website) */
        :root {
            --kerberos-primary: #063AA8;
            --kerberos-secondary: #009CE6;
            --kerberos-accent: #B265E9;
            --kerberos-orange: #EF8646;
            --kerberos-dark: #212529;
            --kerberos-light: #F8F9FA;
            --kerberos-border: #DEE2E6;
            --kerberos-shadow: 0 4px 12px rgba(6, 58, 168, 0.1);
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: 'Inter', sans-serif;
            background: var(--kerberos-light);
            color: var(--kerberos-dark);
            line-height: 1.6;
        }

        /* Editor Layout */
        .editor-header {
            background: linear-gradient(135deg, var(--kerberos-primary), var(--kerberos-secondary));
            color: white;
            padding: 1rem 2rem;
            box-shadow: var(--kerberos-shadow);
        }

        .editor-main {
            display: grid;
            grid-template-columns: 300px 1fr 380px;
            gap: 1rem;
            padding: 1rem;
            min-height: calc(100vh - 80px);
        }

        .panel {
            background: white;
            border-radius: 8px;
            box-shadow: var(--kerberos-shadow);
            overflow: hidden;
        }

        .panel-header {
            background: var(--kerberos-primary);
            color: white;
            padding: 1rem;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .panel-content {
            padding: 1rem;
            height: calc(100vh - 160px);
            overflow-y: auto;
        }

        /* Module Bibliothek */
        .module-template {
            border: 1px solid var(--kerberos-border);
            border-radius: 6px;
            padding: 0.75rem;
            margin-bottom: 0.5rem;
            cursor: pointer;
            transition: all 0.2s;
            background: #fafbfc;
        }

        .module-template:hover {
            border-color: var(--kerberos-secondary);
            background: white;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 156, 230, 0.1);
        }

        .module-name {
            font-weight: 600;
            color: var(--kerberos-primary);
            margin-bottom: 0.25rem;
            font-size: 0.9rem;
        }

        .module-description {
            font-size: 0.8rem;
            color: #6c757d;
            line-height: 1.4;
        }

        .category-title {
            color: var(--kerberos-primary);
            font-size: 0.8rem;
            font-weight: 600;
            margin: 1rem 0 0.5rem 0;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        /* Canvas */
        .canvas {
            background: #fafbfc;
            border: 2px dashed var(--kerberos-border);
            border-radius: 8px;
            min-height: 600px;
            position: relative;
            padding: 1rem;
        }

        .canvas.drag-over {
            border-color: var(--kerberos-secondary);
            background: rgba(0, 156, 230, 0.05);
        }

        .canvas-placeholder {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: #6c757d;
        }

        .canvas-module {
            position: relative;
            margin-bottom: 1rem;
            border: 2px solid transparent;
            border-radius: 6px;
            transition: all 0.2s;
            padding: 0.5rem;
        }

        .canvas-module:hover {
            border-color: var(--kerberos-secondary);
            background: rgba(0, 156, 230, 0.02);
        }

        .canvas-module.selected {
            border-color: var(--kerberos-primary);
            background: rgba(6, 58, 168, 0.05);
        }

        .module-controls {
            position: absolute;
            top: -8px;
            right: -8px;
            display: none;
            gap: 0.25rem;
            z-index: 10;
        }

        .canvas-module:hover .module-controls,
        .canvas-module.selected .module-controls {
            display: flex;
        }

        .control-btn {
            width: 22px;
            height: 22px;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            font-size: 0.7rem;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 6px rgba(0,0,0,0.2);
            font-weight: 600;
        }

        .btn-edit { background: var(--kerberos-secondary); color: white; }
        .btn-copy { background: var(--kerberos-accent); color: white; }
        .btn-move { background: var(--kerberos-orange); color: white; }
        .btn-delete { background: #dc3545; color: white; }

        /* Buttons */
        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.85rem;
        }

        .btn-primary { background: var(--kerberos-primary); color: white; }
        .btn-success { background: #28a745; color: white; }
        .btn-warning { background: var(--kerberos-orange); color: white; }
        .btn-secondary { background: #6c757d; color: white; }

        .btn:hover { transform: translateY(-1px); opacity: 0.9; }

        /* Property Panel */
        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--kerberos-dark);
            font-size: 0.85rem;
        }

        .form-control {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid var(--kerberos-border);
            border-radius: 4px;
            font-size: 0.85rem;
            font-family: inherit;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--kerberos-primary);
            box-shadow: 0 0 0 2px rgba(6, 58, 168, 0.1);
        }

        .color-picker {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
            margin-top: 0.5rem;
        }

        .color-option {
            width: 30px;
            height: 30px;
            border-radius: 4px;
            cursor: pointer;
            border: 2px solid transparent;
            transition: all 0.2s;
        }

        .color-option:hover {
            transform: scale(1.1);
        }

        .color-option.selected {
            border-color: var(--kerberos-dark);
            transform: scale(1.1);
        }

        .icon-picker {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));
            gap: 0.5rem;
            max-height: 200px;
            overflow-y: auto;
            margin-top: 0.5rem;
            padding: 0.5rem;
            border: 1px solid var(--kerberos-border);
            border-radius: 4px;
        }

        .icon-option {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid var(--kerberos-border);
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 1.2rem;
        }

        .icon-option:hover {
            background: var(--kerberos-secondary);
            color: white;
        }

        .icon-option.selected {
            background: var(--kerberos-primary);
            color: white;
        }

        .image-upload {
            border: 2px dashed var(--kerberos-border);
            border-radius: 4px;
            padding: 1rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s;
        }

        .image-upload:hover {
            border-color: var(--kerberos-secondary);
            background: rgba(0, 156, 230, 0.05);
        }

        .image-preview {
            max-width: 100%;
            max-height: 150px;
            border-radius: 4px;
            margin-top: 0.5rem;
        }

        /* Code Output */
        .code-output {
            background: #1a1a1a;
            color: #e6e6e6;
            padding: 1rem;
            border-radius: 6px;
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 0.8rem;
            line-height: 1.4;
            max-height: 200px;
            overflow-y: auto;
            margin-top: 1rem;
            border: 1px solid var(--kerberos-border);
        }

        .copy-btn {
            background: var(--kerberos-accent);
            color: white;
            border: none;
            padding: 0.4rem 0.8rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            font-weight: 600;
            margin-top: 0.5rem;
        }

        /* Responsive */
        @media (max-width: 1200px) {
            .editor-main {
                grid-template-columns: 1fr;
                gap: 0.5rem;
            }
            
            .panel-content {
                height: auto;
                max-height: 300px;
            }
        }

        /* Notification */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--kerberos-primary);
            color: white;
            padding: 0.75rem 1.25rem;
            border-radius: 6px;
            box-shadow: var(--kerberos-shadow);
            z-index: 3000;
            font-weight: 600;
            font-size: 0.9rem;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 2000;
        }

        .modal-content {
            background: white;
            margin: 2rem auto;
            padding: 2rem;
            border-radius: 8px;
            max-width: 800px;
            max-height: calc(100vh - 4rem);
            overflow-y: auto;
        }

        .tabs {
            display: flex;
            border-bottom: 1px solid var(--kerberos-border);
            margin-bottom: 1rem;
        }

        .tab {
            padding: 0.5rem 1rem;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.2s;
        }

        .tab.active {
            color: var(--kerberos-primary);
            border-bottom-color: var(--kerberos-primary);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <header class="editor-header">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <h1 style="font-size: 1.5rem;">üõ°Ô∏è Kerberos Module Editor</h1>
                <p style="font-size: 0.9rem; opacity: 0.9; margin: 0;">Erweiterte Version ‚Ä¢ www.kerberos-compliance.com</p>
            </div>
            <div style="display: flex; gap: 0.75rem; flex-wrap: wrap;">
                <button class="btn btn-success" id="exportPageBtn">üìÑ Seite exportieren</button>
                <button class="btn btn-primary" id="savePageBtn">üíæ Seite speichern</button>
                <button class="btn btn-secondary" id="loadPageBtn">üìÇ Seite laden</button>
                <button class="btn btn-warning" id="importBtn">üì• Import</button>
                <button class="btn btn-success" id="exportAllModulesBtn">üì¶ Alle Module exportieren</button>
                <button class="btn btn-secondary" id="settingsBtn">‚öôÔ∏è Einstellungen</button>
                <button class="btn btn-warning" id="clearBtn">üóëÔ∏è Leeren</button>
                <button class="btn btn-secondary" id="previewBtn">üëÅÔ∏è Vorschau</button>
            </div>
        </div>
    </header>

    <main class="editor-main">
        <!-- Module Bibliothek -->
        <div class="panel">
            <div class="panel-header">
                üìö Kerberos Module
            </div>
            <div class="panel-content">
                <input type="text" class="form-control" placeholder="üîç Module suchen..." id="searchInput" style="margin-bottom: 1rem;">
                <div id="moduleLibrary">
                    <!-- Module werden hier geladen -->
                </div>
            </div>
        </div>

        <!-- Landing Page Canvas -->
        <div class="panel">
            <div class="panel-header">
                üèóÔ∏è Seiten-Builder
                <input type="text" placeholder="Seitenname..." id="pageNameInput" 
                       style="margin-left: 1rem; padding: 0.25rem 0.5rem; border: 1px solid rgba(255,255,255,0.3); border-radius: 4px; background: rgba(255,255,255,0.1); color: white; width: 180px; font-size: 0.85rem;">
            </div>
            <div class="panel-content" style="padding: 0;">
                <div class="canvas" id="canvas">
                    <div class="canvas-placeholder">
                        <div style="font-size: 2.5rem; margin-bottom: 1rem;">üì±</div>
                        <h3 style="margin-bottom: 0.5rem;">Kerberos Seite erstellen</h3>
                        <p style="margin-bottom: 1rem;">Module hierher ziehen oder klicken</p>
                        <small style="color: #999;">Bereit f√ºr Squarespace Integration</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Code & Eigenschaften -->
        <div class="panel">
            <div class="panel-header">
                ‚öôÔ∏è Eigenschaften & Code
            </div>
            <div class="panel-content">
                <div style="background: #e3f2fd; border: 1px solid #2196f3; border-radius: 6px; padding: 1rem; margin-bottom: 1rem; font-size: 0.85rem;">
                    <h4 style="color: #1976d2; margin-bottom: 0.5rem; font-size: 0.9rem;">üöÄ Vollversion Features</h4>
                    <p>üíæ Seiten speichern/laden ‚Ä¢ üì•üì§ Import/Export ‚Ä¢ ‚öôÔ∏è Abst√§nde anpassen ‚Ä¢ üìù Module bearbeiten ‚Ä¢ üé® Unicode Icons</p>
                </div>
                
                <div id="propertyPanel">
                    <p style="color: #6c757d; text-align: center; padding: 1.5rem;">
                        Modul ausw√§hlen zum Bearbeiten
                    </p>
                </div>
            </div>
        </div>
    </main>

    <!-- Modals -->
    <div id="iconModal" class="modal">
        <div class="modal-content">
            <h3>Icon ausw√§hlen</h3>
            <input type="text" class="form-control" placeholder="Icon suchen..." id="iconSearch" style="margin: 1rem 0;">
            <div class="icon-picker" id="iconPicker"></div>
            <div style="margin-top: 1rem; text-align: right;">
                <button class="btn btn-secondary" onclick="closeIconModal()">Abbrechen</button>
            </div>
        </div>
    </div>

    <div id="imageModal" class="modal">
        <div class="modal-content">
            <h3>Bild verwalten</h3>
            <div class="tabs">
                <div class="tab active" onclick="switchTab('upload')">Upload</div>
                <div class="tab" onclick="switchTab('stock')">Stock Bilder</div>
                <div class="tab" onclick="switchTab('manage')">Verwalten</div>
            </div>
            
            <div id="uploadTab" class="tab-content active">
                <div class="image-upload" onclick="document.getElementById('imageInput').click()">
                    <div>üì∏ Bild hochladen</div>
                    <small>JPG, PNG, WebP bis 5MB</small>
                </div>
                <input type="file" id="imageInput" accept="image/*" style="display: none;">
                <div id="uploadPreview"></div>
            </div>
            
            <div id="stockTab" class="tab-content">
                <div id="stockImages" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); gap: 0.5rem;">
                    <!-- Stock Images -->
                </div>
            </div>
            
            <div id="manageTab" class="tab-content">
                <div id="uploadedImages">
                    <p>Ihre hochgeladenen Bilder erscheinen hier.</p>
                </div>
            </div>
            
            <div style="margin-top: 1rem; text-align: right;">
                <button class="btn btn-secondary" onclick="closeImageModal()">Schlie√üen</button>
            </div>
        </div>
    </div>

    <!-- Neue Modals -->
    <div id="savePageModal" class="modal">
        <div class="modal-content">
            <h3>Seite speichern</h3>
            <div class="form-group">
                <label class="form-label">Seitenname</label>
                <input type="text" class="form-control" id="savePageName" placeholder="Meine Kerberos Seite">
            </div>
            <div class="form-group">
                <label class="form-label">Beschreibung (optional)</label>
                <textarea class="form-control" id="savePageDescription" placeholder="Beschreibung der Seite..."></textarea>
            </div>
            <div style="margin-top: 1rem; text-align: right; gap: 0.5rem; display: flex; justify-content: flex-end;">
                <button class="btn btn-secondary" onclick="closeSavePageModal()">Abbrechen</button>
                <button class="btn btn-success" onclick="saveCurrentPage()">üíæ Speichern</button>
            </div>
        </div>
    </div>

    <div id="loadPageModal" class="modal">
        <div class="modal-content">
            <h3>Gespeicherte Seiten</h3>
            <div id="savedPagesList" style="max-height: 400px; overflow-y: auto;">
                <!-- Gespeicherte Seiten -->
            </div>
            <div style="margin-top: 1rem; text-align: right;">
                <button class="btn btn-secondary" onclick="closeLoadPageModal()">Schlie√üen</button>
            </div>
        </div>
    </div>

    <div id="importModal" class="modal">
        <div class="modal-content">
            <h3>Import / Export</h3>
            <div class="tabs">
                <div class="tab active" onclick="switchImportTab('import')">Import</div>
                <div class="tab" onclick="switchImportTab('export')">Export</div>
            </div>
            
            <div id="importImportTab" class="tab-content active">
                <div style="margin: 1rem 0;">
                    <div class="image-upload" onclick="document.getElementById('importInput').click()">
                        <div>üì• JSON-Datei importieren</div>
                        <small>Module oder komplette Seiten</small>
                    </div>
                    <input type="file" id="importInput" accept=".json" style="display: none;">
                </div>
                <div style="margin: 1rem 0;">
                    <label class="form-label">Oder JSON-Code einf√ºgen:</label>
                    <textarea class="form-control" id="importTextarea" placeholder='{"modules": [...]}' style="min-height: 200px; font-family: monospace;"></textarea>
                </div>
                <button class="btn btn-primary" onclick="importData()" style="width: 100%;">Importieren</button>
            </div>
            
            <div id="importExportTab" class="tab-content">
                <div style="margin: 1rem 0;">
                    <button class="btn btn-success" onclick="exportCurrentPage()" style="width: 100%; margin-bottom: 0.5rem;">üìÑ Aktuelle Seite exportieren</button>
                    <button class="btn btn-secondary" onclick="exportModuleTemplates()" style="width: 100%; margin-bottom: 0.5rem;">üì¶ Alle Module exportieren</button>
                    <button class="btn btn-warning" onclick="exportSelectedModule()" style="width: 100%;" id="exportSelectedBtn" disabled>üîß Ausgew√§hltes Modul exportieren</button>
                </div>
            </div>
            
            <div style="margin-top: 1rem; text-align: right;">
                <button class="btn btn-secondary" onclick="closeImportModal()">Schlie√üen</button>
            </div>
        </div>
    </div>

    <div id="settingsModal" class="modal">
        <div class="modal-content">
            <h3>Einstellungen</h3>
            <div class="tabs">
                <div class="tab active" onclick="switchSettingsTab('spacing')">Abst√§nde</div>
                <div class="tab" onclick="switchSettingsTab('modules')">Module verwalten</div>
            </div>
            
            <div id="settingsSpacingTab" class="tab-content active">
                <h4>Globale Abst√§nde</h4>
                <div class="form-group">
                    <label class="form-label">Section Padding</label>
                    <select class="form-control" id="sectionPaddingSelect" oninput="updateSpacing('sectionPadding', this.value)">
                        <option value="4rem 0">Klein (4rem 0)</option>
                        <option value="6rem 0" selected>Standard (6rem 0)</option>
                        <option value="8rem 0">Gro√ü (8rem 0)</option>
                        <option value="10rem 0">Extra Gro√ü (10rem 0)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Element-Abst√§nde</label>
                    <select class="form-control" id="elementSpacingSelect" oninput="updateSpacing('elementSpacing', this.value)">
                        <option value="1rem">Klein (1rem)</option>
                        <option value="2rem" selected>Standard (2rem)</option>
                        <option value="3rem">Gro√ü (3rem)</option>
                        <option value="4rem">Extra Gro√ü (4rem)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Text-Abst√§nde</label>
                    <select class="form-control" id="textSpacingSelect" oninput="updateSpacing('textSpacing', this.value)">
                        <option value="0.5rem">Klein (0.5rem)</option>
                        <option value="1rem" selected>Standard (1rem)</option>
                        <option value="1.5rem">Gro√ü (1.5rem)</option>
                        <option value="2rem">Extra Gro√ü (2rem)</option>
                    </select>
                </div>
                <button class="btn btn-primary" onclick="applySpacingToAll()" style="width: 100%;">Auf alle Module anwenden</button>
            </div>
            
            <div id="settingsModulesTab" class="tab-content">
                <h4>Module verwalten</h4>
                <div style="margin-bottom: 2rem;">
                    <div style="display: flex; gap: 1rem; margin-bottom: 1rem; flex-wrap: wrap;">
                        <button class="btn btn-success" onclick="showCreateModuleDialog()" style="flex: 1; min-width: 200px;">+ Neues Modul erstellen</button>
                        <button class="btn btn-warning" onclick="showModuleLibraryManager()" style="flex: 1; min-width: 200px;">üìö Bibliothek verwalten</button>
                        <button class="btn btn-danger" onclick="resetLocalStorage()" style="flex: 1; min-width: 200px;">üóëÔ∏è LocalStorage zur√ºcksetzen</button>
                    </div>
                </div>
                <div id="customModulesList">
                    <!-- Custom modules -->
                </div>
            </div>
            
            <div style="margin-top: 1rem; text-align: right;">
                <button class="btn btn-secondary" onclick="closeSettingsModal()">Schlie√üen</button>
            </div>
        </div>
    </div>

    <div id="moduleEditModal" class="modal">
        <div class="modal-content">
            <h3>Modul-Informationen bearbeiten</h3>
            <div class="form-group">
                <label class="form-label">Name</label>
                <input type="text" class="form-control" id="editModuleName">
            </div>
            <div class="form-group">
                <label class="form-label">Kategorie</label>
                <select class="form-control" id="editModuleCategory">
                    <option value="Hero & Header">Hero & Header</option>
                    <option value="Content & Services">Content & Services</option>
                    <option value="Team & About">Team & About</option>
                    <option value="Contact & CTA">Contact & CTA</option>
                    <option value="Statistics & Numbers">Statistics & Numbers</option>
                    <option value="Content & Images">Content & Images</option>
                    <option value="Process & Steps">Process & Steps</option>
                    <option value="Custom">Custom</option>
                </select>
            </div>
            <div class="form-group">
                <label class="form-label">Beschreibung</label>
                <textarea class="form-control" id="editModuleDescription" style="min-height: 80px;"></textarea>
            </div>
            <div style="margin-top: 1rem; text-align: right; gap: 0.5rem; display: flex; justify-content: flex-end;">
                <button class="btn btn-secondary" onclick="closeModuleEditModal()">Abbrechen</button>
                <button class="btn btn-success" onclick="saveModuleInfo()">üíæ Speichern</button>
            </div>
        </div>
    </div>

    <!-- Preview Modal -->
    <div id="previewModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 2000;">
        <div style="background: white; margin: 1rem; border-radius: 8px; height: calc(100vh - 2rem); display: flex; flex-direction: column;">
            <div style="padding: 1rem; border-bottom: 1px solid var(--kerberos-border); display: flex; justify-content: space-between; align-items: center;">
                <h3 style="margin: 0;">üëÅÔ∏è Kerberos Seiten-Vorschau</h3>
                <button class="btn btn-secondary" onclick="closePreview()">‚ùå Schlie√üen</button>
            </div>
            <div style="flex: 1; overflow: auto;">
                <div id="previewContent"></div>
            </div>
        </div>
    </div>

    <div id="moduleLibraryModal" class="modal">
        <div class="modal-content">
            <h3>üìö Module-Bibliothek verwalten</h3>
            <div style="margin-bottom: 1rem;">
                <input type="text" class="form-control" placeholder="üîç Module suchen..." id="librarySearchInput" style="margin-bottom: 1rem;">
                <div style="display: flex; gap: 0.5rem; flex-wrap: wrap; margin-bottom: 1rem;">
                    <button class="library-filter-btn" data-category="all" style="padding: 0.5rem 1rem; border: 2px solid var(--kerberos-primary); background: var(--kerberos-primary); color: white; border-radius: 20px; cursor: pointer; font-size: 0.85rem;">Alle</button>
                    <button class="library-filter-btn" data-category="Hero & Header" style="padding: 0.5rem 1rem; border: 2px solid var(--kerberos-primary); background: transparent; color: var(--kerberos-primary); border-radius: 20px; cursor: pointer; font-size: 0.85rem;">Hero & Header</button>
                    <button class="library-filter-btn" data-category="Content & Services" style="padding: 0.5rem 1rem; border: 2px solid var(--kerberos-primary); background: transparent; color: var(--kerberos-primary); border-radius: 20px; cursor: pointer; font-size: 0.85rem;">Content & Services</button>
                    <button class="library-filter-btn" data-category="Custom" style="padding: 0.5rem 1rem; border: 2px solid var(--kerberos-primary); background: transparent; color: var(--kerberos-primary); border-radius: 20px; cursor: pointer; font-size: 0.85rem;">Custom</button>
                </div>
            </div>
            <div id="moduleLibraryList" style="max-height: 400px; overflow-y: auto; border: 1px solid var(--kerberos-border); border-radius: 6px; padding: 1rem;">
                <!-- Module-Liste wird hier geladen -->
            </div>
            <div style="margin-top: 1rem; text-align: right; display: flex; gap: 0.5rem; justify-content: flex-end;">
                <button class="btn btn-info" onclick="showDeletedTemplatesManager()" style="margin-right: 0.5rem;">üóëÔ∏è Gel√∂schte Templates</button>
                <button class="btn btn-warning" onclick="exportModuleLibrary()">üì§ Bibliothek exportieren</button>
                <button class="btn btn-secondary" onclick="closeModuleLibraryModal()">Schlie√üen</button>
            </div>
        </div>
    </div>

    <script>
        // Globale Variablen
        let modules = [];
        let selectedModule = null;
        let moduleCounter = 0;
        let currentProperty = '';
        let uploadedImages = {};
        let savedPages = {};
        let globalSpacing = {
            sectionPadding: '6rem 0',
            elementSpacing: '2rem',
            textSpacing: '1rem'
        };

        // Kerberos Farben
        const KERBEROS_COLORS = {
            primary: '#063AA8',
            secondary: '#009CE6',
            accent: '#B265E9',
            orange: '#EF8646',
            dark: '#212529',
            gray: '#ADB5BD',
            white: '#FFFFFF'
        };

        // FontAwesome Icons mit Unicode-Zeichen
        const FONT_AWESOME_ICONS = [
            { name: 'Shield', unicode: '&#xf132;', className: 'shield-alt' },
            
            // === BUSINESS & FINANCE ICONS ===
            { name: 'Chart Bar', unicode: '&#xf080;', className: 'chart-bar' },
            { name: 'Chart Line', unicode: '&#xf201;', className: 'chart-line' },
            { name: 'Chart Area', unicode: '&#xf1fe;', className: 'chart-area' },
            { name: 'Chart Pie', unicode: '&#xf200;', className: 'chart-pie' },
            { name: 'Coins', unicode: '&#xf51e;', className: 'coins' },
            { name: 'Credit Card', unicode: '&#xf09d;', className: 'credit-card' },
            { name: 'Briefcase', unicode: '&#xf0b1;', className: 'briefcase' },
            { name: 'Handshake', unicode: '&#xf2b5;', className: 'handshake' },
            { name: 'Calculator', unicode: '&#xf1ec;', className: 'calculator' },
            { name: 'Piggy Bank', unicode: '&#xf4d3;', className: 'piggy-bank' },
            { name: 'Money Bill', unicode: '&#xf0d6;', className: 'money-bill' },
            { name: 'Money Bill Wave', unicode: '&#xf53a;', className: 'money-bill-wave' },
            { name: 'Euro Sign', unicode: '&#xf153;', className: 'euro-sign' },
            { name: 'Dollar Sign', unicode: '&#xf155;', className: 'dollar-sign' },
            { name: 'Pound Sign', unicode: '&#xf154;', className: 'pound-sign' },
            { name: 'Yen Sign', unicode: '&#xf157;', className: 'yen-sign' },
            { name: 'Bitcoin', unicode: '&#xf379;', className: 'bitcoin' },
            { name: 'Ethereum', unicode: '&#xf42e;', className: 'ethereum' },
            { name: 'Donate', unicode: '&#xf4b9;', className: 'donate' },
            { name: 'Funnel Dollar', unicode: '&#xf662;', className: 'funnel-dollar' },
            { name: 'Hand Holding USD', unicode: '&#xf4c0;', className: 'hand-holding-usd' },
            { name: 'Landmark', unicode: '&#xf66f;', className: 'landmark' },
            { name: 'Percentage', unicode: '&#xf295;', className: 'percentage' },
            { name: 'Receipt', unicode: '&#xf543;', className: 'receipt' },
            { name: 'Cash Register', unicode: '&#xf788;', className: 'cash-register' },
            { name: 'File Invoice', unicode: '&#xf570;', className: 'file-invoice' },
            { name: 'File Invoice Dollar', unicode: '&#xf571;', className: 'file-invoice-dollar' },
            
            // === TECHNOLOGY & COMPUTING ===
            { name: 'Laptop', unicode: '&#xf109;', className: 'laptop' },
            { name: 'Mobile Alt', unicode: '&#xf3cd;', className: 'mobile-alt' },
            { name: 'Desktop', unicode: '&#xf108;', className: 'desktop' },
            { name: 'Server', unicode: '&#xf233;', className: 'server' },
            { name: 'Database', unicode: '&#xf1c0;', className: 'database' },
            { name: 'Wifi', unicode: '&#xf1eb;', className: 'wifi' },
            { name: 'Code', unicode: '&#xf121;', className: 'code' },
            { name: 'Bug', unicode: '&#xf188;', className: 'bug' },
            { name: 'Cloud', unicode: '&#xf0c2;', className: 'cloud' },
            { name: 'Cloud Download', unicode: '&#xf0ed;', className: 'cloud-download-alt' },
            { name: 'Cloud Upload', unicode: '&#xf0ee;', className: 'cloud-upload-alt' },
            { name: 'Hard Drive', unicode: '&#xf0a0;', className: 'hdd' },
            { name: 'Memory', unicode: '&#xf538;', className: 'memory' },
            { name: 'Microchip', unicode: '&#xf2db;', className: 'microchip' },
            { name: 'Network Wired', unicode: '&#xf6ff;', className: 'network-wired' },
            { name: 'Plug', unicode: '&#xf1e6;', className: 'plug' },
            { name: 'Power Off', unicode: '&#xf011;', className: 'power-off' },
            { name: 'Terminal', unicode: '&#xf120;', className: 'terminal' },
            { name: 'Keyboard', unicode: '&#xf11c;', className: 'keyboard' },
            { name: 'Mouse', unicode: '&#xf8cc;', className: 'mouse' },
            { name: 'Tablet', unicode: '&#xf10a;', className: 'tablet-alt' },
            { name: 'Tv', unicode: '&#xf26c;', className: 'tv' },
            { name: 'Digital Tachograph', unicode: '&#xf566;', className: 'digital-tachograph' },
            { name: 'Sim Card', unicode: '&#xf7c4;', className: 'sim-card' },
            { name: 'SD Card', unicode: '&#xf7c2;', className: 'sd-card' },
            { name: 'USB', unicode: '&#xf287;', className: 'usb' },
            { name: 'Ethernet', unicode: '&#xf796;', className: 'ethernet' },
            { name: 'Fingerprint', unicode: '&#xf577;', className: 'fingerprint' },
            { name: 'Robot', unicode: '&#xf544;', className: 'robot' },
            
            // === COMMUNICATION & SOCIAL ===
            { name: 'Comments', unicode: '&#xf086;', className: 'comments' },
            { name: 'Comment', unicode: '&#xf075;', className: 'comment' },
            { name: 'Comment Dots', unicode: '&#xf4ad;', className: 'comment-dots' },
            { name: 'Video', unicode: '&#xf03d;', className: 'video' },
            { name: 'Microphone', unicode: '&#xf130;', className: 'microphone' },
            { name: 'Bullhorn', unicode: '&#xf0a1;', className: 'bullhorn' },
            { name: 'Rss', unicode: '&#xf09e;', className: 'rss' },
            { name: 'Phone', unicode: '&#xf095;', className: 'phone' },
            { name: 'Phone Alt', unicode: '&#xf879;', className: 'phone-alt' },
            { name: 'Phone Volume', unicode: '&#xf2a0;', className: 'phone-volume' },
            { name: 'Envelope', unicode: '&#xf0e0;', className: 'envelope' },
            { name: 'Envelope Open', unicode: '&#xf2b6;', className: 'envelope-open' },
            { name: 'Mail Bulk', unicode: '&#xf674;', className: 'mail-bulk' },
            { name: 'At', unicode: '&#xf1fa;', className: 'at' },
            { name: 'Broadcast Tower', unicode: '&#xf519;', className: 'broadcast-tower' },
            { name: 'Satellite Dish', unicode: '&#xf7c0;', className: 'satellite-dish' },
            { name: 'Satellite', unicode: '&#xf7bf;', className: 'satellite' },
            { name: 'Podcast', unicode: '&#xf2ce;', className: 'podcast' },
            { name: 'Voicemail', unicode: '&#xf897;', className: 'voicemail' },
            { name: 'Headphones', unicode: '&#xf025;', className: 'headphones' },
            { name: 'Headset', unicode: '&#xf590;', className: 'headset' },
            { name: 'Speakphone', unicode: '&#xf2f2;', className: 'speakerphone' },
            
            // === SOCIAL MEDIA ===
            { name: 'Facebook', unicode: '&#xf09a;', className: 'facebook' },
            { name: 'Facebook F', unicode: '&#xf39e;', className: 'facebook-f' },
            { name: 'Twitter', unicode: '&#xf099;', className: 'twitter' },
            { name: 'LinkedIn', unicode: '&#xf08c;', className: 'linkedin' },
            { name: 'LinkedIn In', unicode: '&#xf0e1;', className: 'linkedin-in' },
            { name: 'Instagram', unicode: '&#xf16d;', className: 'instagram' },
            { name: 'YouTube', unicode: '&#xf167;', className: 'youtube' },
            { name: 'Share Alt', unicode: '&#xf1e0;', className: 'share-alt' },
            { name: 'Share', unicode: '&#xf064;', className: 'share' },
            { name: 'Share Square', unicode: '&#xf14d;', className: 'share-square' },
            { name: 'Slack', unicode: '&#xf198;', className: 'slack' },
            { name: 'WhatsApp', unicode: '&#xf232;', className: 'whatsapp' },
            { name: 'Telegram', unicode: '&#xf2c6;', className: 'telegram' },
            { name: 'Discord', unicode: '&#xf392;', className: 'discord' },
            { name: 'Skype', unicode: '&#xf17e;', className: 'skype' },
            { name: 'TikTok', unicode: '&#xe07b;', className: 'tiktok' },
            { name: 'Snapchat', unicode: '&#xf2ab;', className: 'snapchat' },
            { name: 'Pinterest', unicode: '&#xf0d2;', className: 'pinterest' },
            { name: 'Tumblr', unicode: '&#xf173;', className: 'tumblr' },
            { name: 'Reddit', unicode: '&#xf1a1;', className: 'reddit' },
            { name: 'Vimeo', unicode: '&#xf40a;', className: 'vimeo' },
            { name: 'Twitch', unicode: '&#xf1e8;', className: 'twitch' },
            
            // === E-COMMERCE & SHOPPING ===
            { name: 'Shopping Cart', unicode: '&#xf07a;', className: 'shopping-cart' },
            { name: 'Shopping Bag', unicode: '&#xf290;', className: 'shopping-bag' },
            { name: 'Shopping Basket', unicode: '&#xf291;', className: 'shopping-basket' },
            { name: 'Store', unicode: '&#xf54e;', className: 'store' },
            { name: 'Store Alt', unicode: '&#xf54f;', className: 'store-alt' },
            { name: 'Tags', unicode: '&#xf02c;', className: 'tags' },
            { name: 'Tag', unicode: '&#xf02b;', className: 'tag' },
            { name: 'Percent', unicode: '&#xf295;', className: 'percent' },
            { name: 'Barcode', unicode: '&#xf02a;', className: 'barcode' },
            { name: 'QRCode', unicode: '&#xf029;', className: 'qrcode' },
            { name: 'Gift', unicode: '&#xf06b;', className: 'gift' },
            { name: 'Box', unicode: '&#xf466;', className: 'box' },
            { name: 'Boxes', unicode: '&#xf468;', className: 'boxes' },
            { name: 'Package', unicode: '&#xf4c4;', className: 'box-open' },
            { name: 'Warehouse', unicode: '&#xf494;', className: 'warehouse' },
            { name: 'Inventory', unicode: '&#xf480;', className: 'clipboard-list' },
            { name: 'Dolly', unicode: '&#xf472;', className: 'dolly' },
            { name: 'Pallet', unicode: '&#xf482;', className: 'pallet' },
            { name: 'Shipping Fast', unicode: '&#xf48b;', className: 'shipping-fast' },
            { name: 'Truck', unicode: '&#xf0d1;', className: 'truck' },
            { name: 'Truck Loading', unicode: '&#xf4de;', className: 'truck-loading' },
            
            // === OFFICE & BUSINESS ===
            { name: 'Building', unicode: '&#xf1ad;', className: 'building' },
            { name: 'City', unicode: '&#xf64f;', className: 'city' },
            { name: 'Industry', unicode: '&#xf275;', className: 'industry' },
            { name: 'Factory', unicode: '&#xf275;', className: 'industry' },
            { name: 'Office Building', unicode: '&#xf1ad;', className: 'building' },
            { name: 'Home', unicode: '&#xf015;', className: 'home' },
            { name: 'Address Card', unicode: '&#xf2bb;', className: 'address-card' },
            { name: 'ID Badge', unicode: '&#xf2c1;', className: 'id-badge' },
            { name: 'ID Card', unicode: '&#xf2c2;', className: 'id-card' },
            { name: 'Business Time', unicode: '&#xf64a;', className: 'business-time' },
            { name: 'Tie', unicode: '&#xf553;', className: 'user-tie' },
            { name: 'User Suit', unicode: '&#xf553;', className: 'user-tie' },
            { name: 'Presentation', unicode: '&#xf674;', className: 'chalkboard-teacher' },
            { name: 'Projector', unicode: '&#xf8d2;', className: 'video' },
            { name: 'Meeting', unicode: '&#xf0c0;', className: 'users' },
            { name: 'Conference', unicode: '&#xf086;', className: 'comments' },
            { name: 'Desk', unicode: '&#xf390;', className: 'chair' },
            { name: 'Chair', unicode: '&#xf390;', className: 'chair' },
            { name: 'Coffee', unicode: '&#xf0f4;', className: 'coffee' },
            { name: 'Coffee Cup', unicode: '&#xf0f4;', className: 'coffee' },
            { name: 'Water', unicode: '&#xf773;', className: 'water' },
            { name: 'Restroom', unicode: '&#xf7bd;', className: 'restroom' },
            
            // === DOCUMENTS & FILES ===
            { name: 'File', unicode: '&#xf15b;', className: 'file' },
            { name: 'File Alt', unicode: '&#xf15c;', className: 'file-alt' },
            { name: 'File PDF', unicode: '&#xf1c1;', className: 'file-pdf' },
            { name: 'File Word', unicode: '&#xf1c2;', className: 'file-word' },
            { name: 'File Excel', unicode: '&#xf1c3;', className: 'file-excel' },
            { name: 'File PowerPoint', unicode: '&#xf1c4;', className: 'file-powerpoint' },
            { name: 'File Image', unicode: '&#xf1c5;', className: 'file-image' },
            { name: 'File Video', unicode: '&#xf1c8;', className: 'file-video' },
            { name: 'File Audio', unicode: '&#xf1c7;', className: 'file-audio' },
            { name: 'File Archive', unicode: '&#xf1c6;', className: 'file-archive' },
            { name: 'File Code', unicode: '&#xf1c9;', className: 'file-code' },
            { name: 'File CSV', unicode: '&#xf6dd;', className: 'file-csv' },
            { name: 'File Download', unicode: '&#xf56d;', className: 'file-download' },
            { name: 'File Upload', unicode: '&#xf574;', className: 'file-upload' },
            { name: 'File Import', unicode: '&#xf56f;', className: 'file-import' },
            { name: 'File Export', unicode: '&#xf56e;', className: 'file-export' },
            { name: 'Folder', unicode: '&#xf07b;', className: 'folder' },
            { name: 'Folder Open', unicode: '&#xf07c;', className: 'folder-open' },
            { name: 'Folder Plus', unicode: '&#xf65e;', className: 'folder-plus' },
            { name: 'Folder Minus', unicode: '&#xf65d;', className: 'folder-minus' },
            { name: 'Archive', unicode: '&#xf187;', className: 'archive' },
            { name: 'Copy', unicode: '&#xf0c5;', className: 'copy' },
            { name: 'Cut', unicode: '&#xf0c4;', className: 'cut' },
            { name: 'Paste', unicode: '&#xf0ea;', className: 'paste' },
            
            // === SECURITY & COMPLIANCE ===
            { name: 'Key', unicode: '&#xf084;', className: 'key' },
            { name: 'Lock', unicode: '&#xf023;', className: 'lock' },
            { name: 'Lock Open', unicode: '&#xf3c1;', className: 'lock-open' },
            { name: 'Unlock', unicode: '&#xf09c;', className: 'unlock' },
            { name: 'Unlock Alt', unicode: '&#xf13e;', className: 'unlock-alt' },
            { name: 'User Shield', unicode: '&#xf505;', className: 'user-shield' },
            { name: 'Shield Check', unicode: '&#xf2f7;', className: 'shield-check' },
            { name: 'Shield Virus', unicode: '&#xe06c;', className: 'shield-virus' },
            { name: 'User Secret', unicode: '&#xf21b;', className: 'user-secret' },
            { name: 'User Lock', unicode: '&#xf502;', className: 'user-lock' },
            { name: 'Passport', unicode: '&#xf5ab;', className: 'passport' },
            { name: 'Certificate', unicode: '&#xf0a3;', className: 'certificate' },
            { name: 'Award', unicode: '&#xf559;', className: 'award' },
            { name: 'Medal', unicode: '&#xf5a2;', className: 'medal' },
            { name: 'Ribbon', unicode: '&#xf4d6;', className: 'ribbon' },
            { name: 'Badge', unicode: '&#xf335;', className: 'id-badge' },
            { name: 'Signature', unicode: '&#xf5b7;', className: 'signature' },
            { name: 'Stamp', unicode: '&#xf5bf;', className: 'stamp' },
            { name: 'Seal', unicode: '&#xf023;', className: 'lock' },
            { name: 'Gavel', unicode: '&#xf0e3;', className: 'gavel' },
            { name: 'Balance Scale', unicode: '&#xf24e;', className: 'balance-scale' },
            { name: 'Scale Balanced', unicode: '&#xf515;', className: 'balance-scale-right' },
            { name: 'Scales', unicode: '&#xf24e;', className: 'balance-scale' },
            { name: 'Legal', unicode: '&#xf0e3;', className: 'gavel' },
            { name: 'Contract', unicode: '&#xf56c;', className: 'file-contract' },
            { name: 'Document', unicode: '&#xf15b;', className: 'file' },
            { name: 'Clipboard Check', unicode: '&#xf46c;', className: 'clipboard-check' },
            { name: 'Clipboard List', unicode: '&#xf46d;', className: 'clipboard-list' },
            { name: 'Tasks', unicode: '&#xf0ae;', className: 'tasks' },
            { name: 'Checklist', unicode: '&#xf0ae;', className: 'tasks' },
            
            // === WEATHER & NATURE ===
            { name: 'Sun', unicode: '&#xf185;', className: 'sun' },
            { name: 'Moon', unicode: '&#xf186;', className: 'moon' },
            { name: 'Star', unicode: '&#xf005;', className: 'star' },
            { name: 'Cloud', unicode: '&#xf0c2;', className: 'cloud' },
            { name: 'Cloud Rain', unicode: '&#xf73d;', className: 'cloud-rain' },
            { name: 'Cloud Snow', unicode: '&#xf741;', className: 'cloud-snow' },
            { name: 'Snowflake', unicode: '&#xf2dc;', className: 'snowflake' },
            { name: 'Bolt', unicode: '&#xf0e7;', className: 'bolt' },
            { name: 'Temperature High', unicode: '&#xf769;', className: 'temperature-high' },
            { name: 'Temperature Low', unicode: '&#xf76b;', className: 'temperature-low' },
            { name: 'Umbrella', unicode: '&#xf0e9;', className: 'umbrella' },
            { name: 'Wind', unicode: '&#xf72e;', className: 'wind' },
            { name: 'Leaf', unicode: '&#xf06c;', className: 'leaf' },
            { name: 'Tree', unicode: '&#xf1bb;', className: 'tree' },
            { name: 'Seedling', unicode: '&#xf4d8;', className: 'seedling' },
            { name: 'Flower', unicode: '&#xf7ff;', className: 'spa' },
            { name: 'Globe', unicode: '&#xf0ac;', className: 'globe' },
            { name: 'Globe Europe', unicode: '&#xf7a2;', className: 'globe-europe' },
            { name: 'Globe Americas', unicode: '&#xf57d;', className: 'globe-americas' },
            { name: 'Globe Asia', unicode: '&#xf57e;', className: 'globe-asia' },
            { name: 'Globe Africa', unicode: '&#xf57c;', className: 'globe-africa' },
            { name: 'Mountain', unicode: '&#xf6fc;', className: 'mountain' },
            { name: 'Water', unicode: '&#xf773;', className: 'water' },
            { name: 'Fire', unicode: '&#xf06d;', className: 'fire' },
            { name: 'Recycle', unicode: '&#xf1b8;', className: 'recycle' },
            
            // === MEDICAL & HEALTH ===
            { name: 'Heartbeat', unicode: '&#xf21e;', className: 'heartbeat' },
            { name: 'Heart', unicode: '&#xf004;', className: 'heart' },
            { name: 'Stethoscope', unicode: '&#xf0f1;', className: 'stethoscope' },
            { name: 'Pills', unicode: '&#xf484;', className: 'pills' },
            { name: 'Prescription', unicode: '&#xf5b1;', className: 'prescription' },
            { name: 'Syringe', unicode: '&#xf48e;', className: 'syringe' },
            { name: 'Thermometer', unicode: '&#xf491;', className: 'thermometer' },
            { name: 'Band Aid', unicode: '&#xf462;', className: 'band-aid' },
            { name: 'First Aid', unicode: '&#xf479;', className: 'first-aid' },
            { name: 'Ambulance', unicode: '&#xf0f9;', className: 'ambulance' },
            { name: 'Hospital', unicode: '&#xf0f8;', className: 'hospital' },
            { name: 'Medical Kit', unicode: '&#xf0fa;', className: 'medkit' },
            { name: 'Virus', unicode: '&#xe074;', className: 'virus' },
            { name: 'Shield Virus', unicode: '&#xe06c;', className: 'shield-virus' },
            { name: 'Head Side Mask', unicode: '&#xe063;', className: 'head-side-mask' },
            { name: 'Lungs', unicode: '&#xf604;', className: 'lungs' },
            { name: 'Brain', unicode: '&#xf5dc;', className: 'brain' },
            { name: 'Tooth', unicode: '&#xf5c9;', className: 'tooth' },
            { name: 'Eye', unicode: '&#xf06e;', className: 'eye' },
            { name: 'Eye Slash', unicode: '&#xf070;', className: 'eye-slash' },
            { name: 'Glasses', unicode: '&#xf530;', className: 'glasses' },
            { name: 'Hand Holding Medical', unicode: '&#xe05c;', className: 'hand-holding-medical' },
            
            // === TRANSPORT & VEHICLES ===
            { name: 'Car', unicode: '&#xf1b9;', className: 'car' },
            { name: 'Car Alt', unicode: '&#xf5de;', className: 'car-alt' },
            { name: 'Car Side', unicode: '&#xf5e4;', className: 'car-side' },
            { name: 'Taxi', unicode: '&#xf1ba;', className: 'taxi' },
            { name: 'Bus', unicode: '&#xf207;', className: 'bus' },
            { name: 'Plane', unicode: '&#xf072;', className: 'plane' },
            { name: 'Plane Departure', unicode: '&#xf5b0;', className: 'plane-departure' },
            { name: 'Plane Arrival', unicode: '&#xf5af;', className: 'plane-arrival' },
            { name: 'Ship', unicode: '&#xf21a;', className: 'ship' },
            { name: 'Anchor', unicode: '&#xf13d;', className: 'anchor' },
            { name: 'Truck', unicode: '&#xf0d1;', className: 'truck' },
            { name: 'Bicycle', unicode: '&#xf206;', className: 'bicycle' },
            { name: 'Motorcycle', unicode: '&#xf21c;', className: 'motorcycle' },
            { name: 'Subway', unicode: '&#xf239;', className: 'subway' },
            { name: 'Train', unicode: '&#xf238;', className: 'train' },
            { name: 'Tram', unicode: '&#xf7da;', className: 'tram' },
            { name: 'Gas Pump', unicode: '&#xf52f;', className: 'gas-pump' },
            { name: 'Parking', unicode: '&#xf540;', className: 'parking' },
            { name: 'Road', unicode: '&#xf018;', className: 'road' },
            { name: 'Traffic Light', unicode: '&#xf637;', className: 'traffic-light' },
            { name: 'Helicopter', unicode: '&#xf533;', className: 'helicopter' },
            { name: 'Rocket', unicode: '&#xf135;', className: 'rocket' },
            { name: 'Satellite', unicode: '&#xf7bf;', className: 'satellite' },
            { name: 'Space Shuttle', unicode: '&#xf197;', className: 'space-shuttle' },
            
            // === FOOD & DRINK ===
            { name: 'Coffee', unicode: '&#xf0f4;', className: 'coffee' },
            { name: 'Mug Hot', unicode: '&#xf7b6;', className: 'mug-hot' },
            { name: 'Tea', unicode: '&#xf773;', className: 'tea' },
            { name: 'Wine Glass', unicode: '&#xf4e3;', className: 'wine-glass' },
            { name: 'Wine Bottle', unicode: '&#xf72f;', className: 'wine-bottle' },
            { name: 'Beer', unicode: '&#xf0fc;', className: 'beer' },
            { name: 'Cocktail', unicode: '&#xf561;', className: 'cocktail' },
            { name: 'Glass Martini', unicode: '&#xf000;', className: 'glass-martini' },
            { name: 'Utensils', unicode: '&#xf2e7;', className: 'utensils' },
            { name: 'Fork', unicode: '&#xf2e3;', className: 'utensil-fork' },
            { name: 'Knife', unicode: '&#xf2e4;', className: 'utensil-knife' },
            { name: 'Spoon', unicode: '&#xf2e5;', className: 'utensil-spoon' },
            { name: 'Pizza Slice', unicode: '&#xf818;', className: 'pizza-slice' },
            { name: 'Hamburger', unicode: '&#xf805;', className: 'hamburger' },
            { name: 'Hotdog', unicode: '&#xf80f;', className: 'hotdog' },
            { name: 'Bread Slice', unicode: '&#xf7ec;', className: 'bread-slice' },
            { name: 'Cheese', unicode: '&#xf7ef;', className: 'cheese' },
            { name: 'Apple Alt', unicode: '&#xf5d1;', className: 'apple-alt' },
            { name: 'Carrot', unicode: '&#xf787;', className: 'carrot' },
            { name: 'Pepper Hot', unicode: '&#xf816;', className: 'pepper-hot' },
            { name: 'Ice Cream', unicode: '&#xf810;', className: 'ice-cream' },
            { name: 'Cake Candles', unicode: '&#xf1fd;', className: 'birthday-cake' },
            { name: 'Cookie', unicode: '&#xf563;', className: 'cookie' },
            { name: 'Fish', unicode: '&#xf578;', className: 'fish' },
            { name: 'Egg', unicode: '&#xf7fb;', className: 'egg' },
            { name: 'Lemon', unicode: '&#xf094;', className: 'lemon' },
            { name: 'Cookie Bite', unicode: '&#xf564;', className: 'cookie-bite' },
            
            // === EDUCATION & LEARNING ===
            { name: 'Graduation Cap', unicode: '&#xf19d;', className: 'graduation-cap' },
            { name: 'Book', unicode: '&#xf02d;', className: 'book' },
            { name: 'Book Open', unicode: '&#xf518;', className: 'book-open' },
            { name: 'Book Reader', unicode: '&#xf5da;', className: 'book-reader' },
            { name: 'Books', unicode: '&#xf5db;', className: 'books' },
            { name: 'Bookmark', unicode: '&#xf02e;', className: 'bookmark' },
            { name: 'Journal Whills', unicode: '&#xf66a;', className: 'journal-whills' },
            { name: 'Pencil Alt', unicode: '&#xf303;', className: 'pencil-alt' },
            { name: 'Pen', unicode: '&#xf304;', className: 'pen' },
            { name: 'Pen Fancy', unicode: '&#xf5ac;', className: 'pen-fancy' },
            { name: 'Highlighter', unicode: '&#xf591;', className: 'highlighter' },
            { name: 'Marker', unicode: '&#xf5a1;', className: 'marker' },
            { name: 'Eraser', unicode: '&#xf12d;', className: 'eraser' },
            { name: 'Chalkboard', unicode: '&#xf51b;', className: 'chalkboard' },
            { name: 'Chalkboard Teacher', unicode: '&#xf51c;', className: 'chalkboard-teacher' },
            { name: 'Blackboard', unicode: '&#xf51b;', className: 'chalkboard' },
            { name: 'University', unicode: '&#xf19c;', className: 'university' },
            { name: 'School', unicode: '&#xf549;', className: 'school' },
            { name: 'Student', unicode: '&#xf500;', className: 'user-graduate' },
            { name: 'Teacher', unicode: '&#xf51c;', className: 'chalkboard-teacher' },
            { name: 'Spell Check', unicode: '&#xf891;', className: 'spell-check' },
            { name: 'Language', unicode: '&#xf1ab;', className: 'language' },
            { name: 'Globe', unicode: '&#xf0ac;', className: 'globe' },
            { name: 'Atlas', unicode: '&#xf558;', className: 'atlas' },
            { name: 'Map', unicode: '&#xf279;', className: 'map' },
            { name: 'Compass', unicode: '&#xf14e;', className: 'compass' },
            { name: 'Ruler', unicode: '&#xf545;', className: 'ruler' },
            { name: 'Ruler Combined', unicode: '&#xf546;', className: 'ruler-combined' },
            { name: 'Calculator', unicode: '&#xf1ec;', className: 'calculator' },
            { name: 'Microscope', unicode: '&#xf610;', className: 'microscope' },
            { name: 'Flask', unicode: '&#xf0c3;', className: 'flask' },
            { name: 'Atom', unicode: '&#xf5d2;', className: 'atom' },
            
            // === SPORTS & RECREATION ===
            { name: 'Futbol', unicode: '&#xf1e3;', className: 'futbol' },
            { name: 'Basketball Ball', unicode: '&#xf434;', className: 'basketball-ball' },
            { name: 'Football Ball', unicode: '&#xf44e;', className: 'football-ball' },
            { name: 'Baseball Ball', unicode: '&#xf433;', className: 'baseball-ball' },
            { name: 'Tennis Ball', unicode: '&#xf43e;', className: 'tennis-ball' },
            { name: 'Volleyball Ball', unicode: '&#xf45f;', className: 'volleyball-ball' },
            { name: 'Table Tennis', unicode: '&#xf45d;', className: 'table-tennis' },
            { name: 'Golf Ball', unicode: '&#xf450;', className: 'golf-ball' },
            { name: 'Hockey Puck', unicode: '&#xf453;', className: 'hockey-puck' },
            { name: 'Bowling Ball', unicode: '&#xf436;', className: 'bowling-ball' },
            { name: 'Dumbbell', unicode: '&#xf44b;', className: 'dumbbell' },
            { name: 'Weight', unicode: '&#xf496;', className: 'weight' },
            { name: 'Swimming Pool', unicode: '&#xf5c5;', className: 'swimming-pool' },
            { name: 'Swimmer', unicode: '&#xf5c4;', className: 'swimmer' },
            { name: 'Running', unicode: '&#xf70c;', className: 'running' },
            { name: 'Walking', unicode: '&#xf554;', className: 'walking' },
            { name: 'Biking', unicode: '&#xf84a;', className: 'biking' },
            { name: 'Skiing', unicode: '&#xf7c9;', className: 'skiing' },
            { name: 'Snowboarding', unicode: '&#xf7ce;', className: 'snowboarding' },
            { name: 'Skating', unicode: '&#xf7c5;', className: 'skating' },
            { name: 'Trophy', unicode: '&#xf091;', className: 'trophy' },
            { name: 'Medal', unicode: '&#xf5a2;', className: 'medal' },
            { name: 'Award', unicode: '&#xf559;', className: 'award' },
            { name: 'Crown', unicode: '&#xf521;', className: 'crown' },
            { name: 'Stopwatch', unicode: '&#xf2f2;', className: 'stopwatch' },
            { name: 'Whistle', unicode: '&#xf460;', className: 'whistle' },
            { name: 'Mountain', unicode: '&#xf6fc;', className: 'mountain' },
            { name: 'Campground', unicode: '&#xf6bb;', className: 'campground' },
            { name: 'Fire', unicode: '&#xf06d;', className: 'fire' },
            
            // === TOOLS & UTILITIES ===
            { name: 'Wrench', unicode: '&#xf0ad;', className: 'wrench' },
            { name: 'Screwdriver', unicode: '&#xf54a;', className: 'screwdriver' },
            { name: 'Hammer', unicode: '&#xf6e3;', className: 'hammer' },
            { name: 'Saw', unicode: '&#xe68e;', className: 'saw' },
            { name: 'Drill', unicode: '&#xe518;', className: 'drill' },
            { name: 'Toolbox', unicode: '&#xf552;', className: 'toolbox' },
            { name: 'Hard Hat', unicode: '&#xf807;', className: 'hard-hat' },
            { name: 'Cog', unicode: '&#xf013;', className: 'cog' },
            { name: 'Cogs', unicode: '&#xf085;', className: 'cogs' },
            { name: 'Settings', unicode: '&#xf013;', className: 'cog' },
            { name: 'Gear', unicode: '&#xf013;', className: 'cog' },
            { name: 'Tools', unicode: '&#xf7d9;', className: 'tools' },
            { name: 'Nut', unicode: '&#xf111;', className: 'circle' },
            { name: 'Bolt', unicode: '&#xf0e7;', className: 'bolt' },
            { name: 'Screw', unicode: '&#xf54a;', className: 'screwdriver' },
            { name: 'Level', unicode: '&#xe469;', className: 'level' },
            { name: 'Ruler', unicode: '&#xf545;', className: 'ruler' },
            { name: 'Tape', unicode: '&#xf4db;', className: 'tape' },
            { name: 'Flashlight', unicode: '&#xf689;', className: 'flashlight' },
            { name: 'Battery Full', unicode: '&#xf240;', className: 'battery-full' },
            { name: 'Battery Half', unicode: '&#xf242;', className: 'battery-half' },
            { name: 'Battery Empty', unicode: '&#xf244;', className: 'battery-empty' },
            { name: 'Plug', unicode: '&#xf1e6;', className: 'plug' },
            { name: 'Magnet', unicode: '&#xf076;', className: 'magnet' },
            { name: 'Oil Can', unicode: '&#xf613;', className: 'oil-can' },
            { name: 'Spray Can', unicode: '&#xf5bd;', className: 'spray-can' },
            { name: 'Paint Brush', unicode: '&#xf1fc;', className: 'paint-brush' },
            { name: 'Paint Roller', unicode: '&#xf5aa;', className: 'paint-roller' },
            
            // === TIME & CALENDAR ===
            { name: 'Clock', unicode: '&#xf017;', className: 'clock' },
            { name: 'Stopwatch', unicode: '&#xf2f2;', className: 'stopwatch' },
            { name: 'Hourglass', unicode: '&#xf251;', className: 'hourglass' },
            { name: 'Hourglass Start', unicode: '&#xf251;', className: 'hourglass-start' },
            { name: 'Hourglass Half', unicode: '&#xf252;', className: 'hourglass-half' },
            { name: 'Hourglass End', unicode: '&#xf253;', className: 'hourglass-end' },
            { name: 'Timer', unicode: '&#xf2f2;', className: 'stopwatch' },
            { name: 'Alarm Clock', unicode: '&#xf34e;', className: 'alarm-clock' },
            { name: 'Calendar', unicode: '&#xf073;', className: 'calendar' },
            { name: 'Calendar Alt', unicode: '&#xf073;', className: 'calendar-alt' },
            { name: 'Calendar Check', unicode: '&#xf274;', className: 'calendar-check' },
            { name: 'Calendar Plus', unicode: '&#xf271;', className: 'calendar-plus' },
            { name: 'Calendar Minus', unicode: '&#xf272;', className: 'calendar-minus' },
            { name: 'Calendar Times', unicode: '&#xf273;', className: 'calendar-times' },
            { name: 'Calendar Day', unicode: '&#xf783;', className: 'calendar-day' },
            { name: 'Calendar Week', unicode: '&#xf784;', className: 'calendar-week' },
            { name: 'History', unicode: '&#xf1da;', className: 'history' },
            { name: 'Business Time', unicode: '&#xf64a;', className: 'business-time' },
            { name: 'User Clock', unicode: '&#xf4fd;', className: 'user-clock' },
            { name: 'Clock Rotate Left', unicode: '&#xf1da;', className: 'history' },
            
            // === NAVIGATION & ARROWS ===
            { name: 'Arrow Right', unicode: '&#xf061;', className: 'arrow-right' },
            { name: 'Arrow Left', unicode: '&#xf060;', className: 'arrow-left' },
            { name: 'Arrow Up', unicode: '&#xf062;', className: 'arrow-up' },
            { name: 'Arrow Down', unicode: '&#xf063;', className: 'arrow-down' },
            { name: 'Arrow Circle Right', unicode: '&#xf0a9;', className: 'arrow-circle-right' },
            { name: 'Arrow Circle Left', unicode: '&#xf0a8;', className: 'arrow-circle-left' },
            { name: 'Arrow Circle Up', unicode: '&#xf0aa;', className: 'arrow-circle-up' },
            { name: 'Arrow Circle Down', unicode: '&#xf0ab;', className: 'arrow-circle-down' },
            { name: 'Chevron Right', unicode: '&#xf054;', className: 'chevron-right' },
            { name: 'Chevron Left', unicode: '&#xf053;', className: 'chevron-left' },
            { name: 'Chevron Up', unicode: '&#xf077;', className: 'chevron-up' },
            { name: 'Chevron Down', unicode: '&#xf078;', className: 'chevron-down' },
            { name: 'Angle Right', unicode: '&#xf105;', className: 'angle-right' },
            { name: 'Angle Left', unicode: '&#xf104;', className: 'angle-left' },
            { name: 'Angle Up', unicode: '&#xf106;', className: 'angle-up' },
            { name: 'Angle Down', unicode: '&#xf107;', className: 'angle-down' },
            { name: 'Angle Double Right', unicode: '&#xf101;', className: 'angle-double-right' },
            { name: 'Angle Double Left', unicode: '&#xf100;', className: 'angle-double-left' },
            { name: 'Angle Double Up', unicode: '&#xf102;', className: 'angle-double-up' },
            { name: 'Angle Double Down', unicode: '&#xf103;', className: 'angle-double-down' },
            { name: 'Caret Right', unicode: '&#xf0da;', className: 'caret-right' },
            { name: 'Caret Left', unicode: '&#xf0d9;', className: 'caret-left' },
            { name: 'Caret Up', unicode: '&#xf0d8;', className: 'caret-up' },
            { name: 'Caret Down', unicode: '&#xf0d7;', className: 'caret-down' },
            { name: 'Long Arrow Alt Right', unicode: '&#xf30b;', className: 'long-arrow-alt-right' },
            { name: 'Long Arrow Alt Left', unicode: '&#xf30a;', className: 'long-arrow-alt-left' },
            { name: 'Long Arrow Alt Up', unicode: '&#xf30c;', className: 'long-arrow-alt-up' },
            { name: 'Long Arrow Alt Down', unicode: '&#xf309;', className: 'long-arrow-alt-down' },
            { name: 'Location Arrow', unicode: '&#xf124;', className: 'location-arrow' },
            { name: 'Compass', unicode: '&#xf14e;', className: 'compass' },
            { name: 'Directions', unicode: '&#xf5eb;', className: 'directions' },
            { name: 'Map Marker', unicode: '&#xf3c5;', className: 'map-marker-alt' },
            { name: 'Map Pin', unicode: '&#xf276;', className: 'map-pin' },
            { name: 'Route', unicode: '&#xf4d7;', className: 'route' },
            { name: 'Share', unicode: '&#xf064;', className: 'share' },
            { name: 'Reply', unicode: '&#xf3e5;', className: 'reply' },
            { name: 'Forward', unicode: '&#xf04e;', className: 'forward' },
            { name: 'Undo', unicode: '&#xf0e2;', className: 'undo' },
            { name: 'Redo', unicode: '&#xf01e;', className: 'redo' },
            { name: 'Sync', unicode: '&#xf021;', className: 'sync' },
            { name: 'Refresh', unicode: '&#xf021;', className: 'sync' },
            { name: 'Reload', unicode: '&#xf021;', className: 'sync' },
            { name: 'Repeat', unicode: '&#xf01e;', className: 'redo' },
            { name: 'Random', unicode: '&#xf074;', className: 'random' },
            { name: 'Shuffle', unicode: '&#xf074;', className: 'random' },
            
            // === ACTIONS & CONTROLS ===
            { name: 'Play', unicode: '&#xf04b;', className: 'play' },
            { name: 'Pause', unicode: '&#xf04c;', className: 'pause' },
            { name: 'Stop', unicode: '&#xf04d;', className: 'stop' },
            { name: 'Fast Forward', unicode: '&#xf04e;', className: 'fast-forward' },
            { name: 'Fast Backward', unicode: '&#xf049;', className: 'fast-backward' },
            { name: 'Step Forward', unicode: '&#xf051;', className: 'step-forward' },
            { name: 'Step Backward', unicode: '&#xf048;', className: 'step-backward' },
            { name: 'Eject', unicode: '&#xf052;', className: 'eject' },
            { name: 'Volume Up', unicode: '&#xf028;', className: 'volume-up' },
            { name: 'Volume Down', unicode: '&#xf027;', className: 'volume-down' },
            { name: 'Volume Off', unicode: '&#xf026;', className: 'volume-off' },
            { name: 'Volume Mute', unicode: '&#xf6a9;', className: 'volume-mute' },
            { name: 'Microphone', unicode: '&#xf130;', className: 'microphone' },
            { name: 'Microphone Slash', unicode: '&#xf131;', className: 'microphone-slash' },
            { name: 'Download', unicode: '&#xf019;', className: 'download' },
            { name: 'Upload', unicode: '&#xf093;', className: 'upload' },
            { name: 'Save', unicode: '&#xf0c7;', className: 'save' },
            { name: 'Floppy Disk', unicode: '&#xf0c7;', className: 'save' },
            { name: 'Print', unicode: '&#xf02f;', className: 'print' },
            { name: 'Printer', unicode: '&#xf02f;', className: 'print' },
            { name: 'Fax', unicode: '&#xf1ac;', className: 'fax' },
            { name: 'Scanner', unicode: '&#xf488;', className: 'scanner' },
            { name: 'Copy', unicode: '&#xf0c5;', className: 'copy' },
            { name: 'Cut', unicode: '&#xf0c4;', className: 'cut' },
            { name: 'Paste', unicode: '&#xf0ea;', className: 'paste' },
            { name: 'Edit', unicode: '&#xf044;', className: 'edit' },
            { name: 'Pen', unicode: '&#xf304;', className: 'pen' },
            { name: 'Pencil', unicode: '&#xf303;', className: 'pencil-alt' },
            { name: 'Eraser', unicode: '&#xf12d;', className: 'eraser' },
            { name: 'Trash', unicode: '&#xf1f8;', className: 'trash' },
            { name: 'Trash Alt', unicode: '&#xf2ed;', className: 'trash-alt' },
            { name: 'Delete', unicode: '&#xf1f8;', className: 'trash' },
            { name: 'Remove', unicode: '&#xf1f8;', className: 'trash' },
            { name: 'Close', unicode: '&#xf00d;', className: 'times' },
            { name: 'Times', unicode: '&#xf00d;', className: 'times' },
            { name: 'X', unicode: '&#xf00d;', className: 'times' },
            { name: 'Plus', unicode: '&#xf067;', className: 'plus' },
            { name: 'Add', unicode: '&#xf067;', className: 'plus' },
            { name: 'Minus', unicode: '&#xf068;', className: 'minus' },
            { name: 'Subtract', unicode: '&#xf068;', className: 'minus' },
            { name: 'Check', unicode: '&#xf00c;', className: 'check' },
            { name: 'Checkmark', unicode: '&#xf00c;', className: 'check' },
            { name: 'Check Circle', unicode: '&#xf058;', className: 'check-circle' },
            { name: 'Check Square', unicode: '&#xf14a;', className: 'check-square' },
            { name: 'Times Circle', unicode: '&#xf057;', className: 'times-circle' },
            { name: 'Exclamation', unicode: '&#xf12a;', className: 'exclamation' },
            { name: 'Exclamation Circle', unicode: '&#xf06a;', className: 'exclamation-circle' },
            { name: 'Exclamation Triangle', unicode: '&#xf071;', className: 'exclamation-triangle' },
            { name: 'Warning', unicode: '&#xf071;', className: 'exclamation-triangle' },
            { name: 'Alert', unicode: '&#xf071;', className: 'exclamation-triangle' },
            { name: 'Question', unicode: '&#xf128;', className: 'question' },
            { name: 'Question Circle', unicode: '&#xf059;', className: 'question-circle' },
            { name: 'Info', unicode: '&#xf129;', className: 'info' },
            { name: 'Info Circle', unicode: '&#xf05a;', className: 'info-circle' },
            { name: 'Ban', unicode: '&#xf05e;', className: 'ban' },
            { name: 'Prohibited', unicode: '&#xf05e;', className: 'ban' },
            { name: 'Not Allowed', unicode: '&#xf05e;', className: 'ban' },
            
            // === USER & PEOPLE ===
            { name: 'User', unicode: '&#xf007;', className: 'user' },
            { name: 'User Circle', unicode: '&#xf2bd;', className: 'user-circle' },
            { name: 'User Alt', unicode: '&#xf406;', className: 'user-alt' },
            { name: 'Users', unicode: '&#xf0c0;', className: 'users' },
            { name: 'User Friends', unicode: '&#xf500;', className: 'user-friends' },
            { name: 'User Plus', unicode: '&#xf234;', className: 'user-plus' },
            { name: 'User Minus', unicode: '&#xf503;', className: 'user-minus' },
            { name: 'User Times', unicode: '&#xf235;', className: 'user-times' },
            { name: 'User Check', unicode: '&#xf4fc;', className: 'user-check' },
            { name: 'User Cog', unicode: '&#xf4fe;', className: 'user-cog' },
            { name: 'User Edit', unicode: '&#xf4ff;', className: 'user-edit' },
            { name: 'User Shield', unicode: '&#xf505;', className: 'user-shield' },
            { name: 'User Lock', unicode: '&#xf502;', className: 'user-lock' },
            { name: 'User Secret', unicode: '&#xf21b;', className: 'user-secret' },
            { name: 'User Tie', unicode: '&#xf553;', className: 'user-tie' },
            { name: 'User Graduate', unicode: '&#xf501;', className: 'user-graduate' },
            { name: 'User Nurse', unicode: '&#xf82f;', className: 'user-nurse' },
            { name: 'User MD', unicode: '&#xf0f0;', className: 'user-md' },
            { name: 'User Tag', unicode: '&#xf507;', className: 'user-tag' },
            { name: 'User Clock', unicode: '&#xf4fd;', className: 'user-clock' },
            { name: 'Address Card', unicode: '&#xf2bb;', className: 'address-card' },
            { name: 'Address Book', unicode: '&#xf2b9;', className: 'address-book' },
            { name: 'ID Badge', unicode: '&#xf2c1;', className: 'id-badge' },
            { name: 'ID Card', unicode: '&#xf2c2;', className: 'id-card' },
            { name: 'Portrait', unicode: '&#xf3e0;', className: 'portrait' },
            { name: 'Male', unicode: '&#xf183;', className: 'male' },
            { name: 'Female', unicode: '&#xf182;', className: 'female' },
            { name: 'Child', unicode: '&#xf1ae;', className: 'child' },
            { name: 'Baby', unicode: '&#xf77c;', className: 'baby' },
            { name: 'Smile', unicode: '&#xf118;', className: 'smile' },
            { name: 'Laugh', unicode: '&#xf599;', className: 'laugh' },
            { name: 'Grin', unicode: '&#xf580;', className: 'grin' },
            { name: 'Frown', unicode: '&#xf119;', className: 'frown' },
            { name: 'Sad Tear', unicode: '&#xf5b4;', className: 'sad-tear' },
            { name: 'Angry', unicode: '&#xf556;', className: 'angry' },
            { name: 'Surprise', unicode: '&#xf5c2;', className: 'surprise' },
            { name: 'Meh', unicode: '&#xf11a;', className: 'meh' },
            { name: 'Kiss', unicode: '&#xf596;', className: 'kiss' },
            { name: 'Wink', unicode: '&#xf4da;', className: 'grin-wink' },
            { name: 'Thumbs Up', unicode: '&#xf164;', className: 'thumbs-up' },
            { name: 'Thumbs Down', unicode: '&#xf165;', className: 'thumbs-down' },
            { name: 'Hand Paper', unicode: '&#xf256;', className: 'hand-paper' },
            { name: 'Hand Rock', unicode: '&#xf255;', className: 'hand-rock' },
            { name: 'Hand Scissors', unicode: '&#xf257;', className: 'hand-scissors' },
            { name: 'Hand Spock', unicode: '&#xf259;', className: 'hand-spock' },
            { name: 'Hand Lizard', unicode: '&#xf258;', className: 'hand-lizard' },
            { name: 'Hand Peace', unicode: '&#xf25b;', className: 'hand-peace' },
            { name: 'Hand Point Right', unicode: '&#xf0a4;', className: 'hand-point-right' },
            { name: 'Hand Point Left', unicode: '&#xf0a5;', className: 'hand-point-left' },
            { name: 'Hand Point Up', unicode: '&#xf0a6;', className: 'hand-point-up' },
            { name: 'Hand Point Down', unicode: '&#xf0a7;', className: 'hand-point-down' },
            { name: 'Handshake', unicode: '&#xf2b5;', className: 'handshake' },
            { name: 'Fist Raised', unicode: '&#xf6de;', className: 'fist-raised' },
            { name: 'Praying Hands', unicode: '&#xf684;', className: 'praying-hands' },
            
            // === NUMBERS & SYMBOLS ===
            { name: '0', unicode: '&#xf10f;', className: 'circle' },
            { name: '1', unicode: '&#xf1c0;', className: 'database' },
            { name: '2', unicode: '&#xf1c1;', className: 'file-pdf' },
            { name: '3', unicode: '&#xf1c2;', className: 'file-word' },
            { name: '4', unicode: '&#xf1c3;', className: 'file-excel' },
            { name: '5', unicode: '&#xf1c4;', className: 'file-powerpoint' },
            { name: '6', unicode: '&#xf1c5;', className: 'file-image' },
            { name: '7', unicode: '&#xf1c6;', className: 'file-archive' },
            { name: '8', unicode: '&#xf1c7;', className: 'file-audio' },
            { name: '9', unicode: '&#xf1c8;', className: 'file-video' },
            { name: 'Hashtag', unicode: '&#xf292;', className: 'hashtag' },
            { name: 'Number', unicode: '&#xf292;', className: 'hashtag' },
            { name: 'Asterisk', unicode: '&#xf069;', className: 'asterisk' },
            { name: 'Slash', unicode: '&#xf715;', className: 'slash' },
            { name: 'Backslash', unicode: '&#xf715;', className: 'slash' },
            { name: 'At Symbol', unicode: '&#xf1fa;', className: 'at' },
            { name: 'Ampersand', unicode: '&#xf8ff;', className: 'ampersand' },
            { name: 'Copyright', unicode: '&#xf1f9;', className: 'copyright' },
            { name: 'Registered', unicode: '&#xf25d;', className: 'registered' },
            { name: 'Trademark', unicode: '&#xf25c;', className: 'trademark' },
            { name: 'Paragraph', unicode: '&#xf1dd;', className: 'paragraph' },
            { name: 'Section', unicode: '&#xf6d1;', className: 'section' },
            { name: 'Ellipsis H', unicode: '&#xf141;', className: 'ellipsis-h' },
            { name: 'Ellipsis V', unicode: '&#xf142;', className: 'ellipsis-v' },
            { name: 'Equals', unicode: '&#xf52c;', className: 'equals' },
            { name: 'Not Equal', unicode: '&#xf53e;', className: 'not-equal' },
            { name: 'Greater Than', unicode: '&#xf531;', className: 'greater-than' },
            { name: 'Less Than', unicode: '&#xf536;', className: 'less-than' },
            { name: 'Greater Than Equal', unicode: '&#xf532;', className: 'greater-than-equal' },
            { name: 'Less Than Equal', unicode: '&#xf537;', className: 'less-than-equal' },
            { name: 'Infinity', unicode: '&#xf534;', className: 'infinity' },
            { name: 'Percent', unicode: '&#xf295;', className: 'percent' },
            { name: 'Plus Minus', unicode: '&#xf067;', className: 'plus-minus' },
            { name: 'Divide', unicode: '&#xf529;', className: 'divide' },
            { name: 'Multiply', unicode: '&#xf00d;', className: 'times' },
            { name: 'Superscript', unicode: '&#xf12b;', className: 'superscript' },
            { name: 'Subscript', unicode: '&#xf12c;', className: 'subscript' },
            { name: 'Function', unicode: '&#xf661;', className: 'function' },
            { name: 'Square Root', unicode: '&#xf697;', className: 'square-root-alt' },
            
            // === MISCELLANEOUS ===
            { name: 'Magic', unicode: '&#xf0d0;', className: 'magic' },
            { name: 'Wand', unicode: '&#xf0d0;', className: 'magic' },
            { name: 'Sparkles', unicode: '&#xf890;', className: 'sparkles' },
            { name: 'Dice', unicode: '&#xf522;', className: 'dice' },
            { name: 'Puzzle Piece', unicode: '&#xf12e;', className: 'puzzle-piece' },
            { name: 'Lightbulb', unicode: '&#xf0eb;', className: 'lightbulb' },
            { name: 'Idea', unicode: '&#xf0eb;', className: 'lightbulb' },
            { name: 'Battery Full', unicode: '&#xf240;', className: 'battery-full' },
            { name: 'Bell', unicode: '&#xf0f3;', className: 'bell' },
            { name: 'Bell Slash', unicode: '&#xf1f6;', className: 'bell-slash' },
            { name: 'Bookmark', unicode: '&#xf02e;', className: 'bookmark' },
            { name: 'Flag', unicode: '&#xf024;', className: 'flag' },
            { name: 'Flag Checkered', unicode: '&#xf11e;', className: 'flag-checkered' },
            { name: 'Gift', unicode: '&#xf06b;', className: 'gift' },
            { name: 'Link', unicode: '&#xf0c1;', className: 'link' },
            { name: 'Unlink', unicode: '&#xf127;', className: 'unlink' },
            { name: 'External Link', unicode: '&#xf35d;', className: 'external-link-alt' },
            { name: 'Anchor', unicode: '&#xf13d;', className: 'anchor' },
            { name: 'Paperclip', unicode: '&#xf0c6;', className: 'paperclip' },
            { name: 'Thumbtack', unicode: '&#xf08d;', className: 'thumbtack' },
            { name: 'Pin', unicode: '&#xf08d;', className: 'thumbtack' },
            { name: 'Map Marker', unicode: '&#xf3c5;', className: 'map-marker-alt' },
            { name: 'Location', unicode: '&#xf3c5;', className: 'map-marker-alt' },
            { name: 'Search', unicode: '&#xf002;', className: 'search' },
            { name: 'Search Plus', unicode: '&#xf00e;', className: 'search-plus' },
            { name: 'Search Minus', unicode: '&#xf010;', className: 'search-minus' },
            { name: 'Filter', unicode: '&#xf0b0;', className: 'filter' },
            { name: 'Sort', unicode: '&#xf0dc;', className: 'sort' },
            { name: 'Sort Up', unicode: '&#xf0de;', className: 'sort-up' },
            { name: 'Sort Down', unicode: '&#xf0dd;', className: 'sort-down' },
            { name: 'Sort Alpha Down', unicode: '&#xf15d;', className: 'sort-alpha-down' },
            { name: 'Sort Alpha Up', unicode: '&#xf15e;', className: 'sort-alpha-up' },
            { name: 'Sort Numeric Down', unicode: '&#xf162;', className: 'sort-numeric-down' },
            { name: 'Sort Numeric Up', unicode: '&#xf163;', className: 'sort-numeric-up' },
            { name: 'Random', unicode: '&#xf074;', className: 'random' },
            { name: 'Retweet', unicode: '&#xf079;', className: 'retweet' },
            { name: 'Sitemap', unicode: '&#xf0e8;', className: 'sitemap' },
            { name: 'List', unicode: '&#xf03a;', className: 'list' },
            { name: 'List Ul', unicode: '&#xf0ca;', className: 'list-ul' },
            { name: 'List Ol', unicode: '&#xf0cb;', className: 'list-ol' },
            { name: 'Th', unicode: '&#xf00a;', className: 'th' },
            { name: 'Th Large', unicode: '&#xf009;', className: 'th-large' },
            { name: 'Th List', unicode: '&#xf00b;', className: 'th-list' },
            { name: 'Bars', unicode: '&#xf0c9;', className: 'bars' },
            { name: 'Menu', unicode: '&#xf0c9;', className: 'bars' },
            { name: 'Hamburger', unicode: '&#xf0c9;', className: 'bars' },
            { name: 'Ellipsis H', unicode: '&#xf141;', className: 'ellipsis-h' },
            { name: 'Ellipsis V', unicode: '&#xf142;', className: 'ellipsis-v' },
            { name: 'Grip Horizontal', unicode: '&#xf58d;', className: 'grip-horizontal' },
            { name: 'Grip Vertical', unicode: '&#xf58e;', className: 'grip-vertical' },
            { name: 'Sliders H', unicode: '&#xf1de;', className: 'sliders-h' },
            { name: 'Toggle Off', unicode: '&#xf204;', className: 'toggle-off' },
            { name: 'Toggle On', unicode: '&#xf205;', className: 'toggle-on' },
            { name: 'Power Off', unicode: '&#xf011;', className: 'power-off' },
            { name: 'Crosshairs', unicode: '&#xf05b;', className: 'crosshairs' },
            { name: 'Expand', unicode: '&#xf065;', className: 'expand' },
            { name: 'Compress', unicode: '&#xf066;', className: 'compress' },
            { name: 'Expand Arrows Alt', unicode: '&#xf31e;', className: 'expand-arrows-alt' },
            { name: 'Compress Arrows Alt', unicode: '&#xf422;', className: 'compress-arrows-alt' },
            { name: 'External Link Square', unicode: '&#xf360;', className: 'external-link-square-alt' },
            { name: 'Spinner', unicode: '&#xf110;', className: 'spinner' },
            { name: 'Circle Notch', unicode: '&#xf1ce;', className: 'circle-notch' },
            { name: 'Cog', unicode: '&#xf013;', className: 'cog' },
            { name: 'Sync Alt', unicode: '&#xf2f1;', className: 'sync-alt' },
            { name: 'Redo Alt', unicode: '&#xf2f9;', className: 'redo-alt' },
            { name: 'Undo Alt', unicode: '&#xf2ea;', className: 'undo-alt' },
            { name: 'Exchange Alt', unicode: '&#xf362;', className: 'exchange-alt' },
            { name: 'Recycle', unicode: '&#xf1b8;', className: 'recycle' },
            { name: 'Tint', unicode: '&#xf043;', className: 'tint' },
            { name: 'Tint Slash', unicode: '&#xf5c7;', className: 'tint-slash' },
            { name: 'Paint Brush', unicode: '&#xf1fc;', className: 'paint-brush' },
            { name: 'Palette', unicode: '&#xf53f;', className: 'palette' },
            { name: 'Swatchbook', unicode: '&#xf5c3;', className: 'swatchbook' },
            { name: 'Fill', unicode: '&#xf575;', className: 'fill' },
            { name: 'Fill Drip', unicode: '&#xf576;', className: 'fill-drip' },
            { name: 'Eraser', unicode: '&#xf12d;', className: 'eraser' },
            { name: 'Clone', unicode: '&#xf24d;', className: 'clone' },
            { name: 'Object Group', unicode: '&#xf247;', className: 'object-group' },
            { name: 'Object Ungroup', unicode: '&#xf248;', className: 'object-ungroup' },
            { name: 'Vector Square', unicode: '&#xf5cb;', className: 'vector-square' },
            { name: 'Draw Polygon', unicode: '&#xf5ee;', className: 'draw-polygon' },
            { name: 'Highlighter', unicode: '&#xf591;', className: 'highlighter' },
            { name: 'Crop', unicode: '&#xf125;', className: 'crop' },
            { name: 'Crop Alt', unicode: '&#xf565;', className: 'crop-alt' },
            { name: 'Bezier Curve', unicode: '&#xf55b;', className: 'bezier-curve' },
            { name: 'Pen Tool', unicode: '&#xf304;', className: 'pen' },
            { name: 'Pen Nib', unicode: '&#xf5ad;', className: 'pen-nib' },
            { name: 'Pen Fancy', unicode: '&#xf5ac;', className: 'pen-fancy' },
            { name: 'Pen Square', unicode: '&#xf14b;', className: 'pen-square' },
            { name: 'Feather', unicode: '&#xf52d;', className: 'feather' },
            { name: 'Feather Alt', unicode: '&#xf56b;', className: 'feather-alt' },
            { name: 'Quill Pen', unicode: '&#xf5ad;', className: 'pen-nib' }
        ];

        // Stock Images (Placeholder URLs - in Produktion echte URLs verwenden)
        const STOCK_IMAGES = [
            'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=500&h=350&fit=crop',
            'https://images.unsplash.com/photo-1551434678-e076c223a692?w=500&h=350&fit=crop',
            'https://images.unsplash.com/photo-1552664730-d307ca884978?w=500&h=350&fit=crop',
            'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=500&h=350&fit=crop',
            'https://images.unsplash.com/photo-1573164713714-d95e436ab8d6?w=500&h=350&fit=crop',
            'https://images.unsplash.com/photo-1556157382-97eda2d62296?w=500&h=350&fit=crop',
            'https://images.unsplash.com/photo-1521737604893-d14cc237f11d?w=500&h=350&fit=crop',
            'https://images.unsplash.com/photo-1486312338219-ce68e2c6b525?w=500&h=350&fit=crop'
        ];

        // Erweiterte Module Templates
        const MODULE_TEMPLATES = [
{
    id: 'kerberos-hero-advanced',
    name: 'Hero mit Bild & Icon',
    category: 'Hero & Header',
    description: 'Hero-Bereich mit anpassbarem Bild und Icon',
    html: `<section style="background: {{backgroundColor}}; color: white; padding: {{sectionSpacing}}; text-align: center; position: relative; overflow: hidden;">
    <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: url('{{backgroundImage}}') center/cover; opacity: 0.2;"></div>
    <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem; position: relative; z-index: 2;">
        <div style="font-family: 'Font Awesome 5 Pro'; font-size: var(--large-text-size); color: {{iconColor}}; margin-bottom: {{iconSpacing}};">{{iconClass}}</div>
        <h1 style="font-family: var(--heading-font-font-family); font-size: var(--heading-1-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}}; margin-bottom: {{titleSpacing}};">{{title}}</h1>
        <p style="font-family: var(--body-font-font-family); font-size: var(--large-text-size); line-height: var(--body-font-line-height); opacity: 0.9; color: {{subtitleColor}}; margin-bottom: {{textSpacing}};">{{subtitle}}</p>
        <a href="{{buttonLink}}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: rgba(255,255,255,0.2); color: {{buttonColor}}; padding: 1rem 2rem; border-radius: 8px; text-decoration: none; display: inline-block; border: 2px solid rgba(255,255,255,0.3); transition: all 0.3s ease;">{{buttonText}}</a>
    </div>
</section>`,
    properties: {
        title: 'Compliance & Security Excellence',
        titleColor: '#FFFFFF',
        subtitle: 'Professionelle L√∂sungen f√ºr Ihre Compliance-Anforderungen',
        subtitleColor: '#FFFFFF',
        buttonText: 'Jetzt Beratung anfragen',
        buttonColor: '#FFFFFF',
        buttonLink: '#kontakt',
        iconClass: '&#xf132;',
        iconColor: '#FFFFFF',
        backgroundImage: '',
        backgroundColor: 'linear-gradient(135deg, #063AA8, #009CE6)',
        sectionSpacing: '6rem 0',
        iconSpacing: '1.5rem',
        titleSpacing: '1rem',
        textSpacing: '2rem'
    }
},

,
{
    id: 'kerberos-company-presentation',
    name: 'Company Presentation',
    category: 'Team & About',
    description: 'Unternehmensvorstellung mit Haupttext, Button und Statistiken im Grid-Layout',
    html: `<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}}; position: relative;" class="kerberos-company-presentation">
        <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
            <div style="display: grid; grid-template-columns: 1fr; gap: {{contentGap}}; align-items: center;">
                
                <!-- Hauptinhalt Container -->
                <div style="display: grid; grid-template-columns: 1fr 400px; gap: 3rem; align-items: center; margin-bottom: 4rem;">
                    <!-- Linke Seite: Text & Button -->
                    <div>
                        <h2 style="font-family: var(--heading-font-font-family); font-size: var(--heading-2-size); font-weight: var(--heading-font-font-weight); color: {{titleColor}}; margin: 0 0 1.5rem 0; line-height: 1.2;">
                            {{title}}
                        </h2>
                        
                        <div style="color: {{textColor}}; font-size: 1.1rem; line-height: 1.6; margin-bottom: 2rem;">
                            {{description}}
                        </div>
                        
                        <a href="{{buttonLink}}" style="display: inline-flex; align-items: center; gap: 0.5rem; background: {{buttonBgColor}}; color: {{buttonTextColor}}; padding: 0.75rem 2rem; border-radius: 4px; text-decoration: none; font-weight: 500; transition: all 0.3s ease;">
                            {{buttonText}}
                        </a>
                    </div>
                    
                    <!-- Rechte Seite: Bild oder Shape -->
                    {{rightSideContent}}
                </div>
                
                <!-- Statistiken Grid -->
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 2rem;">
                    
                    <!-- Statistik 1 -->
                    <div style="display: grid; grid-template-columns: auto 1fr; gap: 1rem; align-items: start;">
                        <div style="width: 4px; background: {{primaryColor}}; height: 80px; border-radius: 2px; margin-top: 0.5rem;"></div>
                        <div>
                            <div style="font-family: var(--heading-font-font-family); font-size: 1.4rem; font-weight: 700; color: {{primaryColor}}; margin-bottom: 0.5rem;">
                                {{stat1Value}}
                            </div>
                            <div style="color: {{textColor}}; font-weight: 600; font-size: 0.9rem;">
                                {{stat1Description}}
                            </div>
                        </div>
                    </div>
                    
                    <!-- Statistik 2 -->
                    <div style="display: grid; grid-template-columns: auto 1fr; gap: 1rem; align-items: start;">
                        <div style="width: 4px; background: {{primaryColor}}; height: 80px; border-radius: 2px; margin-top: 0.5rem;"></div>
                        <div>
                            <div style="font-family: var(--heading-font-font-family); font-size: 1.4rem; font-weight: 700; color: {{primaryColor}}; margin-bottom: 0.5rem;">
                                {{stat2Value}}
                            </div>
                            <div style="color: {{textColor}}; font-weight: 600; font-size: 0.9rem;">
                                {{stat2Description}}
                            </div>
                        </div>
                    </div>
                    
                    <!-- Statistik 3 -->
                    <div style="display: grid; grid-template-columns: auto 1fr; gap: 1rem; align-items: start;">
                        <div style="width: 4px; background: {{primaryColor}}; height: 80px; border-radius: 2px; margin-top: 0.5rem;"></div>
                        <div>
                            <div style="font-family: var(--heading-font-font-family); font-size: 1.4rem; font-weight: 700; color: {{primaryColor}}; margin-bottom: 0.5rem;">
                                {{stat3Value}}
                            </div>
                            <div style="color: {{textColor}}; font-weight: 600; font-size: 0.9rem;">
                                {{stat3Description}}
                            </div>
                        </div>
                    </div>
                    
                    <!-- Statistik 4 -->
                    <div style="display: grid; grid-template-columns: auto 1fr; gap: 1rem; align-items: start;">
                        <div style="width: 4px; background: {{primaryColor}}; height: 80px; border-radius: 2px; margin-top: 0.5rem;"></div>
                        <div>
                            <div style="font-family: var(--heading-font-font-family); font-size: 1.4rem; font-weight: 700; color: {{primaryColor}}; margin-bottom: 0.5rem;">
                                {{stat4Value}}
                            </div>
                            <div style="color: {{textColor}}; font-weight: 600; font-size: 0.9rem;">
                                {{stat4Description}}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Mobile Responsive Styles -->
        <style>
            @media (max-width: 768px) {
                .kerberos-company-presentation div[style*="grid-template-columns: 1fr 400px"] {
                    grid-template-columns: 1fr !important;
                    gap: 2rem !important;
                }
                .kerberos-company-presentation div[style*="height: 300px"] {
                    height: 200px !important;
                    order: -1;
                }
                .kerberos-company-presentation div[style*="repeat(auto-fit, minmax(250px, 1fr))"] {
                    grid-template-columns: 1fr !important;
                    gap: 1.5rem !important;
                }
            }
        </style>
    </section>`,
    properties: {
        // Hauptinhalt
        title: 'Geldw√§sche-Compliance f√ºr alle seit 2017',
        titleColor: '#063AA8',
        description: 'Seit 2017 ist es unsere Aufgabe, die Anforderungen des Geldw√§schegesetz f√ºr alle umsetzbar zu machen. Wir beraten und unterst√ºtzen Unternehmen nicht nur mit fachlicher Expertise, sondern bauen zudem unser Angebot technischer und standardisierter L√∂sungen stetig aus.<br><br>Als einer der gr√∂√üten Dienstleister f√ºr Anti-Geldw√§sche Compliance Deutschlands tragen wir ma√ügeblich dazu bei, <strong>Compliance f√ºr alle</strong> zu erm√∂glichen.',
        textColor: '#212529',

        // Zu den bestehenden Properties hinzuf√ºgen:
        imageUrl: '',
        imageAlt: 'Unternehmensbild',
        showImage: 'false',
        
        // Button
        buttonText: '√úber uns',
        buttonLink: '/unternehmen/ueber-uns',
        buttonBgColor: '#063AA8',
        buttonTextColor: '#FFFFFF',
        
        // Design
        backgroundColor: '#FFFFFF',
        primaryColor: '#063AA8',
        shapeColor: 'hsla(226, 94%, 34%, 0.14)',
        sectionSpacing: '6rem 0',
        contentGap: '3rem',
        
        // Statistiken
        stat1Value: 'Alle Branchen',
        stat1Description: 'Unsere Kunden stammen aus allen verpflichteten Branchen',
        
        stat2Value: '1.000+',
        stat2Description: 'Erfolgreich abgeschlossene Beh√∂rdenvorg√§nge',
        
        stat3Value: '60+',
        stat3Description: 'Mitarbeiterinnen und Mitarbeiter',
        
        stat4Value: 'Zertifiziert',
        stat4Description: 'Nach den Standards ISO 37301, ISO 27001 und ISO 27701'
    }
},

{
    id: 'kerberos-testimonials-pro',
    name: 'Testimonials Professional',
    category: 'Content & Images', 
    description: 'Professionelles Testimonial-Modul mit Logos und Links f√ºr bis zu 15 Kundenbewertungen',
    html: `<style>
/* Kerberos Professional Testimonials - Responsive & Feature-rich */
.kerberos-testimonials-pro-container {
    max-width: 100%;
    overflow: hidden;
    position: relative;
    background: {{containerBackground}};
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 10px 40px rgba(6,58,168,0.08);
}

.kerberos-testimonials-pro-track {
    display: flex;
    transition: transform 0.7s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    width: fit-content;
}

.testimonial-pro-slide {
    flex: 0 0 100%;
    max-width: 100%;
    box-sizing: border-box;
    padding: 0 1rem;
}

.testimonial-pro-content {
    background: {{cardBackground}};
    border-radius: 16px;
    padding: 2.5rem;
    text-align: center;
    box-shadow: 0 12px 48px rgba(6,58,168,0.12);
    height: 100%;
    min-height: 420px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    border: 1px solid rgba(6,58,168,0.08);
    position: relative;
    overflow: hidden;
}

.testimonial-pro-content::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, {{primaryColor}}, {{accentColor}});
}

.testimonial-quote-section {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    margin-bottom: 2rem;
    position: relative;
}

.quote-icon {
    font-family: 'Font Awesome 5 Pro';
    font-size: 2.5rem;
    color: {{quoteIconColor}};
    opacity: 0.3;
    position: absolute;
    top: -1rem;
    left: 50%;
    transform: translateX(-50%);
}

.testimonial-rating {
    display: flex;
    justify-content: center;
    gap: 0.25rem;
    margin-bottom: 1.5rem;
    font-size: 1.2rem;
}

.testimonial-text {
    font-family: var(--body-font-font-family, Arial, sans-serif);
    font-size: 1.1rem;
    line-height: 1.7;
    color: {{textColor}};
    margin: 1.5rem 0;
    font-style: italic;
    position: relative;
    z-index: 1;
}

.testimonial-author-section {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1.25rem;
    margin-top: auto;
    padding-top: 1.5rem;
    border-top: 1px solid rgba(6,58,168,0.1);
}

.author-avatar-pro {
    width: 70px;
    height: 70px;
    border-radius: 50%;
    flex-shrink: 0;
    border: 3px solid {{primaryColor}};
    box-shadow: 0 4px 12px rgba(6,58,168,0.2);
}

.author-info-pro {
    text-align: left;
    min-width: 0;
    flex: 1;
}

.author-name {
    font-family: var(--heading-font-font-family, Arial, sans-serif);
    font-weight: 600;
    color: {{authorColor}};
    margin-bottom: 0.25rem;
    font-size: 1rem;
}

.author-position {
    font-size: 0.9rem;
    color: {{subtitleColor}};
    margin-bottom: 0.5rem;
}

.author-company {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.company-logo {
    height: 24px;
    width: auto;
    max-width: 80px;
    object-fit: contain;
    opacity: 0.8;
    transition: opacity 0.3s ease;
}

.company-name {
    font-size: 0.85rem;
    color: {{companyColor}};
    text-decoration: none;
    transition: color 0.3s ease;
    font-weight: 500;
}

.company-name:hover {
    color: {{primaryColor}};
    text-decoration: underline;
}

.nav-button-pro {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: {{primaryColor}};
    color: white;
    border: none;
    width: 56px;
    height: 56px;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 6px 20px rgba(6,58,168,0.25);
    transition: all 0.3s ease;
    z-index: 20;
    font-family: 'Font Awesome 5 Pro';
    font-size: 1.3rem;
}

.nav-button-pro:hover {
    background: {{accentColor}};
    transform: translateY(-50%) scale(1.1);
    box-shadow: 0 8px 24px rgba(6,58,168,0.35);
}

.nav-prev-pro { left: -28px; }
.nav-next-pro { right: -28px; }

.testimonial-dots-pro {
    display: flex;
    justify-content: center;
    gap: 0.75rem;
    margin-top: 2.5rem;
}

.testimonial-dot-pro {
    width: 14px;
    height: 14px;
    border-radius: 50%;
    border: 2px solid {{primaryColor}};
    background: transparent;
    cursor: pointer;
    transition: all 0.4s ease;
    position: relative;
}

.testimonial-dot-pro.active {
    background: {{primaryColor}};
    transform: scale(1.2);
    box-shadow: 0 0 0 4px rgba(6,58,168,0.2);
}

.testimonial-counter {
    text-align: center;
    margin-top: 1.5rem;
    font-size: 0.9rem;
    color: {{subtitleColor}};
    font-weight: 500;
}

/* Desktop Optimierungen */
@media (min-width: 769px) {
    .testimonial-pro-content {
        padding: 3rem;
        min-height: 460px;
    }
    
    .testimonial-text {
        font-size: 1.2rem;
        line-height: 1.8;
    }
    
    .author-avatar-pro {
        width: 80px;
        height: 80px;
    }
    
    .nav-button-pro {
        width: 60px;
        height: 60px;
        font-size: 1.4rem;
    }
    
    .nav-prev-pro { left: -30px; }
    .nav-next-pro { right: -30px; }
}

/* Tablet Responsive */
@media (max-width: 768px) {
    .kerberos-testimonials-pro-container {
        padding: 1.5rem;
    }
    
    .testimonial-pro-content {
        padding: 2rem;
        min-height: 380px;
    }
    
    .nav-button-pro {
        width: 48px;
        height: 48px;
        font-size: 1.1rem;
    }
    
    .nav-prev-pro { left: -24px; }
    .nav-next-pro { right: -24px; }
    
    .testimonial-author-section {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }
    
    .author-info-pro {
        text-align: center;
    }
    
    .author-company {
        justify-content: center;
    }
    
    .testimonial-text {
        font-size: 1.05rem;
    }
}

/* Mobile Responsive */
@media (max-width: 480px) {
    .kerberos-testimonials-pro-container {
        padding: 1rem;
        margin: 0 -1rem;
    }
    
    .testimonial-pro-content {
        padding: 1.5rem;
        min-height: 320px;
    }
    
    .nav-button-pro {
        display: none;
    }
    
    .testimonial-pro-slide {
        padding: 0 0.5rem;
    }
    
    .testimonial-text {
        font-size: 1rem;
        line-height: 1.6;
    }
    
    .author-avatar-pro {
        width: 60px;
        height: 60px;
    }
    
    .quote-icon {
        font-size: 2rem;
    }
    
    .company-logo {
        height: 20px;
        max-width: 60px;
    }
    
    section[class*="kerberos-module"] {
        padding: 4rem 0 !important;
    }
    
    section[class*="kerberos-module"] > div {
        padding: 0 1rem !important;
    }
}

/* Ultra-small screens */
@media (max-width: 360px) {
    .testimonial-pro-content {
        padding: 1rem;
        min-height: 300px;
    }
    
    .testimonial-text {
        font-size: 0.95rem;
    }
    
    .author-avatar-pro {
        width: 50px;
        height: 50px;
    }
    
    .testimonial-dots-pro {
        gap: 0.5rem;
        margin-top: 2rem;
    }
    
    .testimonial-dot-pro {
        width: 12px;
        height: 12px;
    }
}

/* Accessibility & Interactivity */
.nav-button-pro:focus {
    outline: 3px solid {{primaryColor}};
    outline-offset: 2px;
}

.testimonial-dot-pro:focus {
    outline: 2px solid {{primaryColor}};
    outline-offset: 2px;
}

/* Loading State */
.testimonials-loading {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 400px;
    color: {{subtitleColor}};
}

/* Empty State */
.testimonials-empty {
    text-align: center;
    padding: 3rem;
    color: {{subtitleColor}};
}

.testimonials-empty h3 {
    margin-bottom: 1rem;
    color: {{titleColor}};
}
</style>

<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}};" class="kerberos-module-{{templateId}}">
    <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
        <div style="text-align: center; margin-bottom: 3rem;">
            <h2 style="font-family: var(--heading-font-font-family); font-size: var(--heading-2-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}}; margin: 0 0 1rem 0;">{{title}}</h2>
            <p style="font-family: var(--body-font-font-family); font-size: var(--normal-text-size); line-height: var(--body-font-line-height); color: {{subtitleColor}}; max-width: 600px; margin: 0 auto;">{{subtitle}}</p>
        </div>
        
        <div class="kerberos-testimonials-pro-container">
            <div class="kerberos-testimonials-pro-track">
                {{testimonialSlides}}
            </div>
            
            <button class="nav-button-pro nav-prev-pro" aria-label="Vorheriges Testimonial">
                &#xf060;
            </button>
            <button class="nav-button-pro nav-next-pro" aria-label="N√§chstes Testimonial">
                &#xf061;
            </button>
        </div>
        
        <div class="testimonial-dots-pro">
            {{navigationDots}}
        </div>
        
        <div class="testimonial-counter">
            {{currentSlide}} von {{totalSlides}}
        </div>
    </div>
</section>`,
    properties: {
        title: 'Was unsere Kunden sagen',
        titleColor: '#063AA8',
        subtitle: 'Vertrauen Sie auf die Erfahrungen von √ºber 500 zufriedenen Kunden aus verschiedenen Branchen',
        subtitleColor: '#6c757d',
        backgroundColor: '#F8F9FA',
        containerBackground: '#FFFFFF',
        cardBackground: '#FFFFFF',
        sectionSpacing: '6rem 0',
        
        primaryColor: '#063AA8',
        accentColor: '#009CE6', 
        quoteIconColor: '#063AA8',
        textColor: '#212529',
        authorColor: '#063AA8',
        companyColor: '#6c757d',
        
        // Testimonial 1
        testimonial1Text: 'Kerberos hat unsere Compliance-Prozesse revolutioniert. Was fr√ºher Wochen dauerte, erledigen wir jetzt in Minuten. Eine Investition, die sich bereits nach wenigen Monaten amortisiert hat.',
        testimonial1Author: 'Dr. Michael Schmidt',
        testimonial1Position: 'Gesch√§ftsf√ºhrer',
        testimonial1Company: 'FinTech Solutions GmbH',
        testimonial1CompanyLogo: 'https://images.unsplash.com/photo-1549923746-c502d488b3ea?w=80&h=40&fit=crop',
        testimonial1CompanyLink: 'https://www.fintech-solutions.de',
        testimonial1Rating: '5',
        testimonial1Image: '',
        testimonial1Active: 'true',
        
        // Testimonial 2  
        testimonial2Text: 'Die beste Investition f√ºr unser Unternehmen. Endlich haben wir Rechtssicherheit und k√∂nnen uns aufs Kerngesch√§ft konzentrieren. Der Support ist hervorragend.',
        testimonial2Author: 'Sarah Weber',
        testimonial2Position: 'Compliance Officer',
        testimonial2Company: 'Real Estate Partners',
        testimonial2CompanyLogo: 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=80&h=40&fit=crop',
        testimonial2CompanyLink: 'https://www.realestate-partners.com',
        testimonial2Rating: '5',
        testimonial2Image: '',
        testimonial2Active: 'true',
        
        // Testimonial 3
        testimonial3Text: 'Hervorragender Support und eine Plattform, die wirklich funktioniert. Kerberos versteht die Bed√ºrfnisse von KMUs perfekt.',
        testimonial3Author: 'Thomas M√ºller',
        testimonial3Position: 'CFO',
        testimonial3Company: 'TechStart Industries',
        testimonial3CompanyLogo: 'https://images.unsplash.com/photo-1572021335469-31706a17aaef?w=80&h=40&fit=crop',
        testimonial3CompanyLink: 'https://www.techstart.com',
        testimonial3Rating: '5',
        testimonial3Image: '',
        testimonial3Active: 'true',
        
        // Testimonial 4
        testimonial4Text: 'Die Automatisierung hat uns enorm geholfen. Compliance ist jetzt kein Stressfaktor mehr, sondern l√§uft im Hintergrund.',
        testimonial4Author: 'Julia Schneider',
        testimonial4Position: 'Gesch√§ftsf√ºhrerin',
        testimonial4Company: 'Green Energy Solutions',
        testimonial4CompanyLogo: 'https://images.unsplash.com/photo-1473091534298-04dcbce3278c?w=80&h=40&fit=crop',
        testimonial4CompanyLink: 'https://www.green-energy.de',
        testimonial4Rating: '5',
        testimonial4Image: '',
        testimonial4Active: 'true',
        
        // Testimonial 5
        testimonial5Text: 'Professionell, zuverl√§ssig und effizient. Kerberos hat unsere Erwartungen √ºbertroffen und wird dauerhaft Teil unserer Infrastruktur bleiben.',
        testimonial5Author: 'Robert K√∂nig',
        testimonial5Position: 'Legal Director',
        testimonial5Company: 'Manufacturing Excellence',
        testimonial5CompanyLogo: 'https://images.unsplash.com/photo-1454165804606-c3d57bc86b40?w=80&h=40&fit=crop',
        testimonial5CompanyLink: 'https://www.manufacturing-excellence.com',
        testimonial5Rating: '5',
        testimonial5Image: '',
        testimonial5Active: 'true',
        
        // Weitere Testimonials 6-15 (inactive by default)
        testimonial6Text: '',
        testimonial6Author: '',
        testimonial6Position: '',
        testimonial6Company: '',
        testimonial6CompanyLogo: '',
        testimonial6CompanyLink: '',
        testimonial6Rating: '5',
        testimonial6Image: '',
        testimonial6Active: 'false',
        
        testimonial7Text: '',
        testimonial7Author: '',
        testimonial7Position: '',
        testimonial7Company: '',
        testimonial7CompanyLogo: '',
        testimonial7CompanyLink: '',
        testimonial7Rating: '5',
        testimonial7Image: '',
        testimonial7Active: 'false',
        
        testimonial8Text: '',
        testimonial8Author: '',
        testimonial8Position: '',
        testimonial8Company: '',
        testimonial8CompanyLogo: '',
        testimonial8CompanyLink: '',
        testimonial8Rating: '5',
        testimonial8Image: '',
        testimonial8Active: 'false',
        
        testimonial9Text: '',
        testimonial9Author: '',
        testimonial9Position: '',
        testimonial9Company: '',
        testimonial9CompanyLogo: '',
        testimonial9CompanyLink: '',
        testimonial9Rating: '5',
        testimonial9Image: '',
        testimonial9Active: 'false',
        
        testimonial10Text: '',
        testimonial10Author: '',
        testimonial10Position: '',
        testimonial10Company: '',
        testimonial10CompanyLogo: '',
        testimonial10CompanyLink: '',
        testimonial10Rating: '5',
        testimonial10Image: '',
        testimonial10Active: 'false',
        
        testimonial11Text: '',
        testimonial11Author: '',
        testimonial11Position: '',
        testimonial11Company: '',
        testimonial11CompanyLogo: '',
        testimonial11CompanyLink: '',
        testimonial11Rating: '5',
        testimonial11Image: '',
        testimonial11Active: 'false',
        
        testimonial12Text: '',
        testimonial12Author: '',
        testimonial12Position: '',
        testimonial12Company: '',
        testimonial12CompanyLogo: '',
        testimonial12CompanyLink: '',
        testimonial12Rating: '5',
        testimonial12Image: '',
        testimonial12Active: 'false',
        
        testimonial13Text: '',
        testimonial13Author: '',
        testimonial13Position: '',
        testimonial13Company: '',
        testimonial13CompanyLogo: '',
        testimonial13CompanyLink: '',
        testimonial13Rating: '5',
        testimonial13Image: '',
        testimonial13Active: 'false',
        
        testimonial14Text: '',
        testimonial14Author: '',
        testimonial14Position: '',
        testimonial14Company: '',
        testimonial14CompanyLogo: '',
        testimonial14CompanyLink: '',
        testimonial14Rating: '5',
        testimonial14Image: '',
        testimonial14Active: 'false',
        
        testimonial15Text: '',
        testimonial15Author: '',
        testimonial15Position: '',
        testimonial15Company: '',
        testimonial15CompanyLogo: '',
        testimonial15CompanyLink: '',
        testimonial15Rating: '5',
        testimonial15Image: '',
        testimonial15Active: 'false'
    }
},
            {
                id: 'kerberos-team-gallery',
                name: 'Team Galerie',
                category: 'Team & About',
                description: 'Mitarbeiter-Galerie mit Bildern und Fallback-Avatars',
                html: `<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}};">
                    <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
                        <div style="text-align: center; margin-bottom: {{titleSpacing}};">
                            <h2 style="font-family: var(--heading-font-font-family); font-size: var(--heading-2-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}}; margin: 0 0 1rem 0;">{{title}}</h2>
                            <p style="font-family: var(--body-font-font-family); font-size: var(--normal-text-size); line-height: var(--body-font-line-height); color: {{subtitleColor}}; max-width: 600px; margin: 0 auto;">{{subtitle}}</p>
                        </div>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: {{teamGap}}; max-width: {{maxColumns}};">
                            {{teamMembers}}
                        </div>
                    </div>
                </section>`,
                properties: {
                    title: 'Unser Expertenteam',
                    titleColor: '#063AA8',
                    titleSpacing: '3rem',
                    subtitle: 'Professionelle Compliance-Beratung von erfahrenen Spezialisten',
                    subtitleColor: '#6c757d',
                    backgroundColor: '#FFFFFF',
                    sectionSpacing: '6rem 0',
                    teamGap: '2rem',
                    cardPadding: '2rem',
                    avatarSize: '120px',
                    maxColumns: '1200px',
                    teamMemberCount: '2',
                    // Person 1
                    member1Name: 'Dr. Michael Kerberos',
                    member1Position: 'Senior Compliance Consultant',
                    member1Description: '√úber 15 Jahre Erfahrung in Geldw√§sche-Pr√§vention und Compliance-Management.',
                    member1Image: '',
                    member1InitialBg: 'linear-gradient(135deg, #063AA8, #009CE6)',
                    member1Active: 'true',
                    // Person 2
                    member2Name: 'Anna Schmidt',
                    member2Position: 'DSGVO & Datenschutz Spezialistin',
                    member2Description: 'Expertin f√ºr Datenschutzrecht und DSGVO-konforme Implementierungen.',
                    member2Image: '',
                    member2InitialBg: 'linear-gradient(135deg, #B265E9, #EF8646)',
                    member2Active: 'true',
                    // Person 3
                    member3Name: 'Thomas M√ºller',
                    member3Position: 'IT-Security Experte',
                    member3Description: 'Spezialist f√ºr Cybersecurity und technische Compliance-Implementierung.',
                    member3Image: '',
                    member3InitialBg: 'linear-gradient(135deg, #EF8646, #28a745)',
                    member3Active: 'false',
                    // Person 4
                    member4Name: 'Sarah Weber',
                    member4Position: 'Legal Consultant',
                    member4Description: 'Rechtsanw√§ltin mit Fokus auf Compliance und Unternehmensrecht.',
                    member4Image: '',
                    member4InitialBg: 'linear-gradient(135deg, #28a745, #063AA8)',
                    member4Active: 'false',
                    // Styling
                    nameColor: '#212529',
                    positionColor: '#6c757d',
                    descriptionColor: '#6c757d'
                }
            },
            {
                id: 'kerberos-stats',
                name: 'Statistiken mit Icons',
                category: 'Statistics & Numbers',
                description: 'Zahlen und Fakten mit anpassbaren Icons und Abst√§nden',
                html: `<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}};">
                <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
                    <div style="text-align: center; margin-bottom: {{titleSpacing}};">
                        <h2 style="font-family: var(--heading-font-font-family); font-size: var(--heading-2-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}}; margin: 0;">{{title}}</h2>
                    </div>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax({{statMinWidth}}, 1fr)); gap: {{statsGap}};">
                        {{statsBlocks}}
                    </div>
                </div>
            </section>`,
properties: {
    title: 'Unsere Erfolge in Zahlen',
    titleColor: '#063AA8',
    titleSpacing: '3rem',
    sectionSpacing: '6rem 0',
    backgroundColor: '#FFFFFF',
    statsGap: '2rem',
    statMinWidth: '250px',
    statPadding: '1rem',
    iconSize: 'var(--large-text-size)',
    iconSpacing: '1rem',
    numberSize: 'var(--heading-1-size)',
    numberSpacing: '0.5rem',
    textSize: 'var(--normal-text-size)',
    stat1Number: '500+',
    stat1Text: 'Zufriedene Kunden',
    stat1Icon: '&#xf0c0;',
    stat1IconColor: '#063AA8',
    stat1NumberColor: '#063AA8',
    stat1TextColor: '#6c757d',
    stat2Number: '15+',
    stat2Text: 'Jahre Erfahrung',
    stat2Icon: '&#xf559;',
    stat2IconColor: '#009CE6',
    stat2NumberColor: '#009CE6',
    stat2TextColor: '#6c757d',
    stat3Number: '99%',
    stat3Text: 'Erfolgsquote',
    stat3Icon: '&#xf005;',
    stat3IconColor: '#B265E9',
    stat3NumberColor: '#B265E9',
    stat3TextColor: '#6c757d',
    stat4Number: '24/7',
    stat4Text: 'Support',
    stat4Icon: '&#xf590;',
    stat4IconColor: '#EF8646',
    stat4NumberColor: '#EF8646',
    stat4TextColor: '#6c757d'
     }
    },
    {
        id: 'kerberos-image-text',
        name: 'Bild-Text Kombination',
        description: 'Kombination aus Bild und Text mit Icon und Button',
        category: 'Content & Images',
        html: `<section style="background: {{backgroundColor}}; padding: {{sectionSpacing}};">
        <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
            {{layoutContent}}
        </div>
    </section>`,
        properties: {
            title: 'Professionelle Compliance-L√∂sungen',
            titleColor: '#063AA8',
            text: 'Wir unterst√ºtzen Sie bei der Umsetzung aller Compliance-Anforderungen. Von der Erstberatung bis zur vollst√§ndigen Implementierung stehen wir Ihnen zur Seite.',
            textColor: '#6c757d',
            buttonText: 'Mehr erfahren',
            buttonLink: '#',
            buttonBgColor: '#063AA8',
            buttonTextColor: '#FFFFFF',
            imageUrl: '',
            imageAlt: 'Compliance Beratung',
            iconClass: '&#xf132;',
            iconColor: '#063AA8',
            backgroundColor: '#FFFFFF',
            layoutType: 'image-left',
            sectionSpacing: '6rem 0',
            contentGap: '4rem'
        }
    },
            // Moderne Module aus Artifact integrieren
            {
                id: 'kerberos-image-text-modern',
                name: 'Modernes Bild-Text Layout',
                category: 'Content & Images',
                description: 'Vollst√§ndig responsives Bild-Text Layout mit modernen Design-Elementen',
                html: `<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}};">
                <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: {{contentGap}}; align-items: center; min-height: 400px;">
                        <div style="order: {{imageOrder}};">
                            <div style="position: relative; overflow: hidden; border-radius: {{imageRadius}}; box-shadow: {{imageShadow}};">
                                <img src="{{imageUrl}}" alt="{{imageAlt}}" style="width: 100%; height: {{imageHeight}}; object-fit: {{imageObjectFit}}; object-position: {{imageObjectPosition}}; display: block; margin: 0; line-height: 0; {{imageCustomCSS}}">
                            </div>
                        </div>
                        <div style="order: {{textOrder}}; padding: {{contentPadding}};">
                            <div style="margin-bottom: {{iconSpacing}};">
                                <div style="font-family: 'Font Awesome 5 Pro'; font-size: {{iconSize}}; color: {{iconColor}}; display: inline-flex; align-items: center; justify-content: center; width: {{iconContainerSize}}; height: {{iconContainerSize}}; background: {{iconBackground}}; border-radius: {{iconRadius}};">{{iconClass}}</div>
                            </div>
                            <div style="margin-bottom: {{titleSpacing}};">
                                <h3 style="font-family: var(--heading-font-font-family); font-size: {{titleSize}}; font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}}; margin: 0;">{{title}}</h3>
                            </div>
                            <div style="margin-bottom: {{textSpacing}};">
                                <p style="font-family: var(--body-font-font-family); font-size: {{textSize}}; line-height: var(--body-font-line-height); color: {{textColor}}; margin: 0;">{{text}}</p>
                            </div>
                            <div style="margin-top: {{buttonSpacing}};">
                                <a href="{{buttonLink}}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: {{buttonBgColor}}; color: {{buttonTextColor}}; padding: {{buttonPadding}}; border-radius: {{buttonRadius}}; text-decoration: none; display: inline-flex; align-items: center; gap: 0.5rem; border: {{buttonBorder}}; box-shadow: {{buttonShadow}};">
                                    {{buttonText}}
                                    <span style="font-family: 'Font Awesome 5 Pro';">{{buttonIcon}}</span>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </section>`,
                properties: {
                    title: 'Professionelle Compliance-L√∂sungen',
                    titleColor: '#063AA8',
                    titleSize: 'var(--heading-2-size)',
                    titleSpacing: '1rem',
                    text: 'Wir unterst√ºtzen Sie bei der Umsetzung aller Compliance-Anforderungen. Von der Erstberatung bis zur vollst√§ndigen Implementierung stehen wir Ihnen zur Seite.',
                    textColor: '#6c757d',
                    textSize: 'var(--normal-text-size)',
                    textSpacing: '2rem',
                    buttonText: 'Mehr erfahren',
                    buttonLink: '#',
                    buttonBgColor: '#063AA8',
                    buttonTextColor: '#FFFFFF',
                    buttonPadding: '1rem 2rem',
                    buttonRadius: '8px',
                    buttonBorder: 'none',
                    buttonShadow: '0 4px 12px rgba(6,58,168,0.2)',
                    buttonSpacing: '2rem',
                    buttonIcon: '&#xf061;',
                    imageUrl: 'https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=500',
                    imageAlt: 'Compliance Beratung',
                    imageRadius: '12px',
                    imageShadow: '0 8px 32px rgba(6,58,168,0.15)',
                    imageHeight: 'auto',
                    imageObjectFit: 'cover',
                    imageObjectPosition: 'center',
                    imageCustomCSS: '',
                    iconClass: '&#xf132;',
                    iconColor: '#063AA8',
                    iconSize: '2rem',
                    iconBackground: 'rgba(6,58,168,0.1)',
                    iconRadius: '50%',
                    iconSpacing: '1rem',
                    iconContainerSize: '60px',
                    backgroundColor: '#FFFFFF',
                    imageOrder: '1',
                    textOrder: '2',
                    sectionSpacing: '6rem 0',
                    contentGap: '4rem',
                    contentPadding: '0'
                }
            },
            {
                id: 'kerberos-cta-modern',
                name: 'Moderne Call-to-Action',
                category: 'Contact & CTA',
                description: 'Moderne CTA-Sektion mit Gradient-Hintergrund und animierten Elementen',
                html: `<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}}; position: relative; overflow: hidden;">
    <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: {{backgroundPattern}}; opacity: 0.05;"></div>
    <div style="max-width: 1000px; margin: 0 auto; padding: 0 2rem; text-align: center; position: relative; z-index: 2;">
        <div style="margin-bottom: {{iconSpacing}};">
            <div style="font-family: 'Font Awesome 5 Pro'; font-size: {{iconSize}}; color: {{iconColor}}; display: inline-flex; align-items: center; justify-content: center; width: {{iconContainerSize}}; height: {{iconContainerSize}}; background: {{iconBackground}}; border-radius: {{iconRadius}}; box-shadow: {{iconShadow}};">{{iconClass}}</div>
        </div>
        <div style="margin-bottom: {{titleSpacing}};">
            <h2 style="font-family: var(--heading-font-font-family); font-size: {{titleSize}}; font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}}; margin: 0;">{{title}}</h2>
        </div>
        <div style="margin-bottom: {{textSpacing}};">
            <p style="font-family: var(--body-font-font-family); font-size: {{textSize}}; line-height: var(--body-font-line-height); color: {{textColor}}; margin: 0; max-width: 700px; margin-left: auto; margin-right: auto;">{{text}}</p>
        </div>
        <div style="display: flex; flex-wrap: wrap; gap: {{buttonGap}}; justify-content: center; margin-top: {{buttonSpacing}};">
            <a href="{{primaryButtonLink}}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: {{primaryButtonBg}}; color: {{primaryButtonColor}}; padding: {{primaryButtonPadding}}; border-radius: {{buttonRadius}}; text-decoration: none; display: inline-flex; align-items: center; gap: 0.75rem; border: {{primaryButtonBorder}}; transition: all 0.3s ease; box-shadow: {{primaryButtonShadow}}; font-size: {{buttonTextSize}};">
                {{primaryButtonText}}
                <span style="font-family: 'Font Awesome 5 Pro';">{{primaryButtonIcon}}</span>
            </a>
            <a href="{{secondaryButtonLink}}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: {{secondaryButtonBg}}; color: {{secondaryButtonColor}}; padding: {{secondaryButtonPadding}}; border-radius: {{buttonRadius}}; text-decoration: none; display: inline-flex; align-items: center; gap: 0.75rem; border: {{secondaryButtonBorder}}; transition: all 0.3s ease; box-shadow: {{secondaryButtonShadow}}; font-size: {{buttonTextSize}};">
                {{secondaryButtonText}}
                <span style="font-family: 'Font Awesome 5 Pro';">{{secondaryButtonIcon}}</span>
            </a>
        </div>
    </div>
</section>`,
                properties: {
                    title: 'Bereit f√ºr professionelle Compliance?',
                    titleColor: '#FFFFFF',
                    titleSize: 'var(--heading-1-size)',
                    titleSpacing: '1.5rem',
                    text: 'Lassen Sie uns gemeinsam Ihre Compliance-Herausforderungen meistern. Kontaktieren Sie unser Expertenteam f√ºr eine kostenlose Erstberatung.',
                    textColor: 'rgba(255,255,255,0.9)',
                    textSize: 'var(--normal-text-size)',
                    textSpacing: '3rem',
                    iconClass: '&#xf0e0;',
                    iconColor: '#FFFFFF',
                    iconSize: '4rem',
                    iconPadding: '2rem',
                    iconBackground: 'rgba(255,255,255,0.1)',
                    iconRadius: '50%',
                    iconShadow: '0 8px 32px rgba(255,255,255,0.1)',
                    iconSpacing: '2rem',
                    primaryButtonText: 'Kostenlose Beratung',
                    primaryButtonLink: '#kontakt',
                    primaryButtonBg: '#FFFFFF',
                    primaryButtonColor: '#063AA8',
                    primaryButtonPadding: '1.25rem 2.5rem',
                    primaryButtonBorder: 'none',
                    primaryButtonShadow: '0 8px 32px rgba(255,255,255,0.2)',
                    primaryButtonIcon: '&#xf095;',
                    secondaryButtonText: 'Portfolio ansehen',
                    secondaryButtonLink: '#portfolio',
                    secondaryButtonBg: 'transparent',
                    secondaryButtonColor: '#FFFFFF',
                    secondaryButtonPadding: '1.25rem 2.5rem',
                    secondaryButtonBorder: '2px solid rgba(255,255,255,0.3)',
                    secondaryButtonShadow: 'none',
                    secondaryButtonIcon: '&#xf35d;',
                    buttonRadius: '12px',
                    buttonTextSize: '1.1rem',
                    buttonSpacing: '3rem',
                    buttonGap: '1rem',
                    sectionSpacing: '8rem 0',
                    backgroundColor: 'linear-gradient(135deg, #063AA8, #009CE6)',
                    backgroundPattern: 'radial-gradient(circle at 20% 20%, rgba(255,255,255,0.1) 0%, transparent 50%)'
                }
            },

            {
    id: 'kerberos-warning-facts',
    name: 'Warnungs-Modul mit Fakten',
    category: 'Content & Services',
    description: 'Aufmerksamkeitsstarkes Modul mit Hauptmeldung, Statistiken und Call-to-Action',
    html: `<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}}; position: relative; overflow: hidden;" class="kerberos-warning-module">
        <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: url('{{backgroundImage}}') center/cover; opacity: {{backgroundOpacity}};" class="background-overlay"></div>
        <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem; position: relative; z-index: 2;">
            <div style="text-align: center; margin-bottom: {{contentGap}};">
                <h2 style="font-family: var(--heading-font-font-family); font-size: var(--heading-2-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}}; margin-bottom: {{titleSpacing}}; text-align: center;">
                    <span style="background: linear-gradient(180deg, transparent 70%, {{highlightColor}} 70%); padding: 0 0.2rem;">{{titleLine1}}</span><br>
                    <span style="background: linear-gradient(180deg, transparent 70%, {{highlightColor}} 70%); padding: 0 0.2rem;">{{titleLine2}}</span>
                </h2>
                <h3 style="font-family: var(--heading-font-font-family); font-size: var(--heading-3-size); font-weight: var(--heading-font-font-weight); color: {{subtitleColor}}; margin-bottom: {{subtitleSpacing}}; text-align: center;">
                    <strong>{{subtitle}}</strong>
                </h3>
                <div style="margin: {{buttonSpacing}}; text-align: center;">
                    <a href="{{buttonLink}}" style="display: inline-block; font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: {{buttonBgColor}}; color: {{buttonTextColor}}; padding: 1rem 2rem; border-radius: {{buttonRadius}}; text-decoration: none; border: none; cursor: pointer; transition: all 0.3s ease; box-shadow: {{buttonShadow}};">{{buttonText}}</a>
                </div>
            </div>
            {{factsContent}}
        </div>
    </section>`,
    properties: {
        titleLine1: "Wissen Sie nicht,",
        titleLine2: "was Sie tun m√ºssen?",
        titleColor: "#FFFFFF",
        titleSpacing: "1rem",
        highlightColor: "rgba(138, 43, 226, 0.4)",
        
        subtitle: "Sprechen Sie jetzt mit unseren Expert:innen.",
        subtitleColor: "#FFFFFF",
        subtitleSpacing: "2rem",
        
        buttonText: "Kostenfreie Beratung",
        buttonLink: "/unternehmen/kontakt",
        buttonBgColor: "rgba(255,255,255,0.9)",
        buttonTextColor: "#063AA8",
        buttonRadius: "6px",
        buttonShadow: "0 4px 12px rgba(0,0,0,0.15)",
        buttonSpacing: "2rem 0",
        
        backgroundColor: "#1a1a1a",
        backgroundImage: "",
        backgroundOpacity: "0.15",
        
        sectionSpacing: "6rem 0",
        contentGap: "3rem",
        factsSpacing: "4rem",
        factsGap: "2rem",
        
        lineColor: "#8A2BE2",
        factNumberSize: "1.8rem",
        factNumberColor: "#8A2BE2",
        factTextSize: "1rem",
        factTextColor: "#FFFFFF",
        
        fact1Number: "100+ Mrd. ‚Ç¨",
        fact1Description: "Werden pro Jahr in Deutschland gewaschen",
        fact1Active: "true",
        
        fact2Number: "30+ √Ñnderungen",
        fact2Description: "im Geldw√§schegesetz seit 2007",
        fact2Active: "true",
        
        fact3Number: "Bis zu 1 Mio. ‚Ç¨ Bu√ügeld",
        fact3Description: "bei Verst√∂√üen gegen das Geldw√§schegesetz m√∂glich",
        fact3Active: "true",
        
        fact4Number: "95% der Unternehmen",
        fact4Description: "haben keine vollst√§ndige Compliance-Strategie",
        fact4Active: "false",
        
        fact5Number: "24/7 √úberwachung",
        fact5Description: "durch Aufsichtsbeh√∂rden m√∂glich",
        fact5Active: "false",
        
        fact6Number: "50+ Pr√ºfpunkte",
        fact6Description: "m√ºssen regelm√§√üig kontrolliert werden",
        fact6Active: "false"
    },
    customized: true
},
            
            // Vorhandene Module beibehalten...
            {
                id: 'kerberos-hero',
                name: 'Kerberos Hero Section',
                category: 'Hero & Header',
                description: 'Hauptbereich mit Kerberos Branding',
                html: `<section style="background: {{backgroundColor}}; color: white; padding: {{sectionSpacing}}; text-align: center;">
                <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
                    <h1 style="font-family: var(--heading-font-font-family); font-size: var(--heading-1-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}}; margin-bottom: {{titleSpacing}};">{{title}}</h1>
                    <p style="font-family: var(--body-font-font-family); font-size: var(--large-text-size); line-height: var(--body-font-line-height); opacity: 0.9; color: {{subtitleColor}}; margin-bottom: {{buttonSpacing}};">{{subtitle}}</p>
                    <a href="{{buttonLink}}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: {{buttonBgColor}}; color: {{buttonTextColor}}; padding: {{buttonPadding}}; border-radius: {{buttonRadius}}; text-decoration: none; display: inline-block; border: {{buttonBorder}}; transition: all 0.3s ease;">{{buttonText}}</a>
                </div>
            </section>`,
                properties: {
                    title: 'Compliance & Security Excellence',
                    titleColor: '#FFFFFF',
                    titleSpacing: '1rem',
                    subtitle: 'Professionelle L√∂sungen f√ºr Ihre Compliance-Anforderungen',
                    subtitleColor: '#FFFFFF',
                    buttonText: 'Jetzt Beratung anfragen',
                    buttonLink: '#kontakt',
                    buttonBgColor: 'rgba(255,255,255,0.2)',
                    buttonTextColor: '#FFFFFF',
                    buttonPadding: '1rem 2rem',
                    buttonRadius: '8px',
                    buttonBorder: '2px solid rgba(255,255,255,0.3)',
                    buttonSpacing: '2rem',
                    backgroundColor: 'linear-gradient(135deg, #063AA8, #009CE6)',
                    sectionSpacing: '6rem 0'
                }
            },

            

            
        ];

        // === NEUE PROZESSORFUNKTIONEN ===

        function processKerberosFAQ(module, html) {
            const props = module.properties;
            let faqItems = '';
            
            for (let i = 1; i <= 5; i++) {
                const question = props[`faq${i}Question`];
                const answer = props[`faq${i}Answer`];
                const isActive = props[`faq${i}Active`] === 'true';
                
                if (question && answer && isActive) {
                    faqItems += `
                        <div class="kerberos-faq-item" style="margin-bottom: 1rem; border: 1px solid ${props.borderColor}; border-radius: 8px; background: ${props.cardBackground}; transition: all 0.3s ease; cursor: pointer;">
                            <div class="faq-header" style="padding: 1.5rem; display: flex; justify-content: space-between; align-items: center;">
                                <h3 style="font-family: var(--heading-font-font-family); font-size: var(--heading-4-size); color: ${props.titleColor}; margin: 0; font-weight: 600;">${question}</h3>
                                <div class="faq-icon" style="font-family: 'Font Awesome 5 Pro'; font-size: 1.25rem; color: ${props.hoverColor}; transition: transform 0.3s ease;">&#xf067;</div>
                            </div>
                            <div class="faq-content" style="max-height: 0; overflow: hidden; transition: max-height 0.3s ease;">
                                <div style="padding: 0 1.5rem 1.5rem 1.5rem; color: ${props.subtitleColor}; line-height: 1.6;">${answer}</div>
                            </div>
                        </div>`;
                }
            }
            
            return html.replace('{{faqItems}}', faqItems);
        }

        // Erweiterte Testimonials Processor f√ºr bis zu 30 Testimonials
        function processKerberosTestimonialsExtended(module, html) {
            const props = module.properties;
            let testimonialSlides = '';
            let navigationDots = '';
            let slideCount = 0;
            
            for (let i = 1; i <= 30; i++) {
                const text = props[`testimonial${i}Text`];
                const author = props[`testimonial${i}Author`];
                const position = props[`testimonial${i}Position`];
                const company = props[`testimonial${i}Company`];
                const image = props[`testimonial${i}Image`];
                const rating = props[`testimonial${i}Rating`] || '5';
                const isActive = props[`testimonial${i}Active`] === 'true';
                
                if (text && author && isActive) {
                    const initial = author.charAt(0).toUpperCase();
                    const avatarStyle = image ? 
                        `background: url('${image}') center/cover;` : 
                        `background: linear-gradient(135deg, ${props.primaryColor || '#063AA8'}, #009CE6); display: flex; align-items: center; justify-content: center; color: white; font-size: 1.5rem; font-weight: 700;`;
                    
                    const stars = '‚òÖ'.repeat(parseInt(rating)) + '‚òÜ'.repeat(5 - parseInt(rating));
                    
                    testimonialSlides += `
                        <div class="testimonial-slide" style="flex: 0 0 100%; max-width: 100%; box-sizing: border-box; padding: 0 1rem;">
                            <div class="testimonial-content" style="background: ${props.cardBackground || '#FFFFFF'}; border-radius: 12px; padding: 2rem; text-align: center; box-shadow: 0 8px 32px rgba(6,58,168,0.1); height: 100%; min-height: 350px; display: flex; flex-direction: column; justify-content: space-between;">
                                <div class="testimonial-quote" style="flex: 1; display: flex; flex-direction: column; justify-content: center; margin-bottom: 2rem;">
                                    <div style="font-size: 1.5rem; color: ${props.starColor || '#FFD700'}; margin-bottom: 1.5rem;">${stars}</div>
                                    <blockquote style="font-family: 'Playfair Display', serif; font-size: 1.25rem; line-height: 1.6; color: ${props.textColor || '#212529'}; margin: 0; font-style: italic;">"${text}"</blockquote>
                                </div>
                                <div class="testimonial-author" style="display: flex; align-items: center; justify-content: center; gap: 1rem; margin-top: auto;">
                                    <div class="author-avatar" style="width: 60px; height: 60px; border-radius: 50%; flex-shrink: 0; ${avatarStyle}">${image ? '' : initial}</div>
                                    <div class="author-info" style="text-align: left; min-width: 0;">
                                        <div style="font-family: var(--heading-font-font-family, Arial, sans-serif); font-weight: 600; color: ${props.authorColor || '#063AA8'}; margin-bottom: 0.25rem;">${author}</div>
                                        <div style="font-size: 0.9rem; color: ${props.subtitleColor || '#6c757d'};">${position}</div>
                                        ${company ? `<div style="font-size: 0.85rem; color: ${props.subtitleColor || '#6c757d'}; opacity: 0.8;">${company}</div>` : ''}
                                    </div>
                                </div>
                            </div>
                        </div>`;
                    
                    navigationDots += `
                        <button class="testimonial-dot" style="width: 12px; height: 12px; border-radius: 50%; border: none; cursor: pointer; transition: all 0.3s ease; background: #DEE2E6;" data-slide="${slideCount}"></button>`;
                    
                    slideCount++;
                }
            }
            
            // Fallback f√ºr den Fall, dass keine aktiven Testimonials gefunden wurden
            if (slideCount === 0) {
                testimonialSlides = `
                    <div class="testimonial-slide" style="flex: 0 0 100%; max-width: 100%; box-sizing: border-box; padding: 0 1rem;">
                        <div class="testimonial-content" style="background: ${props.cardBackground || '#FFFFFF'}; border-radius: 12px; padding: 2rem; text-align: center; box-shadow: 0 8px 32px rgba(6,58,168,0.1); height: 100%; min-height: 350px; display: flex; flex-direction: column; justify-content: center;">
                            <div style="color: #6c757d; font-style: italic;">
                                <p>Keine aktiven Testimonials gefunden.</p>
                                <p style="font-size: 0.9rem;">Aktivieren Sie Testimonials in den Eigenschaften.</p>
                            </div>
                        </div>
                    </div>`;
                
                navigationDots = `<button class="testimonial-dot" style="width: 12px; height: 12px; border-radius: 50%; border: none; cursor: pointer; transition: all 0.3s ease; background: #DEE2E6;" data-slide="0"></button>`;
            }
            
            html = html.replace('{{testimonialSlides}}', testimonialSlides);
            html = html.replace('{{navigationDots}}', navigationDots);
            
            return html;
        }

        // Korrigierte Team Gallery Processor 
        function processKerberosTeamGalleryFixed(module, html) {
            const props = module.properties;
            let teamMembers = '';
            
            // Dynamische Generierung der Team-Mitglieder (bis zu 6)
            for (let i = 1; i <= 6; i++) {
                const name = props[`member${i}Name`];
                const position = props[`member${i}Position`];
                const description = props[`member${i}Description`];
                const image = props[`member${i}Image`];
                const initialBg = props[`member${i}InitialBg`] || 'linear-gradient(135deg, #063AA8, #009CE6)';
                const isActive = props[`member${i}Active`] === 'true';
                
                if (name && isActive) {
                    const initial = name.charAt(0).toUpperCase();
                    const avatarStyle = image ? 
                        `background: url('${image}') center/cover; background-color: #E9ECEF;` : 
                        `background: ${initialBg}; background-color: #E9ECEF; display: flex; align-items: center; justify-content: center; color: white; font-size: 2rem; font-weight: 700;`;
                    
                    const avatarContent = image ? '' : initial;
                    
                    teamMembers += `
                        <div class="team-member-card" style="background: white; border-radius: 8px; padding: ${props.cardPadding || '2rem'}; text-align: center; box-shadow: 0 4px 12px rgba(6,58,168,0.1); transition: transform 0.3s ease, box-shadow 0.3s ease; max-width: 320px; width: 100%;">
                            <div style="width: ${props.avatarSize || '120px'}; height: ${props.avatarSize || '120px'}; border-radius: 50%; margin: 0 auto 1rem auto; ${avatarStyle} transition: transform 0.3s ease;">${avatarContent}</div>
                            <h4 style="font-family: var(--heading-font-font-family); font-size: var(--heading-4-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: ${props.nameColor || '#212529'}; margin: 0 0 0.5rem 0;">${name}</h4>
                            <p style="font-family: var(--body-font-font-family); font-size: var(--small-text-size); line-height: var(--body-font-line-height); color: ${props.positionColor || '#6c757d'}; margin: 0 0 1rem 0; font-weight: 600;">${position}</p>
                            <p style="font-family: var(--body-font-font-family); font-size: var(--small-text-size); line-height: var(--body-font-line-height); color: ${props.descriptionColor || '#6c757d'}; margin: 0;">${description}</p>
                        </div>`;
                }
            }
            
            return html.replace('{{teamMembers}}', teamMembers);
        }
        
        // Produkt-√úbersicht Modul Verarbeitung (Bug-frei)
        function processKerberosProductOverview(module, html) {
            const props = module.properties;
            
            // === HEADER CONTENT ===
            let headerContent = '';
            if (props.title) {
                headerContent += `<div style="text-align: center; margin-bottom: 3rem;">
                    <h2 style="font-family: var(--heading-font-font-family); font-size: var(--heading-2-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: ${props.titleColor || '#063AA8'}; margin: 0 0 1rem 0;">${props.title}</h2>`;
                
                if (props.showSubtitle === 'true' && props.subtitle) {
                    headerContent += `<p style="font-family: var(--body-font-font-family); font-size: var(--normal-text-size); line-height: var(--body-font-line-height); color: ${props.subtitleColor || '#6c757d'}; max-width: 800px; margin: 0 auto;">${props.subtitle}</p>`;
                }
                
                headerContent += `</div>`;
            }
            
            // === PRODUCT CARDS ===
            let productCards = '';
            for (let i = 1; i <= 6; i++) {
                if (props[`product${i}Active`] === 'true') {
                    const title = props[`product${i}Title`] || `Produkt ${i}`;
                    const description = props[`product${i}Description`] || 'Beschreibung';
                    const image = props[`product${i}Image`] || 'https://images.unsplash.com/photo-1551434678-e076c223a692?w=400&h=300&fit=crop';
                    const link = props[`product${i}Link`] || '#';
                    const imageHeight = props.cardImageHeight || '200px';  // ‚Üê FIX: Korrekte Variable
                    
                    productCards += `
                        <a href="${link}" class="kerberos-product-card kerberos-product-card-${module.id}" style="
                            background: #FFFFFF; 
                            border: 1px solid ${props.cardBorderColor || '#DEE2E6'}; 
                            border-radius: ${props.cardBorderRadius || '8px'}; 
                            overflow: hidden; 
                            text-decoration: none; 
                            display: block; 
                            cursor: pointer;
                            box-shadow: ${props.cardShadow || '0 2px 8px rgba(0,0,0,0.1)'};
                            transform: scale(1);
                            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                        ">
                            <img src="${image}" alt="${title}" style="width: 100%; height: ${imageHeight}; object-fit: cover;">
                            <div style="padding: 1rem;">
                                <h4 class="product-title-${module.id}" style="font-family: var(--heading-font-font-family); color: ${props.cardTitleColor || '#212529'}; margin: 0 0 0.5rem 0; font-size: 1.1rem; transition: color 0.3s ease;">${title}</h4>
                                <p style="font-family: var(--body-font-font-family); color: ${props.cardDescriptionColor || '#6c757d'}; margin: 0; font-size: 0.9rem;">${description}</p>
                            </div>
                        </a>`;
                }
            }
            
            // === CONTENT ASSEMBLY ===
            const content = `
                ${headerContent}
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: ${props.cardGap || '2rem'};">
                    ${productCards}
                </div>
            `;
            
            // === HOVER CSS (Stark spezifisch) ===
            const hoverCSS = `<style>
                /* √úberschreibe ALLE Button-Hover-Effekte */
                .kerberos-product-card-${module.id}:hover {
                    background: #FFFFFF !important;
                    color: inherit !important;
                    transform: scale(${props.cardHoverScale || '1.02'}) !important;
                    box-shadow: ${props.cardHoverShadow || '0 8px 25px rgba(6,58,168,0.15)'} !important;
                    border-color: rgba(6,58,168,0.4) !important;
                    filter: none !important;
                }
                
                .kerberos-product-card-${module.id}:hover .product-title-${module.id} {
                    color: #063AA8 !important;
                }
                
                .kerberos-product-card-${module.id}:active {
                    transform: scale(0.98) !important;
                }
                
                /* Anti-Button-System */
                a.kerberos-product-card-${module.id}:hover {
                    background: #FFFFFF !important;
                }
            </style>`;
            
            // === TEMPLATE ASSEMBLY ===
            html = html.replace('{{content}}', content);
            html = html.replace(/{{templateId}}/g, module.templateId || module.id);
            
            html = hoverCSS + html;
            
            return html;
        }

        function processKerberosDashboard(module, html) {
            const props = module.properties;
            let dashboardCards = '';
            
            for (let i = 1; i <= 4; i++) {
                const title = props[`card${i}Title`];
                const value = props[`card${i}Value`];
                const icon = props[`card${i}Icon`];
                const color = props[`card${i}Color`];
                
                if (title && value) {
                    dashboardCards += `
                        <div class="kerberos-dashboard-card" style="background: white; border-radius: 8px; padding: 1.5rem; border: 1px solid ${props.borderColor}; transition: all 0.3s ease; cursor: pointer;">
                            <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 1rem;">
                                <div style="font-family: 'Font Awesome 5 Pro'; font-size: 1.5rem; color: ${color};">${icon}</div>
                                <div style="text-align: right;">
                                    <div style="font-size: 1.5rem; font-weight: 700; color: ${color};">${value}</div>
                                </div>
                            </div>
                            <h4 style="font-family: var(--heading-font-font-family); color: ${props.textColor}; margin: 0; font-size: 0.9rem; font-weight: 500;">${title}</h4>
                        </div>`;
                }
            }
            
            return html.replace('{{dashboardCards}}', dashboardCards);
        }

        function processKerberosTestimonialsPro(module, html) {
            const props = module.properties;
            let testimonialSlides = '';
            let navigationDots = '';
            let slideCount = 0;
            
            for (let i = 1; i <= 15; i++) {
                const text = props[`testimonial${i}Text`];
                const author = props[`testimonial${i}Author`];
                const position = props[`testimonial${i}Position`];
                const company = props[`testimonial${i}Company`];
                const companyLogo = props[`testimonial${i}CompanyLogo`];
                const companyLink = props[`testimonial${i}CompanyLink`];
                const image = props[`testimonial${i}Image`];
                const rating = props[`testimonial${i}Rating`] || '5';
                const isActive = props[`testimonial${i}Active`] === 'true';
                
                if (text && author && isActive) {
                    const initial = author.charAt(0).toUpperCase();
                    const avatarStyle = image ? 
                        `background: url('${image}') center/cover;` : 
                        `background: linear-gradient(135deg, ${props.primaryColor || '#063AA8'}, ${props.accentColor || '#009CE6'}); display: flex; align-items: center; justify-content: center; color: white; font-size: 1.5rem; font-weight: 700;`;
                    
                    const stars = '‚òÖ'.repeat(parseInt(rating)) + '‚òÜ'.repeat(5 - parseInt(rating));
                    
                    // Company section mit Logo und Link
                    let companySection = '';
                    if (company) {
                        let companyContent = '';
                        
                        if (companyLogo) {
                            companyContent += `<img src="${companyLogo}" alt="${company} Logo" class="company-logo">`;
                        }
                        
                        if (companyLink) {
                            companyContent += `<a href="${companyLink}" target="_blank" rel="noopener" class="company-name">${company}</a>`;
                        } else {
                            companyContent += `<span class="company-name">${company}</span>`;
                        }
                        
                        companySection = `<div class="author-company">${companyContent}</div>`;
                    }
                    
                    testimonialSlides += `
                        <div class="testimonial-pro-slide" style="flex: 0 0 100%; max-width: 100%; box-sizing: border-box; padding: 0 1rem;">
                            <div class="testimonial-pro-content">
                                <div class="testimonial-quote-section">
                                    <div class="quote-icon">&#xf10d;</div>
                                    <div class="testimonial-rating" style="color: ${props.primaryColor || '#FFD700'};">${stars}</div>
                                    <div class="testimonial-text">"${text}"</div>
                                </div>
                                <div class="testimonial-author-section">
                                    <div class="author-avatar-pro" style="${avatarStyle}">${image ? '' : initial}</div>
                                    <div class="author-info-pro">
                                        <div class="author-name">${author}</div>
                                        <div class="author-position">${position}</div>
                                        ${companySection}
                                    </div>
                                </div>
                            </div>
                        </div>`;
                    
                    navigationDots += `
                        <button class="testimonial-dot-pro" data-slide="${slideCount}" aria-label="Zu Testimonial ${slideCount + 1}"></button>`;
                    
                    slideCount++;
                }
            }
            
            // Fallback falls keine aktiven Testimonials
            if (slideCount === 0) {
                testimonialSlides = `
                    <div class="testimonial-pro-slide" style="flex: 0 0 100%; max-width: 100%; box-sizing: border-box; padding: 0 1rem;">
                        <div class="testimonials-empty">
                            <h3>Keine aktiven Testimonials</h3>
                            <p>Aktivieren Sie Testimonials in den Modul-Eigenschaften, um Kundenbewertungen anzuzeigen.</p>
                        </div>
                    </div>`;
                navigationDots = '';
                slideCount = 1;
            }
            
            // Ersetze Platzhalter
            html = html.replace('{{testimonialSlides}}', testimonialSlides);
            html = html.replace('{{navigationDots}}', navigationDots);
            html = html.replace('{{currentSlide}}', '1');
            html = html.replace('{{totalSlides}}', slideCount.toString());
            
            return html;
        }

        function processKerberosFeatures(module, html) {
            const props = module.properties;
            let featureCards = '';
            
            for (let i = 1; i <= 6; i++) {
                const title = props[`feature${i}Title`];
                const description = props[`feature${i}Description`];
                const icon = props[`feature${i}Icon`];
                const color = props[`feature${i}Color`];
                const isActive = props[`feature${i}Active`] === 'true';
                
                if (title && description && isActive) {
                    featureCards += `
                        <div class="kerberos-feature-card" style="background: ${props.cardBackground}; border: 1px solid ${props.cardBorder}; border-radius: 12px; padding: 2rem; transition: all 0.3s ease; cursor: pointer; position: relative; overflow: hidden;">
                            <div class="feature-overlay" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: linear-gradient(135deg, ${color}10, ${color}05); opacity: 0; transition: opacity 0.3s ease; pointer-events: none;"></div>
                            <div style="position: relative; z-index: 2;">
                                <div class="feature-icon" style="font-family: 'Font Awesome 5 Pro'; font-size: 2.5rem; color: ${color}; margin-bottom: 1.5rem; transition: all 0.3s ease;">${icon}</div>
                                <h3 style="font-family: var(--heading-font-font-family); font-size: var(--heading-4-size); font-weight: var(--heading-font-font-weight); color: ${props.textColor}; margin: 0 0 1rem 0;">${title}</h3>
                                <p style="font-family: var(--body-font-font-family); font-size: var(--normal-text-size); line-height: var(--body-font-line-height); color: ${props.subtitleColor}; margin: 0;">${description}</p>
                            </div>
                        </div>`;
                }
            }
            
            return html.replace('{{featureCards}}', featureCards);
        }

        function processKerberosTimeline(module, html) {
            const props = module.properties;
            let timelineSteps = '';
            
            for (let i = 1; i <= 4; i++) {
                const title = props[`step${i}Title`];
                const description = props[`step${i}Description`];
                const icon = props[`step${i}Icon`];
                const color = props[`step${i}Color`];
                const number = props[`step${i}Number`];
                const position = props[`step${i}Position`] || (i % 2 === 0 ? 'left' : 'right');
                const isActive = props[`step${i}Active`] === 'true';
                
                if (title && description && isActive) {
                    const isRight = position === 'right';
                    const marginTop = i === 1 ? '0' : '4rem';
                    
                    timelineSteps += `
                        <div class="timeline-step" style="position: relative; margin-top: ${marginTop};">
                            <!-- Dot -->
                            <div class="timeline-dot" style="position: absolute; left: 50%; transform: translateX(-50%); width: 60px; height: 60px; background: ${color}; border-radius: 50%; display: flex; align-items: center; justify-content: center; z-index: 10; box-shadow: 0 4px 12px rgba(6,58,168,0.2); transition: transform 0.3s ease;">
                                <span style="font-family: 'Font Awesome 5 Pro'; color: white; font-size: 1.25rem;">${icon}</span>
                            </div>
                            
                            <!-- Card -->
                            <div class="timeline-card" style="width: 45%; ${isRight ? 'margin-left: 55%;' : 'margin-right: 55%;'} background: ${props.cardBackground}; border: 1px solid ${props.cardBorder}; border-radius: 12px; padding: 2rem; box-shadow: 0 8px 24px rgba(6,58,168,0.08); transition: transform 0.3s ease;">
                                <div style="display: flex; align-items: center; gap: 1rem; margin-bottom: 1rem;">
                                    <div style="background: ${color}; color: white; width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-weight: 700; font-size: 0.9rem;">${number}</div>
                                    <h3 style="font-family: var(--heading-font-font-family); font-size: var(--heading-4-size); color: ${color}; margin: 0; font-weight: 600;">${title}</h3>
                                </div>
                                <p style="font-family: var(--body-font-font-family); font-size: var(--normal-text-size); line-height: var(--body-font-line-height); color: ${props.textColor}; margin: 0;">${description}</p>
                            </div>
                        </div>`;
                }
            }
            
            return html.replace('{{timelineSteps}}', timelineSteps);
        }

        // === NEUE PROCESSOR-FUNKTIONEN ===

        function processKerberosFeaturesModern(module, html) {
            const props = module.properties;
            let featureCards = '';
            
            for (let i = 1; i <= 6; i++) {
                const title = props[`feature${i}Title`];
                const description = props[`feature${i}Description`];
                const icon = props[`feature${i}Icon`];
                const color = props[`feature${i}Color`];
                const badge = props[`feature${i}Badge`];
                const badgeColor = props[`feature${i}BadgeColor`];
                const isActive = props[`feature${i}Active`] === 'true';
                
                if (title && description && isActive) {
                    const badgeHtml = badge ? `<div style="position: absolute; top: 1rem; right: 1rem; background: ${badgeColor}; color: ${props.badgeTextColor}; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.7rem; font-weight: 700;">${badge}</div>` : '';
                    
                    featureCards += `
                        <div class="kerberos-feature-card" style="background: ${props.cardBackground}; border: 1px solid ${props.cardBorder}; border-radius: 12px; padding: 2rem; transition: all 0.3s ease; cursor: pointer; position: relative; overflow: hidden;">
                            ${badgeHtml}
                            <div class="feature-overlay" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: linear-gradient(135deg, ${color}10, ${color}05); opacity: 0; transition: opacity 0.3s ease; pointer-events: none;"></div>
                            <div style="position: relative; z-index: 2;">
                                <div class="feature-icon" style="font-family: 'Font Awesome 5 Pro'; font-size: 2.5rem; color: ${color}; margin-bottom: 1.5rem; transition: all 0.3s ease;">${icon}</div>
                                <h3 style="font-family: var(--heading-font-font-family); font-size: var(--heading-4-size); font-weight: var(--heading-font-font-weight); color: ${props.textColor}; margin: 0 0 1rem 0;">${title}</h3>
                                <p style="font-family: var(--body-font-font-family); font-size: var(--normal-text-size); line-height: var(--body-font-line-height); color: ${props.subtitleColor}; margin: 0;">${description}</p>
                            </div>
                        </div>`;
                }
            }
            
            return html.replace('{{featureCards}}', featureCards);
        }

        function processKerberosApiDocumentation(module, html) {
            const props = module.properties;
            let apiEndpoints = '';
            
            for (let i = 1; i <= 4; i++) {
                const method = props[`endpoint${i}Method`];
                const path = props[`endpoint${i}Path`];
                const title = props[`endpoint${i}Title`];
                const description = props[`endpoint${i}Description`];
                const status = props[`endpoint${i}Status`];
                const statusColor = props[`endpoint${i}StatusColor`];
                const isActive = props[`endpoint${i}Active`] === 'true';
                
                if (method && path && title && isActive) {
                    const methodColor = method === 'GET' ? '#28A745' : method === 'POST' ? '#063AA8' : '#EF8646';
                    
                    apiEndpoints += `
                        <div class="api-endpoint-card" style="background: ${props.cardBackground}; border: 1px solid ${props.cardBorder}; border-radius: 8px; padding: 1.5rem; transition: all 0.3s ease; cursor: pointer;">
                            <div style="display: flex; align-items: center; gap: 1rem; margin-bottom: 1rem;">
                                <span style="background: ${methodColor}; color: white; padding: 0.25rem 0.75rem; border-radius: 4px; font-size: 0.8rem; font-weight: 700;">${method}</span>
                                <span style="background: ${statusColor}; color: white; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.7rem; font-weight: 700;">${status}</span>
                            </div>
                            <h4 style="font-family: var(--heading-font-font-family); color: ${props.textColor}; margin: 0 0 0.5rem 0; font-size: 1.1rem;">${title}</h4>
                            <p style="font-family: 'Monaco', 'Consolas', monospace; color: ${props.primaryColor}; font-size: 0.9rem; margin: 0 0 1rem 0;">${path}</p>
                            <p style="font-family: var(--body-font-font-family); color: ${props.textColor}; font-size: 0.9rem; margin: 0; opacity: 0.8;">${description}</p>
                        </div>`;
                }
            }
            
            return html.replace('{{apiEndpoints}}', apiEndpoints);
        }

        function processKerberosPricingInteractive(module, html) {
            const props = module.properties;
            let pricingPlans = '';
            let featureRows = '';
            let mobileFeatureCards = '';
            
            // Pricing Plans generieren (RESPONSIVE KORRIGIERT)
            for (let i = 1; i <= 3; i++) {
                const name = props[`plan${i}Name`];
                const price = props[`plan${i}Price`];
                const period = props[`plan${i}Period`];
                const description = props[`plan${i}Description`];
                const buttonText = props[`plan${i}ButtonText`];
                const buttonLink = props[`plan${i}ButtonLink`];
                const isPopular = props[`plan${i}Popular`] === 'true';
                const color = props[`plan${i}Color`];
                const isActive = props[`plan${i}Active`] === 'true';
                
                if (name && price && isActive) {
                    const popularBadge = isPopular ? `<div style="position: absolute; top: -10px; left: 50%; transform: translateX(-50%); background: ${props.popularBadgeColor}; color: ${props.badgeTextColor}; padding: 0.5rem 1.5rem; border-radius: 20px; font-size: 0.8rem; font-weight: 700; z-index: 10;">${props.popularBadge}</div>` : '';
                    const cardStyle = isPopular ? `transform: scale(1.05); border: 2px solid ${color}; box-shadow: 0 16px 40px rgba(6,58,168,0.2);` : `border: 1px solid ${props.cardBorder};`;
                    
                    pricingPlans += `
                        <div class="pricing-plan" style="background: ${props.cardBackground}; ${cardStyle} border-radius: 12px; padding: 2rem; text-align: center; position: relative; transition: all 0.3s ease; max-width: 100%; box-sizing: border-box;">
                            ${popularBadge}
                            <h3 style="font-family: var(--heading-font-font-family); color: ${color}; margin: 0 0 1rem 0; font-size: 1.5rem;">${name}</h3>
                            <div style="margin-bottom: 1rem;">
                                <span class="price" style="font-family: var(--heading-font-font-family); font-size: 2.5rem; font-weight: 700; color: ${props.textColor};">${price}</span>
                                <span style="color: ${props.subtitleColor}; font-size: 1rem;">${period}</span>
                            </div>
                            <p style="color: ${props.subtitleColor}; margin: 0 0 2rem 0; line-height: 1.5;">${description}</p>
                            <a href="${buttonLink}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: ${color}; color: white; padding: 1rem 1.5rem; border-radius: 8px; text-decoration: none; display: inline-block; width: calc(100% - 3rem); max-width: 250px; transition: all 0.3s ease; box-sizing: border-box; white-space: nowrap; text-align: center;">${buttonText}</a>
                        </div>`;
                }
            }
            
            // Feature-Vergleichstabelle generieren
            for (let i = 1; i <= 6; i++) {
                const featureName = props[`feature${i}Name`];
                const plan1Feature = props[`feature${i}Plan1`];
                const plan2Feature = props[`feature${i}Plan2`];
                const plan3Feature = props[`feature${i}Plan3`];
                
                if (featureName && plan1Feature && plan2Feature && plan3Feature) {
                    const rowBg = i % 2 === 0 ? props.tableRowAlt || '#F8F9FA' : 'white';
                    featureRows += `
                        <tr style="background: ${rowBg};">
                            <td style="padding: 1rem; font-family: var(--body-font-font-family); color: ${props.tableText}; font-weight: 600;">${featureName}</td>
                            <td style="padding: 1rem; text-align: center; font-family: var(--body-font-font-family); color: ${props.tableText};">${plan1Feature}</td>
                            <td style="padding: 1rem; text-align: center; font-family: var(--body-font-font-family); color: ${props.tableText};">${plan2Feature}</td>
                            <td style="padding: 1rem; text-align: center; font-family: var(--body-font-font-family); color: ${props.tableText};">${plan3Feature}</td>
                        </tr>`;
                    
                    // Mobile Feature Cards generieren
                    mobileFeatureCards += `
                        <div style="background: white; border-radius: 8px; padding: 1.5rem; margin-bottom: 1rem; border: 1px solid ${props.featureBorder};">
                            <h4 style="font-family: var(--heading-font-font-family); color: ${props.featureTitle}; margin: 0 0 1rem 0; font-size: 1.1rem;">${featureName}</h4>
                            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; text-align: center;">
                                <div>
                                    <div style="font-weight: 600; color: ${props.plan1Color}; margin-bottom: 0.5rem;">${props.plan1Name}</div>
                                    <div style="color: ${props.tableText};">${plan1Feature}</div>
                                </div>
                                <div>
                                    <div style="font-weight: 600; color: ${props.plan2Color}; margin-bottom: 0.5rem;">${props.plan2Name}</div>
                                    <div style="color: ${props.tableText};">${plan2Feature}</div>
                                </div>
                                <div>
                                    <div style="font-weight: 600; color: ${props.plan3Color}; margin-bottom: 0.5rem;">${props.plan3Name}</div>
                                    <div style="color: ${props.tableText};">${plan3Feature}</div>
                                </div>
                            </div>
                        </div>`;
                }
            }
            
            html = html.replace('{{pricingPlans}}', pricingPlans);
            html = html.replace('{{featureRows}}', featureRows);
            html = html.replace('{{mobileFeatureCards}}', mobileFeatureCards);
            
            return html;
        }

        function processKerberosNewsletterModern(module, html) {
            const props = module.properties;
            let benefitItems = '';
            
            for (let i = 1; i <= 4; i++) {
                const icon = props[`benefit${i}Icon`];
                const text = props[`benefit${i}Text`];
                const color = props[`benefit${i}Color`];
                const isActive = props[`benefit${i}Active`] === 'true';
                
                if (icon && text && isActive) {
                    benefitItems += `
                        <div style="text-align: center;">
                            <div style="font-family: 'Font Awesome 5 Pro'; font-size: 2rem; color: ${color}; margin-bottom: 1rem;">${icon}</div>
                            <p style="font-family: var(--body-font-font-family); color: ${props.textColor}; margin: 0; font-weight: 600;">${text}</p>
                        </div>`;
                }
            }
            
            return html.replace('{{benefitItems}}', benefitItems);
        }

        function processKerberosProductShowcase(module, html) {
            const props = module.properties;
            let featureList = '';
            let additionalScreenshots = '';
            let mainContent = '';
            
            // Feature-Liste generieren
            for (let i = 1; i <= 4; i++) {
                const text = props[`feature${i}Text`];
                const icon = props[`feature${i}Icon`];
                const color = props[`feature${i}Color`];
                const isActive = props[`feature${i}Active`] === 'true';
                
                if (text && icon && isActive) {
                    featureList += `
                        <li style="display: flex; align-items: center; gap: 1rem; margin-bottom: 1rem;">
                            <div style="font-family: 'Font Awesome 5 Pro'; font-size: 1.25rem; color: ${color}; width: 24px;">${icon}</div>
                            <span style="font-family: var(--body-font-font-family); color: ${props.textColor};">${text}</span>
                        </li>`;
                }
            }
            
            // Haupt-Content (Bild oder Video)
            if (props.contentType === 'video' && props.videoUrl) {
                mainContent = `<video controls style="width: 100%; height: auto;" poster="${props.mainImage}">
                    <source src="${props.videoUrl}" type="video/mp4">
                    Ihr Browser unterst√ºtzt keine Videos.
                </video>`;
            } else {
                mainContent = `<img src="${props.mainImage}" alt="${props.mainImageAlt}" style="width: 100%; height: auto; object-fit: cover;">`;
            }
            
            // Screenshots generieren
            for (let i = 1; i <= 3; i++) {
                const image = props[`screenshot${i}Image`];
                const title = props[`screenshot${i}Title`];
                const description = props[`screenshot${i}Description`];
                const isActive = props[`screenshot${i}Active`] === 'true';
                
                if (image && title && isActive) {
                    additionalScreenshots += `
                        <div class="screenshot-card" style="background: ${props.cardBackground}; border: 1px solid ${props.cardBorder}; border-radius: 8px; overflow: hidden; transition: all 0.3s ease; cursor: pointer;">
                            <img src="${image}" alt="${title}" style="width: 100%; height: 200px; object-fit: cover;">
                            <div style="padding: 1rem;">
                                <h4 style="font-family: var(--heading-font-font-family); color: ${props.textColor}; margin: 0 0 0.5rem 0; font-size: 1.1rem;">${title}</h4>
                                <p style="font-family: var(--body-font-font-family); color: ${props.subtitleColor}; margin: 0; font-size: 0.9rem;">${description}</p>
                            </div>
                        </div>`;
                }
            }
            
            html = html.replace('{{mainContent}}', mainContent);
            html = html.replace('{{featureList}}', featureList);
            html = html.replace('{{additionalScreenshots}}', additionalScreenshots);
            
            return html;
        }

        function processKerberosIntegrationsGrid(module, html) {
            const props = module.properties;
            let integrationCards = '';
            
            for (let i = 1; i <= 8; i++) {
                const name = props[`integration${i}Name`];
                const category = props[`integration${i}Category`];
                const description = props[`integration${i}Description`];
                const logo = props[`integration${i}Logo`];
                const status = props[`integration${i}Status`];
                const statusColor = props[`integration${i}StatusColor`];
                const isActive = props[`integration${i}Active`] === 'true';
                
                if (name && category && description && isActive) {
                    integrationCards += `
                        <div class="integration-card" data-category="${category}" style="background: ${props.cardBackground}; border: 1px solid ${props.cardBorder}; border-radius: 8px; padding: 1.5rem; text-align: center; transition: all 0.3s ease; cursor: pointer;">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">${logo}</div>
                            <h4 style="font-family: var(--heading-font-font-family); color: ${props.textColor}; margin: 0 0 0.5rem 0; font-size: 1.1rem;">${name}</h4>
                            <div style="background: ${statusColor}; color: white; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.7rem; font-weight: 700; display: inline-block; margin-bottom: 1rem;">${status}</div>
                            <p style="font-family: var(--body-font-font-family); color: ${props.textColor}; margin: 0; font-size: 0.9rem; opacity: 0.8;">${description}</p>
                        </div>`;
                }
            }
            
            return html.replace('{{integrationCards}}', integrationCards);
        }

        // Neue Processor f√ºr erweiterte Module
        function processKerberosFeatureComparisonExtended(module, html) {
            const props = module.properties;
            let featureRows = '';
            let mobileFeatureCards = '';
            
            // Generiere Tabellenzeilen f√ºr aktive Features
            for (let i = 1; i <= 10; i++) {
                const col1 = props[`row${i}Col1`];
                const col2 = props[`row${i}Col2`];
                const col3 = props[`row${i}Col3`];
                const col4 = props[`row${i}Col4`];
                const isActive = props[`row${i}Active`] === 'true';
                
                if (col1 && col2 && col3 && col4 && isActive) {
                    const rowBg = i % 2 === 0 ? props.tableRowBg2 : props.tableRowBg1;
                    featureRows += `
                        <tr style="background: ${rowBg};">
                            <td style="padding: 1rem; font-family: var(--body-font-font-family); color: ${props.tableTextColor}; font-weight: 600;">${col1}</td>
                            <td style="padding: 1rem; text-align: center; font-family: var(--body-font-font-family); color: ${props.tableTextColor};">${col2}</td>
                            <td style="padding: 1rem; text-align: center; font-family: var(--body-font-font-family); color: ${props.tableTextColor};">${col3}</td>
                            <td style="padding: 1rem; text-align: center; font-family: var(--body-font-font-family); color: ${props.tableTextColor};">${col4}</td>
                        </tr>`;
                    
                    // Mobile Feature Cards
                    mobileFeatureCards += `
                        <div style="background: white; border-radius: 8px; padding: 1.5rem; margin-bottom: 1rem; border: 1px solid ${props.mobileBorder};">
                            <h4 style="font-family: var(--heading-font-font-family); color: ${props.mobileFeatureTitle}; margin: 0 0 1rem 0; font-size: 1.1rem;">${col1}</h4>
                            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; text-align: center;">
                                <div>
                                    <div style="font-weight: 600; color: ${props.col2Color}; margin-bottom: 0.5rem; font-size: 0.9rem;">${props.headerCol2}</div>
                                    <div style="color: ${props.tableTextColor}; font-size: 0.9rem;">${col2}</div>
                                </div>
                                <div>
                                    <div style="font-weight: 600; color: ${props.col3Color}; margin-bottom: 0.5rem; font-size: 0.9rem;">${props.headerCol3}</div>
                                    <div style="color: ${props.tableTextColor}; font-size: 0.9rem;">${col3}</div>
                                </div>
                                <div>
                                    <div style="font-weight: 600; color: ${props.col4Color}; margin-bottom: 0.5rem; font-size: 0.9rem;">${props.headerCol4}</div>
                                    <div style="color: ${props.tableTextColor}; font-size: 0.9rem;">${col4}</div>
                                </div>
                            </div>
                        </div>`;
                }
            }
            
            html = html.replace('{{featureRows}}', featureRows);
            html = html.replace('{{mobileFeatureCards}}', mobileFeatureCards);
            
            return html;
        }

        function processKerberosPricingResponseExtended(module, html) {
            const props = module.properties;
            let featureRows = '';
            let mobileFeatureCards = '';
            
            // Generiere Feature-Vergleichszeilen
            for (let i = 1; i <= 10; i++) {
                const featureName = props[`feature${i}Name`];
                const plan1Feature = props[`feature${i}Plan1`];
                const plan2Feature = props[`feature${i}Plan2`];
                const plan3Feature = props[`feature${i}Plan3`];
                const isActive = props[`feature${i}Active`] === 'true';
                
                if (featureName && plan1Feature && plan2Feature && plan3Feature && isActive) {
                    const rowBg = i % 2 === 0 ? props.tableRowBg2 : props.tableRowBg1;
                    featureRows += `
                        <tr style="background: ${rowBg};">
                            <td style="padding: 1rem; font-family: var(--body-font-font-family); color: ${props.tableTextColor}; font-weight: 600;">${featureName}</td>
                            <td style="padding: 1rem; text-align: center; font-family: var(--body-font-font-family); color: ${props.tableTextColor};">${plan1Feature}</td>
                            <td style="padding: 1rem; text-align: center; font-family: var(--body-font-font-family); color: ${props.tableTextColor};">${plan2Feature}</td>
                            <td style="padding: 1rem; text-align: center; font-family: var(--body-font-font-family); color: ${props.tableTextColor};">${plan3Feature}</td>
                        </tr>`;
                    
                    // Mobile Feature Cards
                    mobileFeatureCards += `
                        <div style="background: white; border-radius: 8px; padding: 1.5rem; margin-bottom: 1rem; border: 1px solid ${props.mobileBorder};">
                            <h4 style="font-family: var(--heading-font-font-family); color: ${props.mobileFeatureTitle}; margin: 0 0 1rem 0; font-size: 1.1rem;">${featureName}</h4>
                            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; text-align: center;">
                                <div>
                                    <div style="font-weight: 600; color: ${props.plan1Color}; margin-bottom: 0.5rem; font-size: 0.9rem;">${props.plan1Name}</div>
                                    <div style="color: ${props.tableTextColor}; font-size: 0.9rem;">${plan1Feature}</div>
                                </div>
                                <div>
                                    <div style="font-weight: 600; color: ${props.plan2Color}; margin-bottom: 0.5rem; font-size: 0.9rem;">${props.plan2Name}</div>
                                    <div style="color: ${props.tableTextColor}; font-size: 0.9rem;">${plan2Feature}</div>
                                </div>
                                <div>
                                    <div style="font-weight: 600; color: ${props.plan3Color}; margin-bottom: 0.5rem; font-size: 0.9rem;">${props.plan3Name}</div>
                                    <div style="color: ${props.tableTextColor}; font-size: 0.9rem;">${plan3Feature}</div>
                                </div>
                            </div>
                        </div>`;
                }
            }
            
            html = html.replace('{{featureRows}}', featureRows);
            html = html.replace('{{mobileFeatureCards}}', mobileFeatureCards);
            
            return html;
        }

        // Module Bibliothek laden
        function loadModuleLibrary() {
            const library = document.getElementById('moduleLibrary');
            library.innerHTML = '';
            
            // Custom Templates laden (HIER EINF√úGEN)
            loadCustomTemplates();
            
            const categories = [...new Set(MODULE_TEMPLATES.map(t => t.category))];
            
            categories.forEach(category => {
                const categoryDiv = document.createElement('div');
                categoryDiv.innerHTML = `<h4 class="category-title">${category}</h4>`;
                library.appendChild(categoryDiv);
                
                MODULE_TEMPLATES.filter(t => t.category === category).forEach(template => {
                    const moduleDiv = document.createElement('div');
                    moduleDiv.className = 'module-template';
                    moduleDiv.dataset.templateId = template.id;
                    
                    moduleDiv.innerHTML = `
                        <div class="module-name">${template.name}</div>
                        <div class="module-description">${template.description}</div>
                    `;
                    
                    moduleDiv.addEventListener('click', () => {
                        addModuleToCanvas(template.id);
                    });
                    
                    library.appendChild(moduleDiv);
                });
            });
        }

        // Icon Modal Functions
        function showIconPicker(property) {
            currentProperty = property;
            const modal = document.getElementById('iconModal');
            const picker = document.getElementById('iconPicker');
            
            picker.innerHTML = '';
            FONT_AWESOME_ICONS.forEach(icon => {
                const iconDiv = document.createElement('div');
                iconDiv.className = 'icon-option';
                iconDiv.innerHTML = `<span style="font-family: 'Font Awesome 5 Pro';">${icon.unicode}</span>`;
                iconDiv.title = icon.name;
                iconDiv.onclick = () => selectIcon(icon.unicode);
                picker.appendChild(iconDiv);
            });
            
            modal.style.display = 'block';
        }

        function selectIcon(iconUnicode) {
            if (selectedModule && currentProperty) {
                selectedModule.properties[currentProperty] = iconUnicode;
                renderPropertyPanel();
                closeIconModal();
                showNotification('‚úÖ Icon aktualisiert');
            }
        }

        function closeIconModal() {
            document.getElementById('iconModal').style.display = 'none';
        }

        // Image Modal Functions
        function showImagePicker(property) {
            currentProperty = property;
            const modal = document.getElementById('imageModal');
            loadStockImages();
            modal.style.display = 'block';
        }

        function loadStockImages() {
            const container = document.getElementById('stockImages');
            container.innerHTML = '';
            
            STOCK_IMAGES.forEach(url => {
                const img = document.createElement('img');
                img.src = url;
                img.style.cssText = 'width: 100%; height: 80px; object-fit: cover; border-radius: 4px; cursor: pointer; transition: transform 0.2s;';
                img.onmouseover = () => img.style.transform = 'scale(1.05)';
                img.onmouseout = () => img.style.transform = 'scale(1)';
                img.onclick = () => selectImage(url);
                container.appendChild(img);
            });
        }

        function selectImage(imageUrl) {
            if (selectedModule && currentProperty) {
                selectedModule.properties[currentProperty] = imageUrl;
                renderPropertyPanel();
                closeImageModal();
                showNotification('‚úÖ Bild aktualisiert');
            }
        }

        function switchTab(tabName) {
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            document.querySelector(`[onclick="switchTab('${tabName}')"]`).classList.add('active');
            document.getElementById(`${tabName}Tab`).classList.add('active');
        }

        function closeImageModal() {
            document.getElementById('imageModal').style.display = 'none';
        }

        // Image Upload
        document.getElementById('imageInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const imageUrl = e.target.result;
                    const fileName = `uploaded_${Date.now()}_${file.name}`;
                    uploadedImages[fileName] = imageUrl;
                    
                    if (selectedModule && currentProperty) {
                        selectedModule.properties[currentProperty] = imageUrl;
                        renderPropertyPanel();
                        closeImageModal();
                        showNotification('‚úÖ Bild hochgeladen und zugewiesen');
                    }
                };
                reader.readAsDataURL(file);
            }
        });

        // Modul zum Canvas hinzuf√ºgen
        function addModuleToCanvas(templateId) {
            const template = MODULE_TEMPLATES.find(t => t && t.id === templateId);
            if (!template) {
                console.error('Template nicht gefunden:', templateId);
                showNotification('‚ùå Template nicht gefunden: ' + templateId);
                return;
            }
            
            const module = {
                id: `module_${++moduleCounter}`,
                templateId: templateId,
                html: template.html,
                properties: { ...template.properties },
                name: template.name,
                category: template.category,
                description: template.description
            };
            
            modules.push(module);
            renderCanvas();
            selectModule(module.id);
            
            const placeholder = document.querySelector('.canvas-placeholder');
            if (placeholder) placeholder.style.display = 'none';
            
            showNotification('‚úÖ ' + template.name + ' hinzugef√ºgt');
        }

        // Canvas rendern
        function renderCanvas() {
            const canvas = document.getElementById('canvas');
            const placeholder = canvas.querySelector('.canvas-placeholder');
            
            // Alte Event Listener entfernen
            removeModuleEventListeners();
            
            const moduleElements = canvas.querySelectorAll('.canvas-module');
            moduleElements.forEach(el => el.remove());
            
            if (modules.length === 0) {
                if (placeholder) placeholder.style.display = 'block';
                return;
            }
            
            if (placeholder) placeholder.style.display = 'none';
            
            modules.forEach((module, index) => {
                const moduleDiv = document.createElement('div');
                moduleDiv.className = 'canvas-module';
                moduleDiv.dataset.moduleId = module.id;
                
                moduleDiv.innerHTML = `
                    <div class="module-controls">
                        <button class="control-btn btn-edit" onclick="selectModule('${module.id}')" title="Bearbeiten">‚úèÔ∏è</button>
                        <button class="control-btn btn-edit" onclick="editModuleInfo('${module.id}')" title="Modul-Info bearbeiten">‚ÑπÔ∏è</button>
                        <button class="control-btn btn-copy" onclick="copyModuleCode('${module.id}')" title="Code kopieren">üìã</button>
                        <button class="control-btn btn-copy" onclick="exportSingleModule('${module.id}')" title="Modul exportieren">üì§</button>
                        <button class="control-btn btn-move" onclick="moveModule('${module.id}', -1)" title="Nach oben">‚Üë</button>
                        <button class="control-btn btn-move" onclick="moveModule('${module.id}', 1)" title="Nach unten">‚Üì</button>
                        <button class="control-btn btn-delete" onclick="deleteIndividualModule('${module.id}')" title="L√∂schen">üóëÔ∏è</button>
                    </div>
                    <div style="padding: 0.5rem; background: rgba(6,58,168,0.02); border-radius: 4px; margin-bottom: 0.5rem; font-size: 0.8rem; color: #6c757d; border: 1px solid rgba(6,58,168,0.1);">
                        üìÑ ${module.name} <span style="opacity: 0.7;">| ${module.category || 'Uncategorized'}</span>
                        <span style="background: #28a745; color: white; padding: 0.1rem 0.4rem; border-radius: 10px; font-size: 0.7rem; margin-left: 0.5rem;">LIVE</span>
                    </div>
                    <div class="module-content">${processModuleHTML(module)}</div>
                `;
                
                moduleDiv.addEventListener('click', (e) => {
                    if (!e.target.classList.contains('control-btn')) {
                        selectModule(module.id);
                    }
                });
                
                canvas.appendChild(moduleDiv);
            });
            
            // üéÆ INTERAKTIVIT√ÑT AKTIVIEREN
            setTimeout(() => {
                activateModuleInteractivity();
            }, 100);

            // Testimonials Carousels nach dem Rendering initialisieren
            setTimeout(() => {
                initializeTestimonialsCarousels();
            }, 100);
            
        }

        // Event Listener Management
        let moduleEventListeners = new Map();

        function removeModuleEventListeners() {
            moduleEventListeners.forEach((listeners, moduleId) => {
                listeners.forEach(({ element, event, handler }) => {
                    if (element && element.removeEventListener) {
                        element.removeEventListener(event, handler);
                    }
                });
            });
            moduleEventListeners.clear();
        }

        function addModuleEventListener(moduleId, element, event, handler) {
            if (!moduleEventListeners.has(moduleId)) {
                moduleEventListeners.set(moduleId, []);
            }
            moduleEventListeners.get(moduleId).push({ element, event, handler });
            element.addEventListener(event, handler);
        }

        // 6Ô∏è‚É£ NEUE FUNKTION: Live-Interaktivit√§t aktivieren
        function activateModuleInteractivity() {
            console.log('üéÆ Aktiviere Module-Interaktivit√§t...');
            
            // FAQ Accordion Interaktivit√§t
            const faqItems = document.querySelectorAll('.kerberos-faq-item');
            faqItems.forEach(item => {
                const header = item.querySelector('.faq-header');
                const content = item.querySelector('.faq-content');
                const icon = item.querySelector('.faq-icon');
                
                if (header && content && icon) {
                    // Remove existing listeners
                    header.replaceWith(header.cloneNode(true));
                    const newHeader = item.querySelector('.faq-header');
                    
                    newHeader.addEventListener('click', (e) => {
                        e.stopPropagation(); // Prevent module selection
                        
                        const isOpen = content.style.maxHeight && content.style.maxHeight !== '0px';
                        
                        // Close all others in this module
                        item.parentElement.querySelectorAll('.kerberos-faq-item').forEach(otherItem => {
                            const otherContent = otherItem.querySelector('.faq-content');
                            const otherIcon = otherItem.querySelector('.faq-icon');
                            if (otherContent && otherIcon) {
                                otherContent.style.maxHeight = '0px';
                                otherIcon.style.transform = 'rotate(0deg)';
                                otherItem.style.background = '#FFFFFF';
                            }
                        });
                        
                        // Toggle current
                        if (!isOpen) {
                            content.style.maxHeight = content.scrollHeight + 'px';
                            icon.style.transform = 'rotate(45deg)';
                            item.style.background = 'rgba(6,58,168,0.02)';
                        }
                    });
                }
            });
            
            // Dashboard Card Hover Effects
            const dashboardCards = document.querySelectorAll('.kerberos-dashboard-card');
            dashboardCards.forEach(card => {
                card.addEventListener('mouseenter', () => {
                    card.style.transform = 'translateY(-4px)';
                    card.style.boxShadow = '0 8px 24px rgba(6,58,168,0.15)';
                });
                card.addEventListener('mouseleave', () => {
                    card.style.transform = 'translateY(0)';
                    card.style.boxShadow = '0 2px 8px rgba(6,58,168,0.08)';
                });
            });
            
            // Chart Area Click Effect
            const chartAreas = document.querySelectorAll('.kerberos-chart-area');
            chartAreas.forEach(chartArea => {
                chartArea.addEventListener('click', (e) => {
                    e.stopPropagation();
                    chartArea.style.background = 'rgba(6,58,168,0.02)';
                    setTimeout(() => {
                        chartArea.style.background = 'white';
                    }, 200);
                });
            });
            
            // Testimonials Carousel
            const testimonialTracks = document.querySelectorAll('.kerberos-testimonials-track');
            testimonialTracks.forEach(track => {
                const trackContainer = track.closest('.canvas-module');
                if (!trackContainer) return;
                
                const slides = track.querySelectorAll('.testimonial-slide');
                const dots = trackContainer.querySelectorAll('.testimonial-dot');
                const prevBtn = trackContainer.querySelector('.kerberos-prev');
                const nextBtn = trackContainer.querySelector('.kerberos-next');
                
                if (slides.length === 0 || dots.length === 0) return;
                
                let currentSlide = 0;
                let autoPlay = true;
                let autoPlayInterval;
                
                function goToSlide(index) {
                    currentSlide = index;
                    track.style.transform = `translateX(-${currentSlide * 100}%)`;
                    
                    dots.forEach((dot, i) => {
                        dot.style.background = i === currentSlide ? '#063AA8' : '#DEE2E6';
                    });
                }
                
                function nextSlide() {
                    currentSlide = (currentSlide + 1) % slides.length;
                    goToSlide(currentSlide);
                }
                
                function prevSlide() {
                    currentSlide = (currentSlide - 1 + slides.length) % slides.length;
                    goToSlide(currentSlide);
                }
                
                // Event listeners
                if (nextBtn) {
                    nextBtn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        nextSlide();
                        autoPlay = false;
                        clearInterval(autoPlayInterval);
                    });
                }
                
                if (prevBtn) {
                    prevBtn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        prevSlide();
                        autoPlay = false;
                        clearInterval(autoPlayInterval);
                    });
                }
                
                dots.forEach((dot, index) => {
                    dot.addEventListener('click', (e) => {
                        e.stopPropagation();
                        goToSlide(index);
                        autoPlay = false;
                        clearInterval(autoPlayInterval);
                    });
                });
                
                // Auto-play
                autoPlayInterval = setInterval(() => {
                    if (autoPlay) nextSlide();
                }, 5000);
                
                // Pause on hover
                track.addEventListener('mouseenter', () => {
                    autoPlay = false;
                    clearInterval(autoPlayInterval);
                });
                track.addEventListener('mouseleave', () => {
                    autoPlay = true;
                    autoPlayInterval = setInterval(() => {
                        if (autoPlay) nextSlide();
                    }, 5000);
                });
                
                // Initialize
                goToSlide(0);
            });
            
            // Feature Cards Hover Effects
            const featureCards = document.querySelectorAll('.kerberos-feature-card');
            featureCards.forEach(card => {
                const icon = card.querySelector('.feature-icon');
                const overlay = card.querySelector('.feature-overlay');
                
                card.addEventListener('mouseenter', () => {
                    card.style.transform = 'translateY(-8px)';
                    card.style.boxShadow = '0 16px 40px rgba(6,58,168,0.15)';
                    if (icon) icon.style.transform = 'scale(1.1) rotate(5deg)';
                    if (overlay) overlay.style.opacity = '1';
                });
                
                card.addEventListener('mouseleave', () => {
                    card.style.transform = 'translateY(0)';
                    card.style.boxShadow = '0 4px 12px rgba(6,58,168,0.08)';
                    if (icon) icon.style.transform = 'scale(1) rotate(0deg)';
                    if (overlay) overlay.style.opacity = '0';
                });
            });
            
            // Timeline Steps Intersection Observer (KORRIGIERT)
            const timelineSteps = document.querySelectorAll('.timeline-step');
            if (timelineSteps.length > 0) {
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.style.opacity = '1';
                            entry.target.style.transform = 'translateY(0)';
                        }
                    });
                }, { threshold: 0.3 });
                
                timelineSteps.forEach((step, index) => {
                    step.style.opacity = '0';
                    step.style.transform = 'translateY(20px)';
                    step.style.transition = `all 0.6s ease ${index * 0.2}s`;
                    observer.observe(step);
                    
                    // KORRIGIERTE Hover effects - behalten translateX(-50%) bei
                    step.addEventListener('mouseenter', () => {
                        const card = step.querySelector('.timeline-card');
                        const dot = step.querySelector('.timeline-dot');
                        if (card) card.style.transform = 'scale(1.02)';
                        if (dot) dot.style.transform = 'translateX(-50%) scale(1.2)'; // FIX: translateX beibehalten
                    });
                    
                    step.addEventListener('mouseleave', () => {
                        const card = step.querySelector('.timeline-card');
                        const dot = step.querySelector('.timeline-dot');
                        if (card) card.style.transform = 'scale(1)';
                        if (dot) dot.style.transform = 'translateX(-50%) scale(1)'; // FIX: translateX beibehalten
                    });
                });
            }
        
            // === NEUE MODULE INTERAKTIVIT√ÑT ===

            // API Documentation Tab-Switching
            const apiTabs = document.querySelectorAll('.api-lang-tab');
            const codeBlocks = document.querySelectorAll('.api-code-block');
            apiTabs.forEach(tab => {
                tab.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const lang = tab.dataset.lang;
                    
                    // Update tabs
                    apiTabs.forEach(t => {
                        t.style.background = t.dataset.lang === lang ? '{{primaryColor}}' : '{{inactiveTabBg}}';
                        t.style.color = t.dataset.lang === lang ? 'white' : '{{inactiveTabColor}}';
                    });
                    
                    // Update code blocks
                    codeBlocks.forEach(block => {
                        block.style.display = block.dataset.lang === lang ? 'block' : 'none';
                    });
                });
            });

            // Integration Filter
            const integrationFilters = document.querySelectorAll('.integration-filter');
            const integrationCards = document.querySelectorAll('.integration-card');
            integrationFilters.forEach(filter => {
                filter.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const category = filter.dataset.category;
                    
                    // Update filter buttons
                    integrationFilters.forEach(f => {
                        const isActive = f.dataset.category === category;
                        f.style.background = isActive ? '{{primaryColor}}' : 'transparent';
                        f.style.color = isActive ? 'white' : '{{primaryColor}}';
                    });
                    
                    // Filter cards
                    integrationCards.forEach(card => {
                        const cardCategory = card.dataset.category;
                        const shouldShow = category === 'all' || cardCategory === category;
                        card.style.display = shouldShow ? 'block' : 'none';
                    });
                });
            });

            // Enhanced Hover Effects f√ºr neue Module
            const apiEndpointCards = document.querySelectorAll('.api-endpoint-card');
            apiEndpointCards.forEach(card => {
                card.addEventListener('mouseenter', () => {
                    card.style.transform = 'translateY(-4px)';
                    card.style.boxShadow = '0 8px 24px rgba(6,58,168,0.15)';
                });
                card.addEventListener('mouseleave', () => {
                    card.style.transform = 'translateY(0)';
                    card.style.boxShadow = 'none';
                });
            });

            const pricingPlans = document.querySelectorAll('.pricing-plan');
            pricingPlans.forEach(plan => {
                plan.addEventListener('mouseenter', () => {
                    plan.style.transform = plan.style.transform.includes('scale(1.05)') ? 
                        plan.style.transform.replace('scale(1.05)', 'scale(1.08)') : 'scale(1.03)';
                });
                plan.addEventListener('mouseleave', () => {
                    plan.style.transform = plan.style.transform.includes('scale(1.08)') ? 
                        plan.style.transform.replace('scale(1.08)', 'scale(1.05)') : 'scale(1)';
                });
            });

            const screenshotCards = document.querySelectorAll('.screenshot-card');
            screenshotCards.forEach(card => {
                card.addEventListener('mouseenter', () => {
                    card.style.transform = 'translateY(-8px)';
                    card.style.boxShadow = '0 12px 32px rgba(6,58,168,0.15)';
                });
                card.addEventListener('mouseleave', () => {
                    card.style.transform = 'translateY(0)';
                    card.style.boxShadow = 'none';
                });
            });            
            
        // ‚ú® UNIVERSELLE BUTTON HOVER-EFFEKTE
        applyUniversalButtonHoverEffects();

        console.log('‚úÖ Module-Interaktivit√§t aktiviert!');
        }

        // ‚ú® Universelle Button Hover-Effekte f√ºr alle Module
        function applyUniversalButtonHoverEffects() {
            // Entferne alte Hover-Styles
            const existingStyle = document.getElementById('kerberos-button-hover-styles');
            if (existingStyle) existingStyle.remove();
            
            // Erstelle CSS f√ºr alle Module
            let css = `/* Kerberos Universal Button Hover Effects */\n`;
            
            // Basis-Styles f√ºr alle Kerberos-Buttons
            css += `.kerberos-btn {
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
                cursor: pointer !important;
                position: relative !important;
                overflow: hidden !important;
            }\n\n`;

            // NACH dem bestehenden CSS hinzuf√ºgen:
            css += `
            /* Responsive Styles f√ºr Warnungs-Modul */
            @media (max-width: 768px) {
                .kerberos-warning-module h2 {
                    font-size: 1.5rem !important;
                    line-height: 1.3 !important;
                }
                
                .kerberos-warning-module h3 {
                    font-size: 1.2rem !important;
                }
                
                .kerberos-warning-module .background-overlay {
                    opacity: 0.05 !important;
                }
            }

            @media (max-width: 480px) {
                .kerberos-warning-module div[style*="grid-template-columns"] {
                    grid-template-columns: 1fr !important;
                    gap: 1.5rem !important;
                }
                
                .kerberos-warning-module div[style*="height: 80px"] {
                    height: 60px !important;
                }
            }
            `;
            
            // Individuelle Hover-Styles f√ºr jedes Modul
            modules.forEach(module => {
                const props = module.properties;
                const hoverColor = props.buttonHoverColor || '#FFFFFF';
                const hoverBg = props.buttonHoverBg || 'rgba(6,58,168,0.8)';
                const hoverTransform = props.buttonHoverTransform || 'translateY(-2px)';
                const hoverShadow = props.buttonHoverShadow || '0 8px 24px rgba(6,58,168,0.25)';
                
                css += `.kerberos-btn-${module.id}:hover {
                    background: ${hoverBg} !important;
                    color: ${hoverColor} !important;
                    transform: ${hoverTransform} !important;
                    box-shadow: ${hoverShadow} !important;
                }\n\n`;
                
                // Ripple-Effekt f√ºr moderne Interaktion
                css += `.kerberos-btn-${module.id}:active {
                    transform: translateY(0px) !important;
                    transition: all 0.1s ease !important;
                }\n\n`;
            });
            
            // Fallback f√ºr Buttons ohne spezifische Klasse
            css += `.canvas-module a[style*="background"]:not(.kerberos-btn):hover {
                filter: brightness(1.1) saturate(1.1) !important;
                transform: translateY(-1px) !important;
                box-shadow: 0 6px 20px rgba(6,58,168,0.2) !important;
            }\n\n`;
            
            // CSS einf√ºgen
            const style = document.createElement('style');
            style.id = 'kerberos-button-hover-styles';
            style.textContent = css;
            document.head.appendChild(style);
            
            console.log('‚ú® Universelle Button-Hover-Effekte aktiviert!');
        } // <- Diese schlie√üende Klammer fehlte!

        // 7Ô∏è‚É£ ALIAS FUNKTION f√ºr Live-Rendering (jetzt AUSSERHALB der anderen Funktion)
        function renderCanvasWithInteractivity() {
            renderCanvas(); // Das macht jetzt automatisch die Interaktivit√§t
        }

        // HTML mit Properties verarbeiten
        function processModuleHTML(module) {
            let html = module.html;
            
            try {
                // Universelle Template-Verarbeitung f√ºr alle Module
                html = processUniversalModule(module, html);
                
                // Standard Property-Ersetzung mit Escape f√ºr HTML
                Object.entries(module.properties).forEach(([key, value]) => {
                    const regex = new RegExp(`{{${key}}}`, 'g');
                    // Sichere HTML-Ersetzung
                    const safeValue = typeof value === 'string' ? value.replace(/'/g, "&#39;").replace(/"/g, "&quot;") : value;
                    html = html.replace(regex, safeValue);
                });
                
                return html;
            } catch (error) {
                console.error('Fehler beim Verarbeiten des Moduls:', error);
                return `<div style="padding: 2rem; background: #fee; border: 1px solid #f00; color: #900;">
                    <h3>Modul-Fehler</h3>
                    <p>Das Modul "${module.name}" konnte nicht verarbeitet werden.</p>
                    <small>Fehler: ${error.message}</small>
                </div>`;
            }
        }

        // Spezielle Verarbeitung f√ºr Statistik-Module
        function processStatsModule(module, html) {
            const props = module.properties;
            let statsBlocks = '';
            
            // Dynamische Generierung der Statistik-Bl√∂cke
            for (let i = 1; i <= 4; i++) {
                const number = props[`stat${i}Number`];
                const text = props[`stat${i}Text`];
                const icon = props[`stat${i}Icon`];
                const iconColor = props[`stat${i}IconColor`];
                const numberColor = props[`stat${i}NumberColor`];
                const textColor = props[`stat${i}TextColor`];
                
                if (number && text) {
                    statsBlocks += `
                        <div style="text-align: center; padding: ${props.statPadding || '2rem'}; background: white; border-radius: 8px; box-shadow: 0 4px 12px rgba(6,58,168,0.1);">
                            <div style="font-family: 'Font Awesome 5 Pro'; font-size: ${props.iconSize || '3rem'}; color: ${iconColor || '#063AA8'}; margin-bottom: ${props.iconSpacing || '1rem'};">${icon || '&#xf005;'}</div>
                            <div style="font-size: ${props.numberSize || '3rem'}; font-weight: 700; color: ${numberColor || '#063AA8'}; margin-bottom: ${props.numberSpacing || '0.5rem'};">${number}</div>
                            <div style="font-size: ${props.textSize || '1rem'}; color: ${textColor || '#6c757d'};">${text}</div>
                        </div>`;
                }
            }
            
            return html.replace('{{statsBlocks}}', statsBlocks);
        }

        // Spezielle Verarbeitung f√ºr Team-Gallery-Module
        function processTeamGalleryModule(module, html) {
            const props = module.properties;
            let teamMembers = '';
            
            // Dynamische Generierung der Team-Mitglieder (bis zu 4)
            for (let i = 1; i <= 4; i++) {
                const name = props[`member${i}Name`];
                const position = props[`member${i}Position`];
                const description = props[`member${i}Description`];
                const image = props[`member${i}Image`];
                const initialBg = props[`member${i}InitialBg`] || 'linear-gradient(135deg, #063AA8, #009CE6)';
                const isActive = props[`member${i}Active`] === 'true';
                
                if (name && isActive) {
                    const initial = name.charAt(0).toUpperCase();
                    const avatarStyle = image ? 
                        `background: url('${image}') center/cover; background-color: #E9ECEF;` : 
                        `background: ${initialBg}; background-color: #E9ECEF; display: flex; align-items: center; justify-content: center; color: white; font-size: 2rem; font-weight: 700;`;
                    
                    const avatarContent = image ? '' : initial;
                    
                    teamMembers += `
                        <div style="background: white; border-radius: 8px; padding: ${props.cardPadding || '2rem'}; text-align: center; box-shadow: 0 4px 12px rgba(6,58,168,0.1); transition: transform 0.3s ease, box-shadow 0.3s ease;">
                            <div style="width: ${props.avatarSize || '120px'}; height: ${props.avatarSize || '120px'}; border-radius: 50%; margin: 0 auto 1rem auto; ${avatarStyle} transition: transform 0.3s ease;">${avatarContent}</div>
                            <h4 style="font-family: var(--heading-font-font-family); font-size: var(--heading-4-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: ${props.nameColor || '#212529'}; margin: 0 0 0.5rem 0;">${name}</h4>
                            <p style="font-family: var(--body-font-font-family); font-size: var(--small-text-size); line-height: var(--body-font-line-height); color: ${props.positionColor || '#6c757d'}; margin: 0 0 1rem 0; font-weight: 600;">${position}</p>
                            <p style="font-family: var(--body-font-font-family); font-size: var(--small-text-size); line-height: var(--body-font-line-height); color: ${props.descriptionColor || '#6c757d'}; margin: 0;">${description}</p>
                        </div>`;
                }
            }
            
            return html.replace('{{teamMembers}}', teamMembers);
        }


        // Produkt-√úbersicht Modul Verarbeitung
        function processProductOverviewModule(module, html) {
            const props = module.properties;
            
            // Header Content (mit optionaler Subtitle)
            let headerContent = `<div style="text-align: center; margin-bottom: 3rem;">
                <h2 style="font-family: var(--heading-font-font-family); font-size: var(--heading-2-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: ${props.titleColor}; margin: 0 0 1rem 0;">${props.title}</h2>`;
            
            if (props.showSubtitle === 'true' && props.subtitle) {
                headerContent += `<p style="font-family: var(--body-font-font-family); font-size: var(--normal-text-size); line-height: var(--body-font-line-height); color: ${props.subtitleColor}; max-width: 800px; margin: 0 auto;">${props.subtitle}</p>`;
            }
            
            headerContent += `</div>`;
            
            // Product Cards (nur aktive anzeigen)
            let productCards = '';
            for (let i = 1; i <= 6; i++) {
                if (props[`product${i}Active`] === 'true') {
                    const title = props[`product${i}Title`] || `Produkt ${i}`;
                    const description = props[`product${i}Description`] || 'Beschreibung';
                    const image = props[`product${i}Image`] || 'https://images.unsplash.com/photo-1551434678-e076c223a692?w=400&h=300&fit=crop';
                    const link = props[`product${i}Link`] || '#';
                    
                    productCards += `
                        <a href="${link}" class="product-card-${module.id}" style="background: #FFFFFF; border: 1px solid ${props.cardBorderColor}; border-radius: 8px; overflow: hidden; transition: all 0.3s ease; text-decoration: none; display: block; cursor: pointer;">
                            <img src="${image}" alt="${title}" style="width: 100%; height: 200px; object-fit: cover;">
                            <div style="padding: 1rem;">
                                <h4 style="font-family: var(--heading-font-font-family); color: ${props.cardTitleColor}; margin: 0 0 0.5rem 0; font-size: 1.1rem;">${title}</h4>
                                <p style="font-family: var(--body-font-font-family); color: ${props.cardDescriptionColor}; margin: 0; font-size: 0.9rem;">${description}</p>
                            </div>
                        </a>`;
                }
            }
            
            // CSS f√ºr Hover-Effekte hinzuf√ºgen
            const hoverCSS = `<style>
                .product-card-${module.id}:hover {
                    transform: translateY(-4px) !important;
                    box-shadow: ${props.cardHoverShadow} !important;
                    border-color: rgba(6,58,168,0.3) !important;
                }
                .product-card-${module.id}:active {
                    transform: translateY(-2px) !important;
                    transition: all 0.1s ease !important;
                }
            </style>`;
            
            // Template zusammenbauen
            html = html.replace('{{headerContent}}', headerContent);
            html = html.replace('{{productCards}}', productCards);
            
            // CSS hinzuf√ºgen
            html = hoverCSS + html;
            
            return html;
        }

        // Spezielle Verarbeitung f√ºr Bild-Text-Module
        function processImageTextModule(module, html) {
            const props = module.properties;
            const layoutType = props.layoutType || 'image-left';
            let layoutContent = '';
            
            // Icon und Text Content
            const iconElement = props.iconClass ? 
                `<div style="font-family: 'Font Awesome 5 Pro'; font-size: var(--large-text-size); color: ${props.iconColor}; margin-bottom: 1rem;">${props.iconClass}</div>` : '';
            
            const textContent = `
                ${iconElement}
                <h3 style="font-family: var(--heading-font-font-family); font-size: var(--heading-3-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: ${props.titleColor}; margin: 0 0 1rem 0;">${props.title}</h3>
                <p style="font-family: var(--body-font-font-family); font-size: var(--normal-text-size); line-height: var(--body-font-line-height); color: ${props.textColor}; margin: 0 0 2rem 0;">${props.text}</p>
                <a href="${props.buttonLink}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: ${props.buttonBgColor}; color: ${props.buttonTextColor}; padding: 0.75rem 1.5rem; border-radius: 6px; text-decoration: none; display: inline-block;">${props.buttonText}</a>
            `;
            
            const imageContent = props.imageUrl ? 
                `<img src="${props.imageUrl}" alt="${props.imageAlt}" style="width: 100%; border-radius: 8px; box-shadow: 0 4px 12px rgba(6,58,168,0.1);">` : 
                `<div style="width: 100%; height: 300px; background: linear-gradient(135deg, #f8f9fa, #e9ecef); border-radius: 8px; display: flex; align-items: center; justify-content: center; color: #6c757d; font-size: 1.2rem;">üì∏ Bild hinzuf√ºgen</div>`;
            
            // Layout-spezifischer Content
            switch(layoutType) {
                case 'image-left':
                    layoutContent = `<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: ${gap}; align-items: center;">
                        <div class="mobile-image-first">${imageContent}</div>
                        <div class="mobile-text-second">${textContent}</div>
                    </div>
                    <style>
                    .mobile-image-first { order: 1; }
                    .mobile-text-second { order: 2; }
                    @media (max-width: 768px) {
                        .mobile-image-first { order: 1 !important; }
                        .mobile-text-second { order: 2 !important; }
                    }
                    </style>`;
                    break;
                    
                case 'image-right':
                    layoutContent = `<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: ${gap}; align-items: center;">
                        <div class="mobile-image-first">${imageContent}</div>
                        <div class="mobile-text-second">${textContent}</div>
                    </div>
                    <style>
                    .mobile-image-first { order: 2; }
                    .mobile-text-second { order: 1; }
                    @media (max-width: 768px) {
                        .mobile-image-first { order: 1 !important; }
                        .mobile-text-second { order: 2 !important; }
                    }
                    </style>`;
                    break;
                    
                case 'image-top':
                    layoutContent = `
                        <div style="text-align: center;">
                            <div style="margin-bottom: ${props.contentGap};">${imageContent}</div>
                            <div>${textContent}</div>
                        </div>`;
                    break;
                    
                case 'image-bottom':
                    layoutContent = `
                        <div style="text-align: center;">
                            <div style="margin-bottom: ${props.contentGap};">${textContent}</div>
                            <div>${imageContent}</div>
                        </div>`;
                    break;
                    
                default:
                    layoutContent = `
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: ${props.contentGap}; align-items: center;">
                            <div>${imageContent}</div>
                            <div>${textContent}</div>
                        </div>`;
            }
            
            return html.replace('{{layoutContent}}', layoutContent);
        }

        // Universelle Modul-Verarbeitung f√ºr alle aktuellen und zuk√ºnftigen Module
        function processUniversalModule(module, html) {
            const props = module.properties;

            console.log('üîç Template-ID:', module.templateId, 'f√ºr Modul:', module.name);
            
            // 0. Hover-Effekt Properties f√ºr alle Module hinzuf√ºgen (falls nicht vorhanden)
            if (!props.buttonHoverColor) props.buttonHoverColor = '#FFFFFF';
            if (!props.buttonHoverBg) props.buttonHoverBg = 'rgba(6,58,168,0.8)';
            if (!props.buttonHoverTransform) props.buttonHoverTransform = 'translateY(-2px)';
            if (!props.buttonHoverShadow) props.buttonHoverShadow = '0 8px 24px rgba(6,58,168,0.25)';
            
            // 1. Spezielle Module (falls vorhanden)
            if (module.templateId === 'kerberos-stats') {
                html = processStatsModule(module, html);
            } else if (module.templateId === 'kerberos-team-gallery') {
                html = processTeamGalleryModule(module, html);
            } else if (module.templateId === 'kerberos-faq-accordion') {
                html = processKerberosFAQ(module, html);
            } else if (module.templateId === 'kerberos-dashboard-showcase') {
                html = processKerberosDashboard(module, html);
            } else if (module.templateId === 'kerberos-testimonials-carousel') {
                html = processKerberosTestimonials(module, html);
            } else if (module.templateId === 'kerberos-testimonials-pro') {
                html = processKerberosTestimonialsPro(module, html);
            } else if (module.templateId === 'kerberos-features-grid') {
                html = processKerberosFeatures(module, html);
            } else if (module.templateId === 'kerberos-benefits') {
                html = processKerberosBenefits(module, html);    
            } else if (module.templateId === 'kerberos-process-timeline' || module.templateId === 'kerberos-process-timeline-fixed') {
                html = processKerberosTimeline(module, html);
            }
            // === NEUE MODULE ===
            else if (module.templateId === 'kerberos-features-modern') {
                html = processKerberosFeaturesModern(module, html);
            } else if (module.templateId === 'kerberos-api-documentation') {
                html = processKerberosApiDocumentation(module, html);
            } else if (module.templateId === 'kerberos-pricing-interactive') {
                html = processKerberosPricingInteractive(module, html);
            } else if (module.templateId === 'kerberos-newsletter-modern') {
                html = processKerberosNewsletterModern(module, html);
            } else if (module.templateId === 'kerberos-product-showcase') {
                html = processKerberosProductShowcase(module, html);
            } else if (module.templateId === 'kerberos-integrations-grid') {
                html = processKerberosIntegrationsGrid(module, html);
            } // In processUniversalModule hinzuf√ºgen:
            else if (module.templateId === 'kerberos-feature-comparison-extended') {
                html = processKerberosFeatureComparisonExtended(module, html);
            } else if (module.templateId === 'kerberos-pricing-responsive-extended') {
                html = processKerberosPricingResponseExtended(module, html);
            }
            // In processUniversalModule hinzuf√ºgen:
            else if (module.templateId === 'kerberos-testimonials-carousel-extended') {
                html = processKerberosTestimonialsExtended(module, html);
           } // In processUniversalModule hinzuf√ºgen:
            else if (module.templateId === 'kerberos-testimonials-carousel-extended') {
                html = processKerberosTestimonialsExtended(module, html);
            } else if (module.templateId === 'kerberos-team-gallery-fixed') {
                html = processKerberosTeamGalleryFixed(module, html);
            } else if (module.templateId === 'kerberos-product-overview') {
                html = processKerberosProductOverview(module, html);
            } else if (module.templateId === 'kerberos-product-fade-overview') {
                console.log('‚úÖ FADE OVERVIEW ERKANNT - Process-Funktion wird ausgef√ºhrt!');
                html = processKerberosProductFadeOverview(module, html);
            } else if (module.templateId === 'kerberos-warning-facts') {
                html = processKerberosWarningFacts(module, html);
            } else if (module.templateId === 'kerberos-company-presentation') {
                html = processKerberosCompanyPresentation(module, html);
            } else if (module.templateId === 'kerberos-feature-breaker') {
                html = processKerberosFeatureBreaker(module, html);
            }

            // 2. Universelle Layout-Verarbeitung f√ºr Bild+Text Module
            if (html.includes('{{layoutContent}}')) {
                html = processUniversalLayout(module, html);
            }
            
            // 3. Standard Property-Ersetzung f√ºr alle anderen Properties
            Object.entries(props).forEach(([key, value]) => {
                const regex = new RegExp(`{{${key}}}`, 'g');
                html = html.replace(regex, value);
            });

            // 4. Button-Klassen f√ºr Hover-Effekte hinzuf√ºgen
            html = html.replace(
                /(<a[^>]*style="[^"]*background:[^"]*"[^>]*>)/g, 
                (match) => {
                    if (match.includes('kerberos-btn') || match.includes('display: inline-flex') || 
                        match.includes('padding:') || match.includes('border-radius:')) {
                        return match.replace('<a', `<a class="kerberos-btn kerberos-btn-${module.id}"`);
                    }
                    return match;
                }
            );

            // 5. ‚ú® Hover-Effekt CSS einbetten (f√ºr Squarespace Export)
            html = embedHoverEffectsCSS(module, html);

            return html;
        }

        // ‚ú® Hover-Effekte CSS f√ºr Export generieren
        function embedHoverEffectsCSS(module, html) {
            const props = module.properties;
            
            // Hover-Properties mit Fallback-Werten
            const hoverColor = props.buttonHoverColor || '#FFFFFF';
            const hoverBg = props.buttonHoverBg || 'rgba(6,58,168,0.8)';
            const hoverTransform = props.buttonHoverTransform || 'translateY(-2px)';
            const hoverShadow = props.buttonHoverShadow || '0 8px 24px rgba(6,58,168,0.25)';
            
            // CSS f√ºr dieses spezifische Modul generieren
            const hoverCSS = `
            <style>
            /* Kerberos Button Hover Effects - ${module.name} */
            .kerberos-btn-${module.id} {
                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
                cursor: pointer !important;
                position: relative !important;
                overflow: hidden !important;
            }

            .kerberos-btn-${module.id}:hover {
                background: ${hoverBg} !important;
                color: ${hoverColor} !important;
                transform: ${hoverTransform} !important;
                box-shadow: ${hoverShadow} !important;
            }

            .kerberos-btn-${module.id}:active {
                transform: translateY(0px) !important;
                transition: all 0.1s ease !important;
            }

            /* Fallback f√ºr Buttons ohne spezifische Klasse */
            .kerberos-module-${module.id} a[style*="background"]:not(.kerberos-btn):hover {
                filter: brightness(1.1) saturate(1.1) !important;
                transform: translateY(-1px) !important;
                box-shadow: 0 6px 20px rgba(6,58,168,0.2) !important;
                transition: all 0.3s ease !important;
            }

            /* RESPONSIVE STYLES F√úR WARNUNGS-MODUL */
            @media (max-width: 768px) {
                .kerberos-warning-module h2 {
                    font-size: 1.5rem !important;
                    line-height: 1.3 !important;
                }
                
                .kerberos-warning-module h3 {
                    font-size: 1.2rem !important;
                }
                
                .kerberos-warning-module .background-overlay {
                    opacity: 0.05 !important;
                }
            }

            @media (max-width: 480px) {
                .kerberos-warning-module div[style*="grid-template-columns"] {
                    grid-template-columns: 1fr !important;
                    gap: 1.5rem !important;
                }
                
                .kerberos-warning-module div[style*="height: 80px"] {
                    height: 60px !important;
                }
            }
            </style>`;
            
            // CSS am Anfang des HTML einf√ºgen UND Wrapper-Klasse hinzuf√ºgen
            if (html.includes('<section') || html.includes('<div')) {
                // F√ºge Modul-spezifische Klasse zum Haupt-Element hinzu
                html = html.replace(/(<(?:section|div)[^>]*)(>)/, `$1 class="kerberos-module-${module.id}"$2`);
                // CSS vor dem HTML einf√ºgen
                html = hoverCSS + '\n' + html;
            }
            
            return html;
        }

        // Universelle Layout-Verarbeitung f√ºr alle Bild+Text-Kombinationen
        function processUniversalLayout(module, html) {
            const props = module.properties;
            const layoutType = props.layoutType || props.layout || 'image-left';
            
            // Content-Bl√∂cke intelligend erkennen
            const hasImage = props.imageUrl || html.includes('{{imageUrl}}');
            const hasIcon = props.iconClass || html.includes('{{iconClass}}');
            const hasButton = props.buttonText || html.includes('{{buttonText}}');
            
            // Hover-Effekt Properties hinzuf√ºgen (falls nicht vorhanden)
            if (!props.buttonHoverColor) props.buttonHoverColor = '#FFFFFF';
            if (!props.buttonHoverBg) props.buttonHoverBg = 'rgba(6,58,168,0.8)';
            if (!props.buttonHoverTransform) props.buttonHoverTransform = 'translateY(-2px)';
            if (!props.buttonHoverShadow) props.buttonHoverShadow = '0 8px 24px rgba(6,58,168,0.25)';
            
            // Icon Element (falls vorhanden)
            const iconElement = hasIcon ? 
                `<div style="margin-bottom: ${props.iconSpacing || '1rem'};">
                    <div style="font-family: 'Font Awesome 5 Pro'; font-size: ${props.iconSize || '2rem'}; color: ${props.iconColor || '#063AA8'}; display: inline-flex; align-items: center; justify-content: center; width: ${props.iconContainerSize || '60px'}; height: ${props.iconContainerSize || '60px'}; background: ${props.iconBackground || 'rgba(6,58,168,0.1)'}; border-radius: ${props.iconRadius || '50%'};">${props.iconClass || '&#xf132;'}</div>
                </div>` : '';
            
            // Text Content
            const textContent = `
                ${iconElement}
                <h3 style="font-family: var(--heading-font-font-family); font-size: var(--heading-3-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: ${props.titleColor || '#063AA8'}; margin: 0 0 ${props.titleSpacing || '1rem'} 0;">${props.title || 'Titel'}</h3>
                <p style="font-family: var(--body-font-font-family); font-size: var(--normal-text-size); line-height: var(--body-font-line-height); color: ${props.textColor || '#6c757d'}; margin: 0 0 ${props.textSpacing || '2rem'} 0;">${props.text || 'Text'}</p>
                ${hasButton ? `<a href="${props.buttonLink || '#'}" class="kerberos-btn kerberos-btn-${module.id}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: ${props.buttonBgColor || '#063AA8'}; color: ${props.buttonTextColor || '#FFFFFF'}; padding: ${props.buttonPadding || '0.75rem 1.5rem'}; border-radius: ${props.buttonRadius || '6px'}; text-decoration: none; display: inline-flex; align-items: center; gap: 0.5rem; box-shadow: ${props.buttonShadow || '0 4px 12px rgba(6,58,168,0.2)'}; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);">${props.buttonText || 'Button'}${props.buttonIcon ? `<span style="font-family: 'Font Awesome 5 Pro';">${props.buttonIcon}</span>` : ''}</a>` : ''}
            `;
            
            // Image Content (falls vorhanden)
            const imageContent = hasImage ? 
                (props.imageUrl ? 
                    `<div style="position: relative; overflow: hidden; border-radius: ${props.imageRadius || '8px'}; box-shadow: ${props.imageShadow || '0 4px 12px rgba(6,58,168,0.1)'};">
                        <img src="${props.imageUrl}" alt="${props.imageAlt || 'Bild'}" style="width: 100%; height: ${props.imageHeight || 'auto'}; object-fit: ${props.imageObjectFit || 'cover'}; object-position: ${props.imageObjectPosition || 'center'}; display: block; margin: 0; line-height: 0; ${props.imageCustomCSS || ''}">
                    </div>` : 
                    `<div style="width: 100%; height: 300px; background: linear-gradient(135deg, #f8f9fa, #e9ecef); border-radius: ${props.imageRadius || '8px'}; display: flex; align-items: center; justify-content: center; color: #6c757d; font-size: 1.2rem; margin: 0;">üì∏ Bild hinzuf√ºgen</div>`) : '';
            
            // Layout-Logik (funktioniert f√ºr alle Module)
            let layoutContent = '';
            const gap = props.contentGap || '4rem';
            
            if (!hasImage) {
                // Nur Text (zentriert)
                layoutContent = `<div style="text-align: center; max-width: 800px; margin: 0 auto;">${textContent}</div>`;
            } else {
                // Bild + Text Kombinationen
                switch(layoutType) {
                    case 'image-left':
                        layoutContent = `<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: ${gap}; align-items: center;">
                            <div>${imageContent}</div>
                            <div>${textContent}</div>
                        </div>`;
                        break;
                        
                    case 'image-right':
                        layoutContent = `<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: ${gap}; align-items: center;">
                            <div style="order: 2; @media (max-width: 768px) { order: 1; }">${imageContent}</div>
                            <div style="order: 1; @media (max-width: 768px) { order: 2; }">${textContent}</div>
                        </div>`;
                        break;
                        
                    case 'image-top':
                        layoutContent = `<div style="text-align: center; max-width: 800px; margin: 0 auto;">
                            <div style="margin-bottom: ${gap};">${imageContent}</div>
                            <div>${textContent}</div>
                        </div>`;
                        break;
                        
                    case 'image-bottom':
                        layoutContent = `<div style="text-align: center; max-width: 800px; margin: 0 auto;">
                            <div style="margin-bottom: ${gap};">${textContent}</div>
                            <div>${imageContent}</div>
                        </div>`;
                        break;
                        
                    default:
                        layoutContent = `<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: ${gap}; align-items: center;">
                            <div>${imageContent}</div>
                            <div>${textContent}</div>
                        </div>`;
                }
            }
            
            return html.replace('{{layoutContent}}', layoutContent);
        }

        function processKerberosCompanyPresentation(module, html) {
            const props = module.properties;
            
            // Rechte Seite: Bild oder Shape
            let rightSideContent = '';
            
            if (props.imageUrl && props.imageUrl.trim() !== '') {
                // Zeige Bild wenn vorhanden
                rightSideContent = `
                    <div style="position: relative; height: 300px; border-radius: 4px; overflow: hidden;">
                        <img src="${props.imageUrl}" 
                            alt="${props.imageAlt || 'Company Image'}" 
                            style="width: 100%; height: 100%; object-fit: cover; object-position: center;">
                    </div>`;
            } else {
                // Zeige Design-Shape wenn kein Bild
                rightSideContent = `
                    <div style="background: ${props.shapeColor}; border-radius: 4px; height: 300px; position: relative;">
                    </div>`;
            }
            
            // Ersetze den Platzhalter
            html = html.replace('{{rightSideContent}}', rightSideContent);
            
            return html;
        }

        function processKerberosBenefits(module, html) {
            const props = module.properties;
            const showIcons = props.showIcons === 'true';
            let benefitItems = '';
            
            for (let i = 1; i <= 6; i++) {
                const title = props[`benefit${i}Title`];
                const description = props[`benefit${i}Description`];
                const icon = props[`benefit${i}Icon`];
                const iconColor = props[`benefit${i}IconColor`];
                const titleColor = props[`benefit${i}TitleColor`];
                const descriptionColor = props[`benefit${i}DescriptionColor`];
                const isActive = props[`benefit${i}Active`] === 'true';
                
                if (title && description && isActive) {
                    const iconElement = showIcons ? 
                        `<div style="font-family: 'Font Awesome 5 Pro'; font-size: ${props.iconSize}; color: ${iconColor}; margin-bottom: ${props.iconSpacing}; text-align: center;">${icon}</div>` : '';
                    
                    benefitItems += `
                        <div class="kerberos-benefit-card" style="background: ${props.cardBackground}; border: 1px solid ${props.cardBorder}; border-radius: ${props.cardRadius}; padding: ${props.cardPadding}; text-align: center; transition: all 0.3s ease; cursor: default; box-shadow: ${props.cardShadow};">
                            ${iconElement}
                            <h3 style="font-family: var(--heading-font-font-family); font-size: ${props.titleSize}; font-weight: var(--heading-font-font-weight); color: ${titleColor}; margin: 0 0 ${props.titleSpacing} 0;">${title}</h3>
                            <p style="font-family: var(--body-font-font-family); font-size: ${props.descriptionSize}; line-height: var(--body-font-line-height); color: ${descriptionColor}; margin: 0;">${description}</p>
                        </div>`;
                }
            }
            
            return html.replace('{{benefitItems}}', benefitItems);
        }

        // Modul ausw√§hlen
        function selectModule(moduleId) {
            document.querySelectorAll('.canvas-module').forEach(el => {
                el.classList.remove('selected');
            });
            
            const moduleEl = document.querySelector(`[data-module-id="${moduleId}"]`);
            if (moduleEl) {
                moduleEl.classList.add('selected');
            }
            
            selectedModule = modules.find(m => m.id === moduleId);
            
            if (!selectedModule) {
                console.error('‚ùå Modul nicht gefunden:', moduleId);
                return;
            }
            
            // Validiere, dass das Template existiert
            const template = MODULE_TEMPLATES.find(t => t && t.id === selectedModule.templateId);
            if (!template) {
                console.error('‚ùå Template nicht gefunden f√ºr Modul:', selectedModule.name, 'Template-ID:', selectedModule.templateId);
            }
            
            renderPropertyPanel();
            updateExportButtons(); // Update export buttons when module is selected
        }

        // Properties die ausgeblendet werden (√ºbernimmt Squarespace CSS)
        function shouldHideProperty(key) {
            const hiddenProperties = [
                // Gr√∂√üen (√ºbernimmt Squarespace)
                'titleSize', 'textSize', 'buttonTextSize', 'numberSize', 'iconSize',
                'headingSize', 'subtitleSize', 'largeTextSize', 'smallTextSize',
                
                // Fonts (√ºbernimmt Squarespace)
                'titleFont', 'textFont', 'buttonFont', 'headingFont', 'bodyFont',
                
                // Veraltete Layout-Properties (ersetzt durch layoutType)
                'imageOrder', 'textOrder',
                
                // Interne Properties
                'templateId', 'moduleId', 'version'
            ];
            
            return hiddenProperties.includes(key);
        }

        function renderPropertyPanel() {
            const panel = document.getElementById('propertyPanel');
            
            if (!selectedModule) {
                panel.innerHTML = '<p style="color: #6c757d; text-align: center; padding: 1.5rem;">Modul ausw√§hlen zum Bearbeiten</p>';
                return;
            }
                        
            console.log('üîç Template-ID:', selectedModule.templateId, 'f√ºr Modul:', selectedModule.name);

            const template = MODULE_TEMPLATES.find(t => t && t.id === selectedModule.templateId);

            if (!template) {
                panel.innerHTML = `
                    <div style="color: #dc3545; text-align: center; padding: 1.5rem; background: #fee; border: 1px solid #f5c6cb; border-radius: 4px;">
                        <h4>‚ö†Ô∏è Template nicht gefunden</h4>
                        <p>Template-ID: ${selectedModule.templateId}</p>
                        <p>Modul: ${selectedModule.name}</p>
                        <button onclick="fixMissingTemplate('${selectedModule.id}')" class="btn btn-primary" style="margin-top: 1rem;">Template reparieren</button>
                    </div>
                `;
                return;
            }
                        
            let html = `
                <h4 style="color: var(--kerberos-primary); margin-bottom: 1rem; font-size: 1rem;">${template.name}</h4>
                <p style="font-size: 0.8rem; color: #6c757d; margin-bottom: 1.5rem;">${template.description}</p>
            `;
            
            // Gruppiere Properties f√ºr Accordion
            const propertyGroups = groupPropertiesForAccordion(selectedModule.properties);

            Object.entries(propertyGroups).forEach(([groupName, groupProperties]) => {
                if (groupName === 'general') {
                    // Allgemeine Properties ohne Accordion
                    groupProperties.forEach(([key, value]) => {
                        const fieldType = getFieldType(key, value);
                        const label = formatPropertyName(key);
                        html += renderPropertyField(key, value, fieldType, label);
                    });
                } else {
                    // Accordion f√ºr gruppierte Properties
                    const isExpanded = groupProperties.some(([key]) => key.includes('1') || key.includes('Active')); // Erste Gruppe standardm√§√üig offen
                    html += `
                        <div class="property-accordion" style="margin: 1rem 0; border: 1px solid var(--kerberos-border); border-radius: 6px; overflow: hidden;">
                            <div class="accordion-header" onclick="toggleAccordion(this)" style="background: var(--kerberos-primary); color: white; padding: 0.75rem 1rem; cursor: pointer; display: flex; justify-content: space-between; align-items: center; font-weight: 600; font-size: 0.9rem;">
                                <span>${formatGroupName(groupName)}</span>
                                <span class="accordion-icon" style="transition: transform 0.3s ease;">${isExpanded ? '‚àí' : '+'}</span>
                            </div>
                            <div class="accordion-content" style="max-height: ${isExpanded ? 'none' : '0'}; overflow: hidden; transition: max-height 0.3s ease; background: #fafbfc;">
                                <div style="padding: 1rem;">
                    `;
                    
                    groupProperties.forEach(([key, value]) => {
                        const fieldType = getFieldType(key, value);
                        const label = formatPropertyName(key);
                        html += renderPropertyField(key, value, fieldType, label);
                    });
                    
                    html += `
                                </div>
                            </div>
                        </div>
                    `;
                }
            });
            
            html += `
                <div style="margin-top: 1.5rem; padding-top: 1rem; border-top: 1px solid var(--kerberos-border);">
                    <div style="background: #e3f2fd; border: 1px solid #2196f3; border-radius: 6px; padding: 0.75rem; margin-bottom: 1rem; font-size: 0.8rem; text-align: center;">
                        <span style="color: #1976d2;">‚ö° Auto-Update aktiv</span><br>
                        <small style="color: #666;">√Ñnderungen werden automatisch √ºbernommen</small>
                    </div>
                    <button class="btn btn-success" onclick="applyChanges()" style="width: 100%; margin-bottom: 0.5rem;">üîÑ Sofort aktualisieren</button>
                    <button class="btn btn-secondary" onclick="copyModuleCode('${selectedModule.id}')" style="width: 100%; margin-bottom: 0.5rem;">üìã Code kopieren</button>
                    <button class="btn btn-warning" onclick="duplicateModule('${selectedModule.id}')" style="width: 100%; margin-bottom: 0.5rem;">üìÑ Duplizieren</button>
                </div>
            `;

            html += `
                <div style="margin-top: 1rem;">
                    <h5 style="font-size: 0.9rem; margin-bottom: 0.5rem; color: var(--kerberos-primary);">Squarespace Code:</h5>
                    <div class="code-output" id="moduleCode">${escapeHtml(processModuleHTML(selectedModule))}</div>
                    <button class="copy-btn" onclick="copyToClipboard('moduleCode')">üìã Squarespace Code kopieren</button>
                </div>
            `;
            
            panel.innerHTML = html;
        }

        function groupPropertiesForAccordion(properties) {
            const groups = {
                general: [],
                testimonials: [],
                features: [],
                team: [],
                stats: [],
                rows: [],
                plans: [],
                members: []
            };
            
            Object.entries(properties).forEach(([key, value]) => {
                if (shouldHideProperty(key)) return;
                
                // Gruppierung basierend auf Property-Namen
                if (key.includes('testimonial')) {
                    groups.testimonials.push([key, value]);
                } else if (key.includes('feature') && (key.includes('Plan') || key.includes('Name'))) {
                    groups.features.push([key, value]);
                } else if (key.includes('member') || key.includes('team')) {
                    groups.team.push([key, value]);
                } else if (key.includes('stat') && key.match(/\d/)) {
                    groups.stats.push([key, value]);
                } else if (key.includes('row') && key.match(/\d/)) {
                    groups.rows.push([key, value]);
                } else if (key.includes('plan') && key.match(/\d/)) {
                    groups.plans.push([key, value]);
                } else {
                    groups.general.push([key, value]);
                }
            });
            
            // Entferne leere Gruppen
            Object.keys(groups).forEach(key => {
                if (groups[key].length === 0) {
                    delete groups[key];
                }
            });
            
            return groups;
        }

        function formatGroupName(groupKey) {
            const names = {
                general: 'Allgemeine Einstellungen',
                testimonials: 'üí¨ Testimonials & Bewertungen',
                features: '‚≠ê Features & Eigenschaften',
                team: 'üë• Team-Mitglieder',
                stats: 'üìä Statistiken & Zahlen',
                rows: 'üìã Tabellen-Zeilen',
                plans: 'üí∞ Preispl√§ne',
                members: 'üë§ Mitarbeiter'
            };
            return names[groupKey] || groupKey;
        }

        function renderPropertyField(key, value, fieldType, label) {
            let html = `<div class="form-group">`;
            html += `<label class="form-label">${label}</label>`;
            
            if (fieldType === 'color') {
                html += renderColorPicker(key, value);
            } else if (fieldType === 'icon') {
                html += renderIconPicker(key, value);
            } else if (fieldType === 'image') {
                html += renderImagePicker(key, value);
            } else if (fieldType === 'spacing') {
                html += renderSpacingPicker(key, value);
            } else if (fieldType === 'richtext') {
                html += renderRichTextEditor(key, value);
            } else if (fieldType === 'textarea') {
                html += `<textarea class="form-control" oninput="updateProperty('${key}', this.value)" style="min-height: 80px;">${value}</textarea>`;
            } else if (fieldType === 'select') {
                html += renderSelectPicker(key, value);
            } else {
                html += `<input type="text" class="form-control" value="${value}" oninput="updateProperty('${key}', this.value)">`;
            }
            
            html += `</div>`;
            return html;
        }

        function toggleAccordion(header) {
            const content = header.nextElementSibling;
            const icon = header.querySelector('.accordion-icon');
            const isOpen = content.style.maxHeight !== '0px' && content.style.maxHeight !== '';
            
            if (isOpen) {
                content.style.maxHeight = '0px';
                icon.textContent = '+';
            } else {
                content.style.maxHeight = content.scrollHeight + 'px';
                icon.textContent = '‚àí';
            }
        }

        // Globale Funktion verf√ºgbar machen
        window.toggleAccordion = toggleAccordion;

        function groupPropertiesByContext(properties) {
            const groups = {
                'Allgemein': {},
                'Plan 1': {},
                'Plan 2': {},  
                'Plan 3': {},
                'Tabelle': {},
                'Layout': {}
            };
            
            Object.entries(properties).forEach(([key, value]) => {
                if (shouldHideProperty(key)) return;
                
                if (key.includes('plan1')) groups['Plan 1'][key] = value;
                else if (key.includes('plan2')) groups['Plan 2'][key] = value;
                else if (key.includes('plan3')) groups['Plan 3'][key] = value;
                else if (key.includes('table') || key.includes('feature')) groups['Tabelle'][key] = value;
                else if (key.includes('Spacing') || key.includes('Gap') || key.includes('Padding')) groups['Layout'][key] = value;
                else groups['Allgemein'][key] = value;
            });
            
            // Leere Gruppen entfernen
            return Object.fromEntries(Object.entries(groups).filter(([, props]) => Object.keys(props).length > 0));
        }

        function renderPlanQuickSetup(planNumber) {
            return `
                <div style="background: #F8F9FA; padding: 1rem; border-radius: 6px; margin-bottom: 1rem; border: 1px solid #DEE2E6;">
                    <h5 style="margin: 0 0 1rem 0; color: #063AA8; font-size: 0.9rem;">‚ö° Plan ${planNumber} Schnell-Setup</h5>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 0.5rem; margin-bottom: 1rem;">
                        <button class="btn btn-secondary" onclick="applyPlanTemplate('${planNumber}', 'basic')" style="font-size: 0.75rem; padding: 0.4rem;">üíº Basis</button>
                        <button class="btn btn-secondary" onclick="applyPlanTemplate('${planNumber}', 'premium')" style="font-size: 0.75rem; padding: 0.4rem;">‚≠ê Premium</button>
                        <button class="btn btn-secondary" onclick="applyPlanTemplate('${planNumber}', 'enterprise')" style="font-size: 0.75rem; padding: 0.4rem;">üè¢ Enterprise</button>
                        <button class="btn btn-warning" onclick="copyFromPlan('${planNumber}')" style="font-size: 0.75rem; padding: 0.4rem;">üìã Kopieren</button>
                    </div>
                </div>
            `;
        }

        function switchPropertyTab(e) {
            const targetGroup = e.target.dataset.group;
            
            // Update Tabs
            document.querySelectorAll('.property-tab').forEach(tab => {
                const isActive = tab.dataset.group === targetGroup;
                tab.style.background = isActive ? '#063AA8' : 'transparent';
                tab.style.color = isActive ? 'white' : '#063AA8';
            });
            
            // Update Content
            document.querySelectorAll('.property-group').forEach(group => {
                group.style.display = group.dataset.group === targetGroup ? 'block' : 'none';
            });
        }

        function groupPropertiesByContext(properties) {
            const groups = {
                'Allgemein': {},
                'Plan 1': {},
                'Plan 2': {},
                'Plan 3': {},
                'Tabelle': {},
                'Layout': {}
            };
            
            Object.entries(properties).forEach(([key, value]) => {
                if (shouldHideProperty(key)) return;
                
                if (key.includes('plan1')) groups['Plan 1'][key] = value;
                else if (key.includes('plan2')) groups['Plan 2'][key] = value;
                else if (key.includes('plan3')) groups['Plan 3'][key] = value;
                else if (key.includes('table') || key.includes('feature')) groups['Tabelle'][key] = value;
                else if (key.includes('Spacing') || key.includes('Gap')) groups['Layout'][key] = value;
                else groups['Allgemein'][key] = value;
            });
            
            // Leere Gruppen entfernen
            return Object.fromEntries(Object.entries(groups).filter(([, props]) => Object.keys(props).length > 0));
        }

        function switchPropertyTab(e) {
            const targetGroup = e.target.dataset.group;
            
            // Update Tabs
            document.querySelectorAll('.property-tab').forEach(tab => {
                const isActive = tab.dataset.group === targetGroup;
                tab.style.background = isActive ? '#063AA8' : 'transparent';
                tab.style.color = isActive ? 'white' : '#063AA8';
            });
            
            // Update Content
            document.querySelectorAll('.property-group').forEach(group => {
                group.style.display = group.dataset.group === targetGroup ? 'block' : 'none';
            });
        }

        // Generische Property-Type-Erkennung f√ºr alle Module
        function getFieldType(key, value) {
            // Farben (immer Color Picker)
            if (key.includes('Color') || key.includes('color')) return 'color';
            
            // Icons (immer Icon Picker)  
            if (key.includes('Icon') || key.includes('icon') && key !== 'iconSize' && key !== 'iconSpacing' && key !== 'iconRadius' && key !== 'iconBackground' && key !== 'iconContainerSize') return 'icon';
            
            // Bilder (nur echte URLs)
            if ((key.includes('Image') || key.includes('image') || key.endsWith('Url')) && !key.includes('Alt') && !key.includes('Order') && !key.includes('Radius') && !key.includes('Shadow') && !key.includes('Background')) return 'image';
            
            // Dropdowns f√ºr Optionen
            if (key.includes('Order') || key.includes('order') || 
                key.includes('Active') || key.includes('active') || 
                key.includes('Count') || key.includes('count') || 
                key.includes('Layout') || key.includes('layout') ||
                key.includes('Type') || key.includes('type') ||
                key.endsWith('Alt') || key === 'imageAlt' ||
                key.includes('Border') || key.includes('border') ||
                key.includes('Align') || key.includes('align')) return 'select';
            
            // Abst√§nde (vereinfacht)
            if (key.includes('Spacing') || key.includes('spacing') || 
                key.includes('Margin') || key.includes('margin') || 
                key.includes('Padding') || key.includes('padding') || 
                key.includes('Gap') || key.includes('gap')) return 'spacing';
            
            // üÜï RICH TEXT f√ºr l√§ngere Texte und spezielle Felder
            if (key.includes('Question') || key.includes('Answer') || 
                key.includes('Description') || key.includes('Text') ||
                key.includes('Content') || key.includes('text') ||
                (typeof value === 'string' && value.length > 100)) return 'richtext';
            
            // Normale Textarea f√ºr mittlere Texte
            if ((key.includes('text') || key.includes('Description') || key.includes('description')) && value.length > 50 && value.length <= 100) return 'textarea';
            
            // Default: Text input
            return 'text';
        }

        // Vereinfachte Spacing-Auswahl
        function renderSpacingPicker(key, currentValue) {
            const spacingOptions = [
                { label: 'Eng', value: '1rem' },
                { label: 'Normal', value: '2rem' },
                { label: 'Weit', value: '3rem' },
                { label: 'Sehr weit', value: '4rem' },
                { label: 'Extrem weit', value: '6rem' }
            ];
            
            // Spezielle Optionen f√ºr Section Spacing
            if (key.includes('section') || key.includes('Section')) {
                spacingOptions.forEach(option => {
                    option.value = option.value + ' 0'; // z.B. "2rem 0"
                });
            }
            
            let html = `<select class="form-control" oninput="updateProperty('${key}', this.value)">`;
            
            spacingOptions.forEach(option => {
                const selected = option.value === currentValue || option.value.replace(' 0', '') === currentValue ? 'selected' : '';
                html += `<option value="${option.value}" ${selected}>${option.label}</option>`;
            });
            
            html += `</select>`;
            
            return html;
        }

        // Select Picker rendern (erweitert f√ºr alle Module)
        function renderSelectPicker(key, currentValue) {
            let options = [];
            
            // Layout-Optionen (universell f√ºr alle Module mit Bild+Text)
            if (key === 'layoutType' || key === 'layout' || key.includes('Layout')) {
                options = [
                    { value: 'image-left', label: 'üñºÔ∏è Bild links' },
                    { value: 'image-right', label: 'üñºÔ∏è Bild rechts' },
                    { value: 'image-top', label: 'üñºÔ∏è Bild oben' },
                    { value: 'image-bottom', label: 'üñºÔ∏è Bild unten' }
                ];
            }

            // Ausrichtungs-Optionen (f√ºr alle Align-Properties)
            else if (key.includes('Align') || key.includes('align')) {
                options = [
                    { value: 'left', label: '‚óÄÔ∏è Links' },
                    { value: 'center', label: 'üéØ Mitte' },
                    { value: 'right', label: '‚ñ∂Ô∏èÔ∏è Rechts' },
                    { value: 'justify', label: 'üìè Block' }
                ];
            }

            // Reihenfolge
            else if (key.includes('Order') || key.includes('order')) {
                options = [
                    { value: '1', label: 'Erste Position' },
                    { value: '2', label: 'Zweite Position' }
                ];
            }
            // Aktiv/Inaktiv
            else if (key.includes('Active') || key.includes('active')) {
                options = [
                    { value: 'true', label: 'Anzeigen' },
                    { value: 'false', label: 'Ausblenden' }
                ];
            }
            // Anzahl
            else if (key.includes('Count') || key.includes('count')) {
                options = [
                    { value: '1', label: '1 Element' },
                    { value: '2', label: '2 Elemente' },
                    { value: '3', label: '3 Elemente' },
                    { value: '4', label: '4 Elemente' }
                ];
            }
            // Alt-Text Vorschl√§ge
            else if (key === 'imageAlt' || key.includes('Alt')) {
                options = [
                    { value: 'Compliance Beratung', label: 'Compliance Beratung' },
                    { value: 'Business Consulting', label: 'Business Consulting' },
                    { value: 'Team Meeting', label: 'Team Meeting' },
                    { value: 'Office Building', label: 'Office Building' },
                    { value: 'Technology Solutions', label: 'Technology Solutions' },
                    { value: 'Professional Services', label: 'Professional Services' }
                ];
            }
            // Button Border
            else if (key.includes('Border') || key.includes('border')) {
                options = [
                    { value: 'none', label: 'Kein Rahmen' },
                    { value: '1px solid #063AA8', label: 'D√ºnner Rahmen' },
                    { value: '2px solid #063AA8', label: 'Dicker Rahmen' },
                    { value: '1px solid rgba(255,255,255,0.3)', label: 'Transparenter Rahmen' }
                ];
            }
            
            let html = `<select class="form-control" oninput="updateProperty('${key}', this.value)">`;
            
            options.forEach(option => {
                const selected = option.value === currentValue ? 'selected' : '';
                html += `<option value="${option.value}" ${selected}>${option.label}</option>`;
            });
            
            html += `</select>`;
            
            return html;
        }

        // Color Picker rendern
        function renderColorPicker(key, currentValue) {
            const colors = Object.values(KERBEROS_COLORS);
            let html = `<div class="color-picker">`;
            
            colors.forEach(color => {
                const selected = color === currentValue ? 'selected' : '';
                html += `<div class="color-option ${selected}" style="background: ${color};" onclick="updateProperty('${key}', '${color}')"></div>`;
            });
            
            html += `</div>`;
            html += `<input type="text" class="form-control" value="${currentValue}" oninput="updateProperty('${key}', this.value)" style="margin-top: 0.5rem;" placeholder="Hex-Code oder Farbname">`;
            
            return html;
        }

        // Icon Picker rendern
        function renderIconPicker(key, currentValue) {
            return `
                <div style="display: flex; align-items: center; gap: 0.5rem;">
                    <div style="font-family: 'Font Awesome 5 Pro'; font-size: 1.5rem; padding: 0.5rem; border: 1px solid var(--kerberos-border); border-radius: 4px; min-width: 50px; text-align: center;">
                        ${currentValue || '&#xf132;'}
                    </div>
                    <button type="button" class="btn btn-primary" onclick="showIconPicker('${key}')" style="flex: 1;">Icon ausw√§hlen</button>
                </div>
                <input type="text" class="form-control" value="${currentValue}" oninput="updateProperty('${key}', this.value)" style="margin-top: 0.5rem;" placeholder="Unicode (z.B. &#xf132;)">
            `;
        }

        // Image Picker rendern
        function renderImagePicker(key, currentValue) {
            const preview = currentValue ? `<img src="${currentValue}" class="image-preview" alt="Vorschau" style="max-width: 100%; max-height: 150px; border-radius: 4px; margin-top: 0.5rem; display: block;">` : '';
            
            return `
                <input type="text" class="form-control" value="${currentValue}" oninput="updateProperty('${key}', this.value)" placeholder="Squarespace Bild-URL eingeben..." style="margin-bottom: 0.5rem;">
                <div style="display: flex; gap: 0.5rem; margin-bottom: 0.5rem;">
                    <button type="button" class="btn btn-secondary" onclick="showImagePicker('${key}')" style="flex: 1;">üì∏ Bild hochladen/Stock</button>
                    <button type="button" class="btn btn-secondary" onclick="showImageEditor('${key}')" style="min-width: auto;">üé®</button>
                    <button type="button" class="btn btn-secondary" onclick="updateProperty('${key}', '')" style="min-width: auto;">üóëÔ∏è</button>
                </div>
                ${preview}
                ${currentValue ? renderImageAdjustments(key) : ''}
                <small style="color: #6c757d; font-size: 0.75rem;">üí° Tipp: Kopieren Sie die Bild-URL direkt aus Squarespace</small>
            `;
        }


        // Bild-Anpassungen rendern
        function renderImageAdjustments(key) {
            const baseKey = key.replace('Url', '').replace('Image', '').replace('image', '');
            
            return `
                <div style="margin-top: 1rem; padding: 1rem; background: #f8f9fa; border-radius: 6px; border: 1px solid #dee2e6;">
                    <h5 style="margin: 0 0 1rem 0; font-size: 0.9rem; color: #063AA8;">üé® Bild-Anpassungen</h5>
                    
                    <div class="form-group" style="margin-bottom: 0.75rem;">
                        <label class="form-label" style="font-size: 0.8rem;">Darstellung</label>
                        <select class="form-control" onchange="updateImageProperty('${baseKey}', 'objectFit', this.value)" style="font-size: 0.85rem;">
                            <option value="cover">Ausf√ºllen (Cover)</option>
                            <option value="contain">Komplett anzeigen (Contain)</option>
                            <option value="fill">Strecken (Fill)</option>
                            <option value="scale-down">Verkleinern (Scale-down)</option>
                            <option value="none">Original (None)</option>
                        </select>
                    </div>
                    
                    <div class="form-group" style="margin-bottom: 0.75rem;">
                        <label class="form-label" style="font-size: 0.8rem;">Position</label>
                        <select class="form-control" onchange="updateImageProperty('${baseKey}', 'objectPosition', this.value)" style="font-size: 0.85rem;">
                            <option value="center">Mitte</option>
                            <option value="top">Oben</option>
                            <option value="bottom">Unten</option>
                            <option value="left">Links</option>
                            <option value="right">Rechts</option>
                            <option value="top left">Oben Links</option>
                            <option value="top right">Oben Rechts</option>
                            <option value="bottom left">Unten Links</option>
                            <option value="bottom right">Unten Rechts</option>
                        </select>
                    </div>
                    
                    <div class="form-group" style="margin-bottom: 0.75rem;">
                        <label class="form-label" style="font-size: 0.8rem;">H√∂he</label>
                        <select class="form-control" onchange="updateImageProperty('${baseKey}', 'height', this.value)" style="font-size: 0.85rem;">
                            <option value="auto">Automatisch</option>
                            <option value="200px">Klein (200px)</option>
                            <option value="300px">Normal (300px)</option>
                            <option value="400px">Gro√ü (400px)</option>
                            <option value="500px">Sehr gro√ü (500px)</option>
                            <option value="100vh">Vollbildschirm</option>
                        </select>
                    </div>
                    
                    <div class="form-group" style="margin-bottom: 0;">
                        <label class="form-label" style="font-size: 0.8rem;">Zus√§tzliche CSS</label>
                        <input type="text" class="form-control" placeholder="z.B. margin-bottom: 0;" onchange="updateImageProperty('${baseKey}', 'customCSS', this.value)" style="font-size: 0.85rem;">
                        <small style="color: #6c757d; font-size: 0.7rem;">Behebe wei√üe Striche mit: margin: 0; display: block;</small>
                    </div>
                </div>
            `;
        }

        // Bild-Property aktualisieren
        function updateImageProperty(baseKey, property, value) {
            if (!selectedModule) return;
            
            const propertyKey = `${baseKey}${property.charAt(0).toUpperCase() + property.slice(1)}`;
            selectedModule.properties[propertyKey] = value;
            
            // Sofort anwenden
            applyChanges();
            showNotification(`üé® Bild-${property} aktualisiert`);
        }

        // Bild-Editor anzeigen
        function showImageEditor(property) {
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
                background: rgba(0,0,0,0.8); z-index: 2000; display: flex; 
                align-items: center; justify-content: center;
            `;
            
            modal.innerHTML = `
                <div style="background: white; padding: 2rem; border-radius: 8px; max-width: 500px; width: 90%; max-height: 80vh; overflow-y: auto;">
                    <h3 style="margin: 0 0 1rem 0; color: var(--kerberos-primary);">üé® Bild-Editor</h3>
                    
                    <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; padding: 1rem; margin-bottom: 1.5rem;">
                        <h4 style="color: #856404; margin: 0 0 0.5rem 0; font-size: 0.9rem;">üí° H√§ufige Probleme l√∂sen</h4>
                        <button onclick="fixWhiteStripes('${property}')" class="btn btn-warning" style="width: 100%; margin-bottom: 0.5rem;">üîß Wei√üe Striche entfernen</button>
                        <button onclick="resetImageCSS('${property}')" class="btn btn-secondary" style="width: 100%;">üîÑ CSS zur√ºcksetzen</button>
                    </div>
                    
                    <div style="margin-bottom: 1rem;">
                        <h4 style="margin: 0 0 1rem 0; font-size: 1rem;">Schnell-Anpassungen:</h4>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 0.5rem;">
                            <button onclick="applyImagePreset('${property}', 'hero')" class="btn btn-primary" style="font-size: 0.85rem;">üñºÔ∏è Hero-Stil</button>
                            <button onclick="applyImagePreset('${property}', 'card')" class="btn btn-primary" style="font-size: 0.85rem;">üÉè Karten-Stil</button>
                            <button onclick="applyImagePreset('${property}', 'thumbnail')" class="btn btn-primary" style="font-size: 0.85rem;">üîç Vorschau-Stil</button>
                            <button onclick="applyImagePreset('${property}', 'background')" class="btn btn-primary" style="font-size: 0.85rem;">üåÑ Hintergrund-Stil</button>
                        </div>
                    </div>
                    
                    <div style="display: flex; gap: 0.5rem; justify-content: flex-end;">
                        <button onclick="closeImageEditor()" class="btn btn-secondary">Schlie√üen</button>
                    </div>
                </div>
            `;
            
            modal.id = 'imageEditorModal';
            document.body.appendChild(modal);
            
            // Close on outside click
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeImageEditor();
                }
            });
        }

        function closeImageEditor() {
            const modal = document.getElementById('imageEditorModal');
            if (modal) modal.remove();
        }

        function fixWhiteStripes(property) {
            if (!selectedModule) return;
            
            const baseKey = property.replace('Url', '').replace('Image', '').replace('image', '');
            
            // F√ºge CSS-Properties hinzu um wei√üe Striche zu entfernen
            selectedModule.properties[`${baseKey}ObjectFit`] = 'cover';
            selectedModule.properties[`${baseKey}CustomCSS`] = 'margin: 0; display: block; line-height: 0;';
            selectedModule.properties[`${baseKey}Height`] = 'auto';
            
            applyChanges();
            renderPropertyPanel();
            showNotification('üîß Wei√üe Striche entfernt');
            closeImageEditor();
        }

        function resetImageCSS(property) {
            if (!selectedModule) return;
            
            const baseKey = property.replace('Url', '').replace('Image', '').replace('image', '');
            
            // Entferne alle Image-CSS Properties
            delete selectedModule.properties[`${baseKey}ObjectFit`];
            delete selectedModule.properties[`${baseKey}ObjectPosition`];
            delete selectedModule.properties[`${baseKey}Height`];
            delete selectedModule.properties[`${baseKey}CustomCSS`];
            
            applyChanges();
            renderPropertyPanel();
            showNotification('üîÑ Bild-CSS zur√ºckgesetzt');
            closeImageEditor();
        }

        function applyImagePreset(property, preset) {
            if (!selectedModule) return;
            
            const baseKey = property.replace('Url', '').replace('Image', '').replace('image', '');
            
            const presets = {
                hero: {
                    objectFit: 'cover',
                    objectPosition: 'center',
                    height: '400px',
                    customCSS: 'margin: 0; display: block;'
                },
                card: {
                    objectFit: 'cover',
                    objectPosition: 'center', 
                    height: '200px',
                    customCSS: 'margin: 0; display: block; border-radius: 8px;'
                },
                thumbnail: {
                    objectFit: 'cover',
                    objectPosition: 'center',
                    height: '120px',
                    customCSS: 'margin: 0; display: block;'
                },
                background: {
                    objectFit: 'cover',
                    objectPosition: 'center',
                    height: '100vh',
                    customCSS: 'margin: 0; display: block;'
                }
            };
            
            const config = presets[preset];
            if (config) {
                Object.entries(config).forEach(([key, value]) => {
                    selectedModule.properties[`${baseKey}${key.charAt(0).toUpperCase() + key.slice(1)}`] = value;
                });
                
                applyChanges();
                renderPropertyPanel();
                showNotification(`üé® ${preset.charAt(0).toUpperCase() + preset.slice(1)}-Stil angewendet`);
                closeImageEditor();
            }
        }

        // Globale Funktionen verf√ºgbar machen
        window.showImageEditor = showImageEditor;
        window.closeImageEditor = closeImageEditor;
        window.fixWhiteStripes = fixWhiteStripes;
        window.resetImageCSS = resetImageCSS;
        window.applyImagePreset = applyImagePreset;
        window.updateImageProperty = updateImageProperty;

        // Property Name formatieren - Vollst√§ndige deutsche √úbersetzung
        function formatPropertyName(key) {
            const names = {
                // === TITEL & TEXT ===
                title: 'Titel',
                subtitle: 'Untertitel', 
                text: 'Text',
                description: 'Beschreibung',
                
                // === FARBEN ===
                titleColor: 'Titel-Farbe',
                subtitleColor: 'Untertitel-Farbe',
                textColor: 'Text-Farbe',
                backgroundColor: 'Hintergrund-Farbe',
                nameColor: 'Name-Farbe',
                positionColor: 'Position-Farbe',
                descriptionColor: 'Beschreibung-Farbe',
                
                // === BUTTONS (f√ºr alle Module) ===
                buttonText: 'Button-Text',
                buttonLink: 'Button-Link',
                buttonBgColor: 'Button-Hintergrund',
                buttonTextColor: 'Button-Text-Farbe',
                buttonPadding: 'Button-Innenabstand',
                buttonRadius: 'Button-Rundung',
                buttonBorder: 'Button-Rahmen',
                buttonShadow: 'Button-Schatten',
                buttonSpacing: 'Button-Abstand',
                buttonIcon: 'Button-Icon',

                // === BUTTON HOVER-EFFEKTE (universell) ===
                buttonHoverColor: 'Button-Hover Text-Farbe',
                buttonHoverBg: 'Button-Hover Hintergrund',
                buttonHoverTransform: 'Button-Hover Transformation',
                buttonHoverShadow: 'Button-Hover Schatten',
                
                // === CTA BUTTONS (f√ºr moderne Module) ===
                primaryButtonText: 'Haupt-Button Text',
                primaryButtonLink: 'Haupt-Button Link',
                primaryButtonBg: 'Haupt-Button Farbe',
                primaryButtonColor: 'Haupt-Button Text-Farbe',
                secondaryButtonText: 'Zweit-Button Text', 
                secondaryButtonLink: 'Zweit-Button Link',
                secondaryButtonBg: 'Zweit-Button Farbe',
                secondaryButtonColor: 'Zweit-Button Text-Farbe',
                
                // === BILDER ===
                imageUrl: 'Bild-URL',
                imageAlt: 'Bild-Beschreibung',
                imageRadius: 'Bild-Rundung',
                imageShadow: 'Bild-Schatten',
                imageOverlay: 'Bild-Overlay',
                backgroundImage: 'Hintergrundbild',
                
                // === ICONS ===
                iconClass: 'Icon',
                iconColor: 'Icon-Farbe',
                iconBackground: 'Icon-Hintergrund',
                iconRadius: 'Icon-Rundung',
                iconSpacing: 'Icon-Abstand',
                iconContainerSize: 'Icon-Container-Gr√∂√üe',
                
                // === LAYOUT & ABST√ÑNDE ===
                layoutType: 'Layout',
                layout: 'Layout',
                sectionSpacing: 'Bereich-Abstand',
                contentGap: 'Inhalt-Abstand',
                contentPadding: 'Inhalt-Innenabstand',
                titleSpacing: 'Titel-Abstand',
                textSpacing: 'Text-Abstand',
                elementSpacing: 'Element-Abstand',
                
                // === TEAM MODULE ===
                teamGap: 'Team-Abstand',
                cardPadding: 'Karten-Innenabstand',
                avatarSize: 'Avatar-Gr√∂√üe',
                maxColumns: 'Max. Spalten',
                teamMemberCount: 'Anzahl Personen',
                
                // Team Member 1
                member1Name: 'Person 1: Name',
                member1Position: 'Person 1: Position',
                member1Description: 'Person 1: Beschreibung',
                member1Image: 'Person 1: Bild',
                member1InitialBg: 'Person 1: Avatar-Farbe',
                member1Active: 'Person 1: Anzeigen',
                
                // Team Member 2
                member2Name: 'Person 2: Name',
                member2Position: 'Person 2: Position', 
                member2Description: 'Person 2: Beschreibung',
                member2Image: 'Person 2: Bild',
                member2InitialBg: 'Person 2: Avatar-Farbe',
                member2Active: 'Person 2: Anzeigen',
                
                // Team Member 3
                member3Name: 'Person 3: Name',
                member3Position: 'Person 3: Position',
                member3Description: 'Person 3: Beschreibung', 
                member3Image: 'Person 3: Bild',
                member3InitialBg: 'Person 3: Avatar-Farbe',
                member3Active: 'Person 3: Anzeigen',
                
                // Team Member 4
                member4Name: 'Person 4: Name',
                member4Position: 'Person 4: Position',
                member4Description: 'Person 4: Beschreibung',
                member4Image: 'Person 4: Bild', 
                member4InitialBg: 'Person 4: Avatar-Farbe',
                member4Active: 'Person 4: Anzeigen',
                
                // === STATISTIKEN MODULE ===
                statsGap: 'Statistik-Abstand',
                statMinWidth: 'Statistik-Breite',
                statPadding: 'Statistik-Innenabstand',
                
                // Statistik 1
                stat1Number: 'Statistik 1: Zahl',
                stat1Text: 'Statistik 1: Text',
                stat1Icon: 'Statistik 1: Icon',
                stat1IconColor: 'Statistik 1: Icon-Farbe',
                stat1NumberColor: 'Statistik 1: Zahlen-Farbe',
                stat1TextColor: 'Statistik 1: Text-Farbe',
                
                // Statistik 2
                stat2Number: 'Statistik 2: Zahl',
                stat2Text: 'Statistik 2: Text',
                stat2Icon: 'Statistik 2: Icon',
                stat2IconColor: 'Statistik 2: Icon-Farbe',
                stat2NumberColor: 'Statistik 2: Zahlen-Farbe',
                stat2TextColor: 'Statistik 2: Text-Farbe',
                
                // Statistik 3
                stat3Number: 'Statistik 3: Zahl',
                stat3Text: 'Statistik 3: Text',
                stat3Icon: 'Statistik 3: Icon',
                stat3IconColor: 'Statistik 3: Icon-Farbe',
                stat3NumberColor: 'Statistik 3: Zahlen-Farbe',
                stat3TextColor: 'Statistik 3: Text-Farbe',
                
                // Statistik 4
                stat4Number: 'Statistik 4: Zahl',
                stat4Text: 'Statistik 4: Text',
                stat4Icon: 'Statistik 4: Icon',
                stat4IconColor: 'Statistik 4: Icon-Farbe',
                stat4NumberColor: 'Statistik 4: Zahlen-Farbe',
                stat4TextColor: 'Statistik 4: Text-Farbe',
                
                // === VERALTETE PROPERTIES (versteckt) ===
                imageOrder: 'Bild-Position',
                textOrder: 'Text-Position',
                
                // === GENERISCHE FALLBACKS ===
                // Automatische Patterns f√ºr unbekannte Properties
            };
            
            // Direkte √úbersetzung falls vorhanden
            if (names[key]) {
                return names[key];
            }
            
            // Generische Pattern-Erkennung f√ºr unbekannte Properties
            let formattedName = key;
            
            // Color -> Farbe
            if (key.endsWith('Color') || key.endsWith('color')) {
                formattedName = key.replace(/Color$|color$/, '-Farbe');
            }
            
            // Spacing -> Abstand
            if (key.endsWith('Spacing') || key.endsWith('spacing')) {
                formattedName = key.replace(/Spacing$|spacing$/, '-Abstand');
            }
            
            // Padding -> Innenabstand
            if (key.endsWith('Padding') || key.endsWith('padding')) {
                formattedName = key.replace(/Padding$|padding$/, '-Innenabstand');
            }
            
            // Margin -> Au√üenabstand  
            if (key.endsWith('Margin') || key.endsWith('margin')) {
                formattedName = key.replace(/Margin$|margin$/, '-Au√üenabstand');
            }
            
            // Gap -> Abstand
            if (key.endsWith('Gap') || key.endsWith('gap')) {
                formattedName = key.replace(/Gap$|gap$/, '-Abstand');
            }
            
            // Size -> Gr√∂√üe
            if (key.endsWith('Size') || key.endsWith('size')) {
                formattedName = key.replace(/Size$|size$/, '-Gr√∂√üe');
            }
            
            // Radius -> Rundung
            if (key.endsWith('Radius') || key.endsWith('radius')) {
                formattedName = key.replace(/Radius$|radius$/, '-Rundung');
            }
            
            // Shadow -> Schatten
            if (key.endsWith('Shadow') || key.endsWith('shadow')) {
                formattedName = key.replace(/Shadow$|shadow$/, '-Schatten');
            }
            
            // Border -> Rahmen
            if (key.endsWith('Border') || key.endsWith('border')) {
                formattedName = key.replace(/Border$|border$/, '-Rahmen');
            }
            
            // Background -> Hintergrund
            if (key.endsWith('Background') || key.endsWith('background')) {
                formattedName = key.replace(/Background$|background$/, '-Hintergrund');
            }
            
            // Image -> Bild
            if (key.endsWith('Image') || key.endsWith('image')) {
                formattedName = key.replace(/Image$|image$/, '-Bild');
            }
            
            // Icon -> Icon
            if (key.endsWith('Icon') || key.endsWith('icon')) {
                formattedName = key.replace(/Icon$|icon$/, '-Icon');
            }
            
            // Button -> Button
            if (key.startsWith('button') || key.startsWith('Button')) {
                formattedName = key.replace(/^button|^Button/, 'Button-');
            }
            
            // CamelCase in Bindestriche umwandeln und ersten Buchstaben gro√ü machen
            formattedName = formattedName
                .replace(/([a-z])([A-Z])/g, '$1-$2')
                .toLowerCase()
                .split('-')
                .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                .join('-');
            
            return formattedName;
        }

        function renderRichTextEditor(key, currentValue) {
            const editorId = `richtext-${key}-${Date.now()}`;
            
            const html = `
                <div class="richtext-editor-container" style="border: 1px solid var(--kerberos-border); border-radius: 4px; overflow: hidden;">
                    <!-- Toolbar -->
                    <div class="richtext-toolbar" style="background: #f8f9fa; border-bottom: 1px solid var(--kerberos-border); padding: 0.5rem; display: flex; gap: 0.25rem; flex-wrap: wrap;">
                        <button type="button" class="rt-btn rt-bold" data-command="bold" style="padding: 0.25rem 0.5rem; border: 1px solid #dee2e6; background: white; border-radius: 3px; cursor: pointer; font-weight: bold;" title="Fett">B</button>
                        <button type="button" class="rt-btn rt-italic" data-command="italic" style="padding: 0.25rem 0.5rem; border: 1px solid #dee2e6; background: white; border-radius: 3px; cursor: pointer; font-style: italic;" title="Kursiv">I</button>
                        <button type="button" class="rt-btn rt-underline" data-command="underline" style="padding: 0.25rem 0.5rem; border: 1px solid #dee2e6; background: white; border-radius: 3px; cursor: pointer; text-decoration: underline;" title="Unterstrichen">U</button>
                        <div style="width: 1px; background: #dee2e6; margin: 0 0.25rem;"></div>
                        <button type="button" class="rt-btn rt-link" data-command="createLink" style="padding: 0.25rem 0.5rem; border: 1px solid #dee2e6; background: white; border-radius: 3px; cursor: pointer;" title="Link">üîó</button>
                        <button type="button" class="rt-btn rt-unlink" data-command="unlink" style="padding: 0.25rem 0.5rem; border: 1px solid #dee2e6; background: white; border-radius: 3px; cursor: pointer;" title="Link entfernen">üîó‚ùå</button>
                        <div style="width: 1px; background: #dee2e6; margin: 0 0.25rem;"></div>
                        <button type="button" class="rt-btn rt-ul" data-command="insertUnorderedList" style="padding: 0.25rem 0.5rem; border: 1px solid #dee2e6; background: white; border-radius: 3px; cursor: pointer;" title="Liste">‚Ä¢ Liste</button>
                        <button type="button" class="rt-btn rt-clear" data-command="removeFormat" style="padding: 0.25rem 0.5rem; border: 1px solid #dee2e6; background: white; border-radius: 3px; cursor: pointer;" title="Formatierung entfernen">üßπ</button>
                    </div>
                    
                    <!-- Editor -->
                    <div id="${editorId}" 
                        contenteditable="true" 
                        class="richtext-editor"
                        data-property="${key}"
                        style="min-height: 120px; padding: 0.75rem; background: white; outline: none; line-height: 1.5;"
                        placeholder="Text eingeben...">${currentValue}</div>
                </div>`;
            
            // Script nach dem Rendern initialisieren
            setTimeout(() => initializeRichTextEditor(editorId, key), 10);
            
            return html;
        }

        // Separate Initialisierungsfunktion
        function initializeRichTextEditor(editorId, propertyKey) {
            const editor = document.getElementById(editorId);
            if (!editor) return;
            
            const toolbar = editor.parentElement.querySelector('.richtext-toolbar');
            if (!toolbar) return;
            
            // Toolbar Events
            toolbar.addEventListener('click', (e) => {
                if (e.target.classList.contains('rt-btn')) {
                    e.preventDefault();
                    const command = e.target.dataset.command;
                    
                    if (command === 'createLink') {
                        const url = prompt('Link-URL eingeben:', 'https://');
                        if (url) {
                            document.execCommand(command, false, url);
                        }
                    } else {
                        document.execCommand(command, false, null);
                    }
                    
                    editor.focus();
                    updatePropertyFromRichText(propertyKey, editor.innerHTML);
                }
            });
            
            // Content Changes
            editor.addEventListener('input', () => {
                updatePropertyFromRichText(propertyKey, editor.innerHTML);
            });
            
            // Paste as plain text
            editor.addEventListener('paste', (e) => {
                e.preventDefault();
                const text = (e.clipboardData || window.clipboardData).getData('text');
                document.execCommand('insertText', false, text);
            });
            
            // Update active toolbar buttons
            const updateToolbarState = () => {
                toolbar.querySelectorAll('.rt-btn').forEach(btn => {
                    btn.style.background = 'white';
                });
                
                if (document.queryCommandState('bold')) {
                    toolbar.querySelector('.rt-bold').style.background = '#e3f2fd';
                }
                if (document.queryCommandState('italic')) {
                    toolbar.querySelector('.rt-italic').style.background = '#e3f2fd';
                }
                if (document.queryCommandState('underline')) {
                    toolbar.querySelector('.rt-underline').style.background = '#e3f2fd';
                }
            };
            
            editor.addEventListener('keyup', updateToolbarState);
            editor.addEventListener('mouseup', updateToolbarState);
        }

        // 3Ô∏è‚É£ RICH TEXT PROPERTY UPDATE FUNKTION
        // F√ºge diese neue globale Funktion hinzu:

        function updatePropertyFromRichText(key, htmlValue) {
            if (!selectedModule) return;
            
            selectedModule.properties[key] = htmlValue;
            
            // Live-Update mit Debouncing
            clearTimeout(window.richTextTimeout);
            window.richTextTimeout = setTimeout(() => {
                renderCanvasWithInteractivity();
                showNotification('‚úÖ Text aktualisiert');
            }, 500);
        }

        // Property aktualisieren mit Live-Vorschau
        let autoApplyTimeout = null;

        // Update-Status verwalten
        let updateStatus = 'idle'; // 'idle', 'pending', 'updating'

        function showUpdateStatus(status) {
            const statusElement = document.querySelector('.auto-update-status');
            if (!statusElement) return;
            
            switch(status) {
                case 'pending':
                    statusElement.innerHTML = '<span style="color: #ff9800;">‚è≥ √Ñnderung erkannt...</span>';
                    break;
                case 'updating':
                    statusElement.innerHTML = '<span style="color: #2196f3;">üîÑ Aktualisiere...</span>';
                    break;
                case 'updated':
                    statusElement.innerHTML = '<span style="color: #4caf50;">‚úÖ Aktualisiert</span>';
                    setTimeout(() => {
                        if (statusElement) {
                            statusElement.innerHTML = '<span style="color: #1976d2;">‚ö° Auto-Update aktiv</span>';
                        }
                    }, 2000);
                    break;
                default:
                    statusElement.innerHTML = '<span style="color: #1976d2;">‚ö° Auto-Update aktiv</span>';
            }
        }

        // Hilfsfunktion: Bestimmt ob Property sofort aktualisiert werden soll
        function shouldUpdateImmediately(key) {
            const immediateKeys = [
                'title', 'subtitle', 'text', 'buttonText', 'description',
                'titleColor', 'textColor', 'backgroundColor', 'iconColor',
                'iconClass', 'buttonIcon', 'imageUrl'
            ];
            return immediateKeys.some(pattern => key.includes(pattern));
        }

        // Live DOM-Update ohne Re-Rendering
        function updatePropertyLive(key, value) {
            if (!selectedModule) return;
            
            const moduleElement = document.querySelector(`[data-module-id="${selectedModule.id}"] .module-content`);
            if (!moduleElement) return;
            
            try {
                // Text-Updates
                if (key === 'title') {
                    const titleElements = moduleElement.querySelectorAll('h1, h2, h3, h4, h5, h6');
                    titleElements.forEach(el => {
                        if (el.textContent.includes(selectedModule.properties.title) || el.textContent.trim() !== '') {
                            el.textContent = value;
                        }
                    });
                }
                
                // Button-Text Updates
                else if (key === 'buttonText') {
                    const buttons = moduleElement.querySelectorAll('a[href], button');
                    buttons.forEach(btn => {
                        if (btn.textContent.trim() === selectedModule.properties.buttonText || btn.textContent.trim() !== '') {
                            btn.textContent = value;
                        }
                    });
                }
                
                // Text-Content Updates
                else if (key === 'text' || key === 'description' || key === 'subtitle') {
                    const paragraphs = moduleElement.querySelectorAll('p');
                    paragraphs.forEach(p => {
                        if (p.textContent.includes(selectedModule.properties[key]) || p.textContent.length > 20) {
                            p.textContent = value;
                        }
                    });
                }
                
                // Farb-Updates
                else if (key.includes('Color') || key.includes('color')) {
                    updateColorsLive(moduleElement, key, value);
                }
                
                // Icon-Updates
                else if (key.includes('Icon') || key.includes('icon')) {
                    updateIconsLive(moduleElement, key, value);
                }
                
                // Background-Updates
                else if (key === 'backgroundColor') {
                    const section = moduleElement.closest('.canvas-module').querySelector('section');
                    if (section) {
                        section.style.background = value;
                    }
                }

                // Fallback: Versuche komplexe Module
                else if (updateComplexModuleLive(selectedModule.id, key, value)) {
                    // Erfolgreich mit speziellem Handler behandelt
                    return;
                }

                else if (selectedModule.templateId === 'kerberos-warning-facts' && 
                        (key.startsWith('fact') && (key.includes('Number') || key.includes('Description') || key.includes('Active')))) {
                    // Facts ge√§ndert - komplettes Modul neu rendern
                    const moduleElement = document.getElementById(`module-${selectedModule.id}`);
                    if (moduleElement) {
                        const template = MODULE_TEMPLATES.find(t => t.id === selectedModule.templateId);
                        if (template) {
                            moduleElement.innerHTML = processUniversalModule(selectedModule, template.html);
                        }
                    }
                }

                // Feature Breaker Live Updates
                else if (moduleElement.classList.contains('kerberos-module-kerberos-feature-breaker')) {
                    if (key === 'title') {
                        const titleEl = moduleElement.querySelector('h1');
                        if (titleEl) titleEl.textContent = value;
                    }
                    else if (key === 'subtitle') {
                        const subtitleEl = moduleElement.querySelector('h2');
                        if (subtitleEl) subtitleEl.textContent = value;
                    }
                    else if (key === 'description') {
                        const descEl = moduleElement.querySelector('p');
                        if (descEl) descEl.textContent = value;
                    }
                    else if (key === 'primaryButtonText') {
                        const btnEl = moduleElement.querySelector('.breaker-btn-primary');
                        if (btnEl) {
                            const iconHtml = btnEl.querySelector('span') ? btnEl.querySelector('span').outerHTML : '';
                            btnEl.innerHTML = value + ' ' + iconHtml;
                        }
                    }
                    else if (key === 'badgeText' && value) {
                        const badgeEl = moduleElement.querySelector('.breaker-badge');
                        if (badgeEl) badgeEl.textContent = value;
                    }
                    else if (key === 'showBadge') {
                        const badgeEl = moduleElement.querySelector('.breaker-badge');
                        if (badgeEl) badgeEl.style.display = value === 'true' ? 'block' : 'none';
                    }
                    else if (key === 'showSecondaryButton') {
                        const btnEl = moduleElement.querySelector('.breaker-btn-secondary');
                        if (btnEl) btnEl.style.display = value === 'true' ? 'inline-flex' : 'none';
                    }
                    else if (key === 'showIcon') {
                        const iconEl = moduleElement.querySelector('.breaker-icon');
                        if (iconEl) iconEl.style.display = value === 'true' ? 'block' : 'none';
                    }
                    else if (key === 'countdownActive') {
                        const countdownEl = moduleElement.querySelector('.breaker-countdown');
                        if (countdownEl) countdownEl.style.display = value === 'true' ? 'block' : 'none';
                    }
                    else if (key === 'showPricing') {
                        const pricingEl = moduleElement.querySelector('.breaker-pricing');
                        if (pricingEl) pricingEl.style.display = value === 'true' ? 'block' : 'none';
                    }
                }
                
                
            } catch (error) {
                console.warn('Live-Update fehlgeschlagen, fallback zu vollst√§ndigem Update:', error);
                // Fallback zu komplettem Update
                clearTimeout(autoApplyTimeout);
                autoApplyTimeout = setTimeout(() => applyChanges(), 100);
            }

            // Testimonials Live Updates
            if (key.includes('testimonial')) {
                const module = modules.find(m => m.id === moduleId);
                if (module && (module.templateId === 'kerberos-testimonials-carousel' || module.templateId === 'kerberos-testimonials-pro')) {
                    setTimeout(() => {
                        initializeTestimonialsCarousels();
                    }, 100);
                }
            }

            // Company Presentation Live Updates
            else if (key.startsWith('stat') && key.includes('Value')) {
                const statNumber = key.match(/stat(\d+)Value/)[1];
                const statElements = moduleElement.querySelectorAll(`div[style*="font-size: 1.4rem"]`);
                if (statElements[statNumber - 1]) {
                    statElements[statNumber - 1].textContent = value;
                }
            }
            else if (key.startsWith('stat') && key.includes('Description')) {
                const statNumber = key.match(/stat(\d+)Description/)[1];
                const descElements = moduleElement.querySelectorAll(`div[style*="font-size: 0.9rem"]`);
                if (descElements[statNumber - 1]) {
                    descElements[statNumber - 1].textContent = value;
                }
            }
            else if (key === 'shapeColor') {
                const shapeElement = moduleElement.querySelector('[style*="height: 300px"]');
                if (shapeElement) {
                    shapeElement.style.background = value;
                }
            }

            else if (key === 'imageUrl') {
                // Trigger full re-render for image changes
                applyChanges();
            }
        }

        // Spezielle Live-Updates f√ºr komplexe Module
        function updateComplexModuleLive(moduleId, key, value) {
            const module = modules.find(m => m.id === moduleId);
            if (!module) return false;
            
            // Team Gallery Live-Updates
            if (module.templateId === 'kerberos-team-gallery') {
                return updateTeamGalleryLive(moduleId, key, value);
            }
            
            // Stats Module Live-Updates
            if (module.templateId === 'kerberos-stats') {
                return updateStatsModuleLive(moduleId, key, value);
            }
            
            return false; // Kein spezielles Handling gefunden
        }

        // Live-Updates f√ºr Team Gallery
        function updateTeamGalleryLive(moduleId, key, value) {
            const moduleElement = document.querySelector(`[data-module-id="${moduleId}"] .module-content`);
            if (!moduleElement) return false;
            
            // Member Name Updates
            if (key.startsWith('member') && key.includes('Name')) {
                const memberIndex = key.match(/member(\d+)/)[1];
                const nameElement = moduleElement.querySelector(`h4:nth-of-type(${memberIndex})`);
                if (nameElement) {
                    nameElement.textContent = value;
                    return true;
                }
            }
            
            // Member Position Updates
            if (key.startsWith('member') && key.includes('Position')) {
                const memberIndex = key.match(/member(\d+)/)[1];
                const positionElements = moduleElement.querySelectorAll('p[style*="font-weight: 600"]');
                if (positionElements[memberIndex - 1]) {
                    positionElements[memberIndex - 1].textContent = value;
                    return true;
                }
            }
            
            return false;
        }

        // Live-Updates f√ºr Stats Module
        function updateStatsModuleLive(moduleId, key, value) {
            const moduleElement = document.querySelector(`[data-module-id="${moduleId}"] .module-content`);
            if (!moduleElement) return false;
            
            // Statistik Number Updates
            if (key.includes('Number')) {
                const statIndex = key.match(/stat(\d+)/)?.[1];
                if (statIndex) {
                    const numberElements = moduleElement.querySelectorAll('[style*="font-size"][style*="font-weight: 700"]');
                    if (numberElements[statIndex - 1]) {
                        numberElements[statIndex - 1].textContent = value;
                        return true;
                    }
                }
            }
            
            return false;
        }

        // Live Farb-Updates
        function updateColorsLive(moduleElement, key, value) {
            const colorMappings = {
                'titleColor': 'h1, h2, h3, h4, h5, h6',
                'textColor': 'p:not([style*="font-weight: 600"])',
                'buttonBgColor': 'a[href], button',
                'buttonTextColor': 'a[href], button',
                'iconColor': '[style*="Font Awesome"]',
                'nameColor': 'h4',
                'positionColor': 'p[style*="font-weight: 600"]',
                'descriptionColor': 'p:not([style*="font-weight: 600"])'
            };
            
            const selector = colorMappings[key];
            if (selector) {
                const elements = moduleElement.querySelectorAll(selector);
                elements.forEach(el => {
                    if (key.includes('Bg') || key.includes('background')) {
                        el.style.backgroundColor = value;
                        el.style.background = value;
                    } else {
                        el.style.color = value;
                    }
                });
            }
        }

        // Live Icon-Updates
        function updateIconsLive(moduleElement, key, value) {
            const iconElements = moduleElement.querySelectorAll('[style*="Font Awesome"]');
            iconElements.forEach(el => {
                if (el.textContent.includes('&#x') || el.innerHTML.includes('&#x')) {
                    el.innerHTML = value;
                }
            });
        }

        // Hauptfunktion: Property aktualisieren
        function updateProperty(key, value) {
            if (!selectedModule) return;
            
            selectedModule.properties[key] = value;
            updateStatus = 'pending';
            showUpdateStatus('pending');
            
            // Spezielle Behandlung f√ºr Team Member Count
            if (key === 'teamMemberCount') {
                const count = parseInt(value);
                // Automatisch die entsprechende Anzahl Mitglieder aktivieren
                for (let i = 1; i <= 4; i++) {
                    selectedModule.properties[`member${i}Active`] = i <= count ? 'true' : 'false';
                }
                // Sofort neu rendern
                renderCanvas();
                renderPropertyPanel();
                showNotification(`‚úÖ ${count} Team-Mitglieder aktiviert`);
                return;
            }
            
            // Sofortige Updates f√ºr visuelle Properties
            if (shouldUpdateImmediately(key)) {
                updateStatus = 'updating';
                showUpdateStatus('updating');
                // Nur Canvas aktualisieren, nicht Property Panel neu rendern
                renderCanvas();
                updateStatus = 'updated';
                showUpdateStatus('updated');
                return;
            }
            
            // Standard Updates mit Delay
            clearTimeout(autoApplyTimeout);
            autoApplyTimeout = setTimeout(() => {
                updateStatus = 'updating';
                showUpdateStatus('updating');
                applyChanges();
                updateStatus = 'updated';
                showUpdateStatus('updated');
            }, 500);
        }

        // √Ñnderungen √ºbernehmen
        function applyChanges() {
            if (!selectedModule) return;
            
            renderCanvas();
            // Nur Modul erneut ausw√§hlen, wenn es nicht gerade bearbeitet wird
            const activeElement = document.activeElement;
            const isEditingProperty = activeElement && (
                activeElement.classList.contains('form-control') || 
                activeElement.contentEditable === 'true'
            );
            
            if (!isEditingProperty) {
                selectModule(selectedModule.id);
            }
            showNotification('‚úÖ √Ñnderungen √ºbernommen');
        }

        function highlightChangedElement(property) {
            const moduleElement = document.querySelector(`[data-module-id="${selectedModule.id}"] .module-content`);
            if (!moduleElement) return;
            
            // Highlight das ge√§nderte Element
            const elements = moduleElement.querySelectorAll('*');
            elements.forEach(el => {
                if (el.style.color === selectedModule.properties[property] || 
                    el.textContent.includes(selectedModule.properties[property])) {
                    el.style.transition = 'all 0.3s ease';
                    el.style.outline = '2px solid #009CE6';
                    el.style.outlineOffset = '2px';
                    
                    setTimeout(() => {
                        el.style.outline = 'none';
                    }, 2000);
                }
            });
        }

        // Globale Funktionen
        window.selectModule = selectModule;
        window.editModuleInfo = editModuleInfo;
        window.applyPlanTemplate = applyPlanTemplate;
        window.copyFromPlan = copyFromPlan;
        window.switchPropertyTab = switchPropertyTab;
        window.groupPropertiesByContext = groupPropertiesByContext;
        window.renderPlanQuickSetup = renderPlanQuickSetup;
        window.highlightChangedElement = highlightChangedElement;
        
        // Seite speichern
        function showSavePageDialog() {
            const modal = document.getElementById('savePageModal');
            const pageName = document.getElementById('pageNameInput').value || 'Neue Seite';
            document.getElementById('savePageName').value = pageName;
            modal.style.display = 'block';
        }

        function saveCurrentPage() {
            const pageName = document.getElementById('savePageName').value.trim();
            const description = document.getElementById('savePageDescription').value.trim();
            
            if (!pageName) {
                showNotification('‚ùå Bitte Seitenname eingeben');
                return;
            }
            
            const pageData = {
                name: pageName,
                description: description,
                modules: JSON.parse(JSON.stringify(modules)),
                created: new Date().toISOString(),
                spacing: { ...globalSpacing }
            };
            
            savedPages[pageName] = pageData;
            localStorage.setItem('kerberos-saved-pages', JSON.stringify(savedPages));
            
            closeSavePageModal();
            showNotification('‚úÖ Seite "' + pageName + '" gespeichert');
        }

        function closeSavePageModal() {
            document.getElementById('savePageModal').style.display = 'none';
        }

        // Seite laden
        function showLoadPageDialog() {
            loadSavedPages();
            const modal = document.getElementById('loadPageModal');
            const container = document.getElementById('savedPagesList');
            
            container.innerHTML = '';
            
            if (Object.keys(savedPages).length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #6c757d; padding: 2rem;">Keine gespeicherten Seiten gefunden</p>';
            } else {
                Object.entries(savedPages).forEach(([name, data]) => {
                    const pageDiv = document.createElement('div');
                    pageDiv.style.cssText = 'border: 1px solid var(--kerberos-border); border-radius: 6px; padding: 1rem; margin-bottom: 1rem; cursor: pointer; transition: all 0.2s;';
                    pageDiv.innerHTML = `
                        <h4 style="margin: 0 0 0.5rem 0; color: var(--kerberos-primary);">${name}</h4>
                        <p style="margin: 0 0 0.5rem 0; font-size: 0.9rem; color: #6c757d;">${data.description || 'Keine Beschreibung'}</p>
                        <small style="color: #999;">Erstellt: ${new Date(data.created).toLocaleString('de-DE')} | ${data.modules.length} Module</small>
                        <div style="margin-top: 0.5rem; display: flex; gap: 0.5rem;">
                            <button class="btn btn-primary" onclick="loadPage('${name}')" style="flex: 1;">Laden</button>
                            <button class="btn btn-warning" onclick="exportSavedPage('${name}')">Export</button>
                            <button class="btn btn-secondary" onclick="deleteSavedPage('${name}')">üóëÔ∏è</button>
                        </div>
                    `;
                    container.appendChild(pageDiv);
                });
            }
            
            modal.style.display = 'block';
        }

        function loadPage(pageName) {
            const pageData = savedPages[pageName];
            if (!pageData) return;
            
            modules = JSON.parse(JSON.stringify(pageData.modules));
            if (pageData.spacing) {
                globalSpacing = { ...pageData.spacing };
            }
            
            document.getElementById('pageNameInput').value = pageName;
            renderCanvas();
            selectedModule = null;
            renderPropertyPanel();
            closeLoadPageModal();
            
            showNotification('‚úÖ Seite "' + pageName + '" geladen');
        }

        function deleteSavedPage(pageName) {
            if (confirm('Seite "' + pageName + '" wirklich l√∂schen?')) {
                delete savedPages[pageName];
                localStorage.setItem('kerberos-saved-pages', JSON.stringify(savedPages));
                showLoadPageDialog(); // Refresh
                showNotification('üóëÔ∏è Seite gel√∂scht');
            }
        }

        function exportSavedPage(pageName) {
            const pageData = savedPages[pageName];
            if (!pageData) return;
            
            const jsonData = JSON.stringify(pageData, null, 2);
            downloadJSON(jsonData, `kerberos-page-${pageName.toLowerCase().replace(/[^a-z0-9]/g, '-')}.json`);
        }

        function closeLoadPageModal() {
            document.getElementById('loadPageModal').style.display = 'none';
        }

        function loadSavedPages() {
            try {
                const saved = localStorage.getItem('kerberos-saved-pages');
                if (saved) {
                    savedPages = JSON.parse(saved);
                }
            } catch (e) {
                console.error('Fehler beim Laden der Seiten:', e);
                savedPages = {};
            }
        }

        // Import/Export System
        function showImportModal() {
            document.getElementById('importModal').style.display = 'block';
            updateExportButtons();
        }

        function closeImportModal() {
            document.getElementById('importModal').style.display = 'none';
        }

        function switchImportTab(tabName) {
            document.querySelectorAll('#importModal .tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('#importModal .tab-content').forEach(content => content.classList.remove('active'));
            
            document.querySelector(`[onclick="switchImportTab('${tabName}')"]`).classList.add('active');
            document.getElementById(`import${tabName.charAt(0).toUpperCase() + tabName.slice(1)}Tab`).classList.add('active');
        }

        function exportCurrentPage() {
            const pageName = document.getElementById('pageNameInput').value || 'kerberos-page';
            const pageData = {
                name: pageName,
                description: 'Exportierte Kerberos Seite',
                modules: modules,
                created: new Date().toISOString(),
                spacing: globalSpacing,
                type: 'page'
            };
            
            const jsonData = JSON.stringify(pageData, null, 2);
            downloadJSON(jsonData, `${pageName.toLowerCase().replace(/[^a-z0-9]/g, '-')}.json`);
            showNotification('üìÑ Seite exportiert');
        }

        function exportModuleTemplates() {
            const templateData = {
                name: 'Kerberos Module Templates',
                description: 'Sammlung aller Kerberos Module',
                templates: MODULE_TEMPLATES,
                created: new Date().toISOString(),
                type: 'templates'
            };
            
            const jsonData = JSON.stringify(templateData, null, 2);
            downloadJSON(jsonData, 'kerberos-module-templates.json');
            showNotification('üì¶ Module Templates exportiert');
        }

        function exportSelectedModule() {
            if (!selectedModule) return;
            
            const template = MODULE_TEMPLATES.find(t => t.id === selectedModule.templateId);
            const moduleData = {
                name: selectedModule.name,
                description: template?.description || 'Exportiertes Modul',
                module: {
                    ...template,
                    customProperties: selectedModule.properties
                },
                created: new Date().toISOString(),
                type: 'module'
            };
            
            const jsonData = JSON.stringify(moduleData, null, 2);
            downloadJSON(jsonData, `${selectedModule.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}.json`);
            showNotification('üîß Modul exportiert');
        }

        function downloadJSON(jsonData, filename) {
            const blob = new Blob([jsonData], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            a.click();
            URL.revokeObjectURL(url);
        }

        function importData() {
            const textarea = document.getElementById('importTextarea');
            let jsonData = textarea.value.trim();
            
            if (!jsonData) {
                showNotification('‚ùå Bitte JSON-Daten eingeben oder Datei ausw√§hlen');
                return;
            }
            
            try {
                const data = JSON.parse(jsonData);
                handleImportData(data);
            } catch (e) {
                showNotification('‚ùå Ung√ºltige JSON-Daten: ' + e.message);
            }
        }

        // Template-Validierung
        function validateTemplate(template) {
            if (!template || typeof template !== 'object') return false;
            if (!template.id || typeof template.id !== 'string') return false;
            if (!template.name) template.name = 'Unbenanntes Modul';
            if (!template.category) template.category = 'Custom';
            if (!template.html) template.html = '<div>Standard HTML</div>';
            if (!template.properties) template.properties = {};
            return true;
        }

        // DEBUG: Template-Status pr√ºfen
        console.log('MODULE_TEMPLATES Status:', {
            exists: typeof MODULE_TEMPLATES !== 'undefined',
            isArray: Array.isArray(MODULE_TEMPLATES),
            length: MODULE_TEMPLATES ? MODULE_TEMPLATES.length : 'N/A',
            type: typeof MODULE_TEMPLATES
        });

        function handleImportData(data) {
            try {
                // Validierung der Eingangsdaten
                if (!data || typeof data !== 'object') {
                    showNotification('‚ùå Ung√ºltige Datenstruktur');
                    return;
                }
                
                if (!data.type) {
                    showNotification('‚ùå Unbekanntes Datenformat - "type" fehlt');
                    return;
                }
                
                // Einfache Validierung - MODULE_TEMPLATES sollte bereits existieren
                if (!MODULE_TEMPLATES || !Array.isArray(MODULE_TEMPLATES)) {
                    console.error('MODULE_TEMPLATES nicht verf√ºgbar');
                    showNotification('‚ùå Template-System nicht geladen');
                    return;
                }
                
                switch (data.type) {
                    case 'page':
                        if (confirm('Aktuelle Seite √ºberschreiben und ' + (data.name || 'Seite') + ' laden?')) {
                            modules = Array.isArray(data.modules) ? data.modules : [];
                            if (data.spacing) globalSpacing = data.spacing;
                            document.getElementById('pageNameInput').value = data.name || 'Importierte Seite';
                            renderCanvas();
                            selectedModule = null;
                            renderPropertyPanel();
                            showNotification('‚úÖ Seite importiert: ' + (data.name || 'Unbekannt'));
                            closeImportModal();
                        }
                        break;
                        
                    case 'module':
                    case 'single-module':
                    case 'module-template':
                        const moduleData = data.module || data.template || data;
                        
                        // Validierung der Modul-Daten
                        if (!moduleData || typeof moduleData !== 'object') {
                            showNotification('‚ùå Ung√ºltige Modul-Daten');
                            return;
                        }
                        
                        const templateId = moduleData.id || moduleData.templateId;
                        if (!templateId) {
                            showNotification('‚ùå Modul-ID fehlt');
                            return;
                        }
                        
                        // Sichere Template-Suche
                        const existingTemplate = MODULE_TEMPLATES.find(t => t && t.id === templateId);
                        
                        if (!existingTemplate) {
                            // Neues Template erstellen
                            const newTemplate = {
                                id: templateId,
                                name: moduleData.name || data.name || 'Importiertes Modul',
                                category: moduleData.category || 'Custom',
                                description: moduleData.description || data.description || 'Importiertes Modul',
                                html: moduleData.html || `<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}};">
                                    <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
                                        <h2 style="color: {{titleColor}};">{{title}}</h2>
                                        <p style="color: {{textColor}};">{{text}}</p>
                                    </div>
                                </section>`,
                                properties: moduleData.properties || {
                                    title: 'Standard Titel',
                                    titleColor: '#063AA8',
                                    text: 'Standard Text',
                                    textColor: '#212529',
                                    backgroundColor: '#FFFFFF',
                                    sectionSpacing: '4rem 0'
                                },
                                customized: true
                            };
                            
                            MODULE_TEMPLATES.push(newTemplate);
                            loadModuleLibrary();
                            saveCustomTemplates();
                            console.log('‚úÖ Template hinzugef√ºgt:', templateId);
                        }
                        
                        // Modul zum Canvas hinzuf√ºgen
                        if (typeof addModuleToCanvas === 'function') {
                            addModuleToCanvas(templateId);
                            
                            // Custom Properties anwenden
                            if (moduleData.properties && modules.length > 0) {
                                const lastModule = modules[modules.length - 1];
                                if (lastModule) {
                                    lastModule.properties = { ...lastModule.properties, ...moduleData.properties };
                                    renderCanvas();
                                }
                            }
                        } else {
                            console.error('addModuleToCanvas Funktion nicht verf√ºgbar');
                        }
                        
                        showNotification('‚úÖ Modul importiert: ' + (data.name || moduleData.name || 'Unbekannt'));
                        closeImportModal();
                        break;
                        
                    case 'templates':
                    case 'custom-library':
                    case 'module-backup':
                        if (confirm('Neue Module hinzuf√ºgen?')) {
                            let importedCount = 0;
                            const templatesToAdd = data.templates || data.modules || [];
                            
                            if (!Array.isArray(templatesToAdd)) {
                                showNotification('‚ùå Keine g√ºltigen Templates gefunden');
                                return;
                            }
                            
                            templatesToAdd.forEach(template => {
                                try {
                                    // Validierung jedes Templates
                                    if (!template || typeof template !== 'object') {
                                        console.warn('Ung√ºltiges Template √ºbersprungen:', template);
                                        return;
                                    }
                                    
                                    // Template-ID sicherstellen
                                    if (template.templateId && !template.id) {
                                        template.id = template.templateId;
                                    }
                                    
                                    if (!template.id) {
                                        console.warn('Template ohne ID √ºbersprungen:', template);
                                        return;
                                    }
                                    
                                    // Existenz pr√ºfen
                                    const exists = MODULE_TEMPLATES.find(t => t && t.id === template.id);
                                    if (!exists) {
                                        // Standard-Werte setzen
                                        template.customized = true;
                                        if (!template.category) template.category = 'Custom';
                                        if (!template.name) template.name = 'Importiertes Modul';
                                        if (!template.html) template.html = '<div>Standard HTML</div>';
                                        if (!template.properties) template.properties = {};
                                        
                                        MODULE_TEMPLATES.push(template);
                                        importedCount++;
                                        console.log('‚úÖ Template importiert:', template.id);
                                    }
                                } catch (templateError) {
                                    console.error('Fehler beim Template-Import:', templateError, template);
                                }
                            });
                            
                            if (importedCount > 0) {
                                loadModuleLibrary();
                                saveCustomTemplates();
                                showNotification(`‚úÖ ${importedCount} Module importiert`);
                            } else {
                                showNotification('‚ÑπÔ∏è Alle Module bereits vorhanden oder ung√ºltig');
                            }
                            closeImportModal();
                        }
                        break;
                        
                    default:
                        showNotification('‚ùå Unbekannter Datentyp: ' + data.type);
                }
            } catch (error) {
                console.error('Fehler beim Import:', error);
                showNotification('‚ùå Import-Fehler: ' + error.message);
            }
        }

        // Hilfsfunktion: Generiere HTML aus Properties f√ºr importierte Module
        function generateHtmlFromProperties(moduleData) {
            // Standard-HTML f√ºr Benefits-Module
            if (moduleData.templateId === 'kerberos-benefits') {
                return `<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}};">
                    <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
                        <div style="text-align: center; margin-bottom: {{titleSpacing}};">
                            <h2 style="font-family: var(--heading-font-font-family); font-size: var(--heading-2-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}}; margin: 0;">{{title}}</h2>
                            <p style="font-family: var(--body-font-font-family); font-size: var(--normal-text-size); line-height: var(--body-font-line-height); color: {{subtitleColor}}; margin: 1rem 0 0 0;">{{subtitle}}</p>
                        </div>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax({{benefitMinWidth}}, 1fr)); gap: {{benefitsGap}};">
                            {{benefitItems}}
                        </div>
                    </div>
                </section>`;
            }
            
            // Fallback f√ºr andere Module
            return `<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}};">
                <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
                    <h2 style="color: {{titleColor}};">{{title}}</h2>
                    <p style="color: {{textColor}};">{{text}}</p>
                </div>
            </section>`;
        }

        function updateExportButtons() {
            const btn = document.getElementById('exportSelectedBtn');
            if (selectedModule) {
                btn.disabled = false;
                btn.textContent = 'üîß "' + selectedModule.name + '" exportieren';
            } else {
                btn.disabled = true;
                btn.textContent = 'üîß Ausgew√§hltes Modul exportieren';
            }
        }

        // Spacing/Ratio System
        function showSettingsModal() {
            document.getElementById('settingsModal').style.display = 'block';
            loadSpacingSettings();
        }

        function closeSettingsModal() {
            document.getElementById('settingsModal').style.display = 'none';
        }

        // === MODULE-BIBLIOTHEK VERWALTUNG ===

        function showModuleLibraryManager() {
            document.getElementById('moduleLibraryModal').style.display = 'block';
            loadModuleLibraryList();
        }


        function closeModuleLibraryModal() {
            document.getElementById('moduleLibraryModal').style.display = 'none';
        }

        // üÜï BULK EDIT MODAL - HIER EINF√úGEN:
        function showBulkEditModal() {
            const modal = document.createElement('div');
            modal.id = 'bulkEditModal';
            modal.innerHTML = `
                <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 2000; display: flex; align-items: center; justify-content: center;">
                    <div style="background: white; padding: 2rem; border-radius: 8px; max-width: 600px; width: 90%; max-height: 80vh; overflow-y: auto;">
                        <h3 style="color: #063AA8; margin: 0 0 1.5rem 0;">üîß Bulk-Bearbeitung</h3>
                        
                        <div style="margin-bottom: 2rem; padding: 1rem; background: #F8F9FA; border-radius: 6px;">
                            <h4 style="margin: 0 0 1rem 0; font-size: 1rem;">üí∞ Preise anpassen</h4>
                            <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Alle Preise mit Faktor multiplizieren:</label>
                            <div style="display: flex; gap: 0.5rem; align-items: center;">
                                <input type="number" id="priceMultiplier" step="0.1" value="1.0" style="flex: 1; padding: 0.5rem; border: 1px solid #DEE2E6; border-radius: 4px;">
                                <button onclick="applyBulkPriceChange()" class="btn btn-primary">‚úì Anwenden</button>
                            </div>
                            <small style="color: #6c757d;">Beispiel: 1.1 = +10%, 0.9 = -10%</small>
                        </div>
                        
                        <div style="margin-bottom: 2rem; padding: 1rem; background: #F8F9FA; border-radius: 6px;">
                            <h4 style="margin: 0 0 1rem 0; font-size: 1rem;">üé® Farben ersetzen</h4>
                            <div style="display: grid; grid-template-columns: 1fr auto 1fr auto; gap: 0.5rem; align-items: center;">
                                <input type="text" id="oldColor" placeholder="Alte Farbe (z.B. #063AA8)" style="padding: 0.5rem; border: 1px solid #DEE2E6; border-radius: 4px;">
                                <span>‚Üí</span>
                                <input type="text" id="newColor" placeholder="Neue Farbe" style="padding: 0.5rem; border: 1px solid #DEE2E6; border-radius: 4px;">
                                <button onclick="applyBulkColorChange()" class="btn btn-primary">‚úì Ersetzen</button>
                            </div>
                        </div>
                        
                        <div style="margin-bottom: 2rem; padding: 1rem; background: #F8F9FA; border-radius: 6px;">
                            <h4 style="margin: 0 0 1rem 0; font-size: 1rem;">üìù Text ersetzen</h4>
                            <div style="display: grid; grid-template-columns: 1fr auto 1fr auto; gap: 0.5rem; align-items: center;">
                                <input type="text" id="oldText" placeholder="Alter Text" style="padding: 0.5rem; border: 1px solid #DEE2E6; border-radius: 4px;">
                                <span>‚Üí</span>
                                <input type="text" id="newText" placeholder="Neuer Text" style="padding: 0.5rem; border: 1px solid #DEE2E6; border-radius: 4px;">
                                <button onclick="applyBulkTextChange()" class="btn btn-primary">‚úì Ersetzen</button>
                            </div>
                        </div>
                        
                        <div style="text-align: right; border-top: 1px solid #DEE2E6; padding-top: 1rem;">
                            <button onclick="closeBulkEditModal()" class="btn btn-secondary">Schlie√üen</button>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Close on outside click
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeBulkEditModal();
                }
            });
        }

        function closeBulkEditModal() {
            const modal = document.getElementById('bulkEditModal');
            if (modal) {
                modal.remove();
            }
        }

        function applyBulkPriceChange() {
            const multiplier = parseFloat(document.getElementById('priceMultiplier').value);
            if (!multiplier || !selectedModule) return;
            
            let changedCount = 0;
            Object.keys(selectedModule.properties).forEach(key => {
                if (key.includes('Price') || key.includes('price')) {
                    const currentValue = selectedModule.properties[key];
                    // Extract number from price string (e.g., "‚Ç¨299" -> 299)
                    const match = currentValue.match(/[\d,.]+/);
                    if (match) {
                        const number = parseFloat(match[0].replace(',', ''));
                        const newNumber = Math.round(number * multiplier);
                        selectedModule.properties[key] = currentValue.replace(match[0], newNumber.toString());
                        changedCount++;
                    }
                }
            });
            
            if (changedCount > 0) {
                renderPropertyPanel();
                applyChanges();
                showNotification(`‚úÖ ${changedCount} Preise aktualisiert (Faktor: ${multiplier})`);
                closeBulkEditModal();
            }
        }

        function applyBulkColorChange() {
            const oldColor = document.getElementById('oldColor').value.trim();
            const newColor = document.getElementById('newColor').value.trim();
            
            if (!oldColor || !newColor || !selectedModule) return;
            
            let changedCount = 0;
            Object.keys(selectedModule.properties).forEach(key => {
                if (selectedModule.properties[key] === oldColor) {
                    selectedModule.properties[key] = newColor;
                    changedCount++;
                }
            });
            
            if (changedCount > 0) {
                renderPropertyPanel();
                applyChanges();
                showNotification(`‚úÖ ${changedCount} Farben von ${oldColor} zu ${newColor} ge√§ndert`);
                closeBulkEditModal();
            }
        }

        function applyBulkTextChange() {
            const oldText = document.getElementById('oldText').value.trim();
            const newText = document.getElementById('newText').value.trim();
            
            if (!oldText || !newText || !selectedModule) return;
            
            let changedCount = 0;
            Object.keys(selectedModule.properties).forEach(key => {
                if (selectedModule.properties[key].includes && selectedModule.properties[key].includes(oldText)) {
                    selectedModule.properties[key] = selectedModule.properties[key].replace(new RegExp(oldText, 'g'), newText);
                    changedCount++;
                }
            });
            
            if (changedCount > 0) {
                renderPropertyPanel();
                applyChanges();
                showNotification(`‚úÖ ${changedCount} Texte von "${oldText}" zu "${newText}" ge√§ndert`);
                closeBulkEditModal();
            }
        }

        function applyPlanTemplate(planNumber, template) {
            const templates = {
                basic: { name: 'Starter', price: '‚Ç¨299', description: 'Ideal f√ºr kleine Unternehmen mit grundlegenden Compliance-Anforderungen', color: '#063AA8' },
                premium: { name: 'Professional', price: '‚Ç¨599', description: 'Umfassende L√∂sung f√ºr mittelst√§ndische Unternehmen', color: '#009CE6' },
                enterprise: { name: 'Enterprise', price: '‚Ç¨1.299', description: 'Ma√ügeschneiderte L√∂sung f√ºr Gro√üunternehmen', color: '#B265E9' }
            };
            
            const config = templates[template];
            if (!config || !selectedModule) return;
            
            // Bulk-Update aller Plan-Properties
            selectedModule.properties[`plan${planNumber}Name`] = config.name;
            selectedModule.properties[`plan${planNumber}Price`] = config.price;
            selectedModule.properties[`plan${planNumber}Description`] = config.description;
            selectedModule.properties[`plan${planNumber}Color`] = config.color;
            selectedModule.properties[`plan${planNumber}PriceColor`] = config.color;
            selectedModule.properties[`plan${planNumber}ButtonText`] = `${config.name} w√§hlen`;
            
            renderPropertyPanel();
            applyChanges();
            showNotification(`‚úÖ ${config.name}-Template auf Plan ${planNumber} angewendet`);
        }

        function copyFromPlan(targetPlan) {
            if (!selectedModule) return;
            
            const otherPlans = ['1', '2', '3'].filter(p => p !== targetPlan);
            const options = otherPlans.map(p => {
                const name = selectedModule.properties[`plan${p}Name`] || `Plan ${p}`;
                return `<option value="${p}">${name}</option>`;
            }).join('');
            
            const sourcePlan = prompt(`Von welchem Plan kopieren?\n${otherPlans.map(p => `${p}: ${selectedModule.properties[`plan${p}Name`] || `Plan ${p}`}`).join('\n')}\n\nPlan-Nummer eingeben:`);
            
            if (sourcePlan && otherPlans.includes(sourcePlan)) {
                // Kopiere alle Properties vom Source-Plan
                Object.keys(selectedModule.properties).forEach(key => {
                    if (key.includes(`plan${sourcePlan}`)) {
                        const targetKey = key.replace(`plan${sourcePlan}`, `plan${targetPlan}`);
                        selectedModule.properties[targetKey] = selectedModule.properties[key];
                    }
                });
                
                renderPropertyPanel();
                applyChanges();
                showNotification(`‚úÖ Plan ${sourcePlan} nach Plan ${targetPlan} kopiert`);
            }
        }

        // Gel√∂schte Templates anzeigen und wiederherstellen
        function showDeletedTemplatesManager() {
            const deletedList = getDeletedTemplatesBlacklist();
            
            if (deletedList.length === 0) {
                showNotification('‚úÖ Keine gel√∂schten Templates vorhanden');
                return;
            }
            
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
                background: rgba(0,0,0,0.8); z-index: 2500; display: flex; 
                align-items: center; justify-content: center;
            `;
            
            modal.innerHTML = `
                <div style="background: white; padding: 2rem; border-radius: 8px; max-width: 600px; width: 90%; max-height: 80vh; overflow-y: auto;">
                    <h3 style="margin: 0 0 1rem 0; color: var(--kerberos-primary);">üóëÔ∏è Gel√∂schte Templates</h3>
                    <p style="color: #6c757d; margin-bottom: 1.5rem;">Diese Templates wurden gel√∂scht und k√∂nnen wiederhergestellt werden:</p>
                    
                    <div id="deletedTemplatesList" style="margin-bottom: 1.5rem;">
                        ${deletedList.map(templateId => `
                            <div style="border: 1px solid #ddd; border-radius: 6px; padding: 1rem; margin-bottom: 0.5rem; display: flex; justify-content: space-between; align-items: center;">
                                <div>
                                    <strong style="color: var(--kerberos-primary);">${templateId}</strong>
                                    <br><small style="color: #999;">Gel√∂schtes Template</small>
                                </div>
                                <button onclick="restoreDeletedTemplate('${templateId}'); closeDeletedTemplatesModal();" class="btn btn-success" style="font-size: 0.85rem;">
                                    ‚Üª Wiederherstellen
                                </button>
                            </div>
                        `).join('')}
                    </div>
                    
                    <div style="text-align: right;">
                        <button onclick="closeDeletedTemplatesModal()" class="btn btn-secondary">Schlie√üen</button>
                    </div>
                </div>
            `;
            
            modal.id = 'deletedTemplatesModal';
            document.body.appendChild(modal);
            
            // Close on outside click
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeDeletedTemplatesModal();
                }
            });
        }

        function closeDeletedTemplatesModal() {
            const modal = document.getElementById('deletedTemplatesModal');
            if (modal) modal.remove();
        }


        function loadModuleLibraryList(filterCategory = 'all', searchTerm = '') {
            const container = document.getElementById('moduleLibraryList');
            container.innerHTML = '';
            
            const filteredModules = MODULE_TEMPLATES.filter(template => {
                const matchesCategory = filterCategory === 'all' || template.category === filterCategory;
                const matchesSearch = searchTerm === '' || 
                    template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    template.description.toLowerCase().includes(searchTerm.toLowerCase());
                return matchesCategory && matchesSearch;
            });
            
            if (filteredModules.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #6c757d; padding: 2rem;">Keine Module gefunden</p>';
                return;
            }
            
            filteredModules.forEach(template => {
                const moduleDiv = document.createElement('div');
                moduleDiv.style.cssText = 'border: 1px solid var(--kerberos-border); border-radius: 6px; padding: 1rem; margin-bottom: 1rem; background: white;';
                
                const protectedModules = [
                    'kerberos-hero',
                    'kerberos-hero-advanced', 
                    'kerberos-stats',
                    'kerberos-team-gallery'
                ];

                const isDeletable = !protectedModules.includes(template.id);
                const isCustom = !template.id.startsWith('kerberos-') || template.customized;
                
                moduleDiv.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: flex-start; gap: 1rem;">
                        <div style="flex: 1;">
                            <h5 style="margin: 0 0 0.5rem 0; color: var(--kerberos-primary); font-size: 1rem;">${template.name}</h5>
                            <p style="margin: 0 0 0.5rem 0; font-size: 0.85rem; color: #6c757d;">${template.description}</p>
                            <div style="display: flex; gap: 1rem; font-size: 0.8rem; color: #999;">
                                <span>üìÇ ${template.category}</span>
                                <span>üÜî ${template.id}</span>
                                ${isCustom ? '<span style="background: #28a745; color: white; padding: 0.1rem 0.4rem; border-radius: 10px;">CUSTOM</span>' : '<span style="background: #063AA8; color: white; padding: 0.1rem 0.4rem; border-radius: 10px;">STANDARD</span>'}
                            </div>
                        </div>
                        <div style="display: flex; flex-direction: column; gap: 0.5rem; min-width: 120px;">
                            <button class="btn btn-secondary" onclick="editModuleTemplate('${template.id}')" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">‚úèÔ∏è Bearbeiten</button>
                            <button class="btn btn-warning" onclick="exportModuleTemplate('${template.id}')" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">üì§ Export</button>
                            <button class="btn btn-success" onclick="duplicateModuleTemplate('${template.id}')" style="font-size: 0.8rem; padding: 0.4rem 0.8rem;">üìã Kopie</button>
                            ${isDeletable ? `<button class="btn btn-delete" onclick="deleteModuleTemplate('${template.id}')" style="font-size: 0.8rem; padding: 0.4rem 0.8rem; background: #dc3545; color: white;">üóëÔ∏è L√∂schen</button>` : '<div style="padding: 0.4rem; text-align: center; font-size: 0.7rem; color: #999;">Standard-Modul</div>'}
                        </div>
                    </div>
                `;
                
                container.appendChild(moduleDiv);
            });
        }

        function deleteModuleTemplate(templateId) {
            const template = MODULE_TEMPLATES.find(t => t.id === templateId);
            if (!template) return;
            
            // Sch√ºtze nur die wichtigsten Standard-Module
            const protectedModules = [
                'kerberos-hero',
                'kerberos-hero-advanced',
                'kerberos-stats',
                'kerberos-team-gallery'
            ];
            
            if (protectedModules.includes(templateId)) {
                showNotification('‚ùå Dieses Basis-Modul kann nicht gel√∂scht werden');
                return;
            }
            
            if (confirm(`Modul-Template "${template.name}" wirklich aus der Bibliothek l√∂schen?\n\nDieses Template steht dann nicht mehr zur Verf√ºgung.\nVorhandene Module auf Seiten bleiben erhalten.`)) {
                // Template aus Array entfernen
                const index = MODULE_TEMPLATES.findIndex(t => t.id === templateId);
                if (index > -1) {
                    MODULE_TEMPLATES.splice(index, 1);
                }
                
                // F√ºge zur Blacklist hinzu (verhindert erneutes Laden)
                addToDeletedTemplatesBlacklist(templateId);
                
                // Module-Bibliothek neu laden
                loadModuleLibrary();
                loadModuleLibraryList();
                
                showNotification(`üóëÔ∏è Template "${template.name}" gel√∂scht`);
                
                // Speichere Custom Templates und Blacklist in LocalStorage
                saveCustomTemplates();
            }
        }

        function duplicateModuleTemplate(templateId) {
            const template = MODULE_TEMPLATES.find(t => t.id === templateId);
            if (!template) return;
            
            const newTemplate = {
                ...template,
                id: `${template.id}-copy-${Date.now()}`,
                name: `${template.name} (Kopie)`,
                category: 'Custom',
                customized: true
            };
            
            MODULE_TEMPLATES.push(newTemplate);
            loadModuleLibrary();
            loadModuleLibraryList();
            saveCustomTemplates();
            
            showNotification(`üìã Template "${newTemplate.name}" erstellt`);
        }

        function editModuleTemplate(templateId) {
            const template = MODULE_TEMPLATES.find(t => t.id === templateId);
            if (!template) return;
            
            // √ñffne den normalen Module-Edit Dialog mit Template-Daten
            document.getElementById('editModuleName').value = template.name;
            document.getElementById('editModuleCategory').value = template.category;
            document.getElementById('editModuleDescription').value = template.description;
            
            document.getElementById('moduleEditModal').style.display = 'block';
            document.getElementById('moduleEditModal').dataset.templateId = templateId;
            document.getElementById('moduleEditModal').dataset.isTemplate = 'true';
        }

        function exportModuleTemplate(templateId) {
            const template = MODULE_TEMPLATES.find(t => t.id === templateId);
            if (!template) return;
            
            const exportData = {
                name: `Template: ${template.name}`,
                description: `Module-Template Export: ${template.name}`,
                template: template,
                created: new Date().toISOString(),
                type: 'module-template',
                version: '2.0'
            };
            
            const jsonData = JSON.stringify(exportData, null, 2);
            const filename = `template-${template.id}.json`;
            downloadJSON(jsonData, filename);
            
            showNotification(`üì§ Template "${template.name}" exportiert`);
        }

        function exportModuleLibrary() {
            // Erweiterte Filterlogik f√ºr Export
            const customTemplates = MODULE_TEMPLATES.filter(t => {
                return t.customized || 
                    t.category === 'Custom' || 
                    !t.id.startsWith('kerberos-hero') ||  // Alles au√üer den gesch√ºtzten Basis-Modulen
                    t.id.includes('extended') ||           // Alle erweiterten Module
                    t.id.includes('comparison') ||         // Vergleichstabellen
                    t.id.includes('pricing');              // Preistabellen
            });
            
            if (customTemplates.length === 0) {
                showNotification('‚ùå Keine exportierbaren Templates gefunden');
                return;
            }
            
            const exportData = {
                name: 'Kerberos Custom Module Library',
                description: `Export aller ${customTemplates.length} benutzerdefinierten Module`,
                templates: customTemplates,
                created: new Date().toISOString(),
                type: 'custom-library',
                version: '2.0'
            };
            
            const jsonData = JSON.stringify(exportData, null, 2);
            downloadJSON(jsonData, 'kerberos-custom-library.json');
            
            showNotification(`üì§ ${customTemplates.length} Custom Templates exportiert`);
        }

        function repairTemplateLibrary() {
            let repaired = 0;
            MODULE_TEMPLATES.forEach(template => {
                // Markiere alle nicht-Standard Module als customized
                if (!template.id.startsWith('kerberos-hero') || 
                    template.id.includes('extended') || 
                    template.id.includes('comparison') || 
                    template.id.includes('pricing')) {
                    if (!template.customized) {
                        template.customized = true;
                        repaired++;
                    }
                }
            });
            
            if (repaired > 0) {
                saveCustomTemplates();
                showNotification(`üîß ${repaired} Templates als exportierbar markiert`);
            } else {
                showNotification('‚úÖ Template-Bibliothek ist bereits korrekt');
            }
        }

        // Globale Funktion verf√ºgbar machen
        window.repairTemplateLibrary = repairTemplateLibrary;

        function saveCustomTemplates() {
            const customTemplates = MODULE_TEMPLATES.filter(t => t.customized || t.category === 'Custom');
            localStorage.setItem('kerberos-custom-templates', JSON.stringify(customTemplates));
        }

        function loadCustomTemplates() {
            try {
                // Lade gel√∂schte Templates Blacklist
                const deletedList = getDeletedTemplatesBlacklist();
                
                const saved = localStorage.getItem('kerberos-custom-templates');
                if (saved) {
                    const customTemplates = JSON.parse(saved);
                    customTemplates.forEach(template => {
                        // Validierung: Template muss id haben
                        if (!template || !template.id) {
                            console.warn('√úberspringe ung√ºltiges Template:', template);
                            return;
                        }
                        
                        // Nur hinzuf√ºgen wenn nicht in Blacklist und nicht bereits vorhanden
                        if (!deletedList.includes(template.id) && !MODULE_TEMPLATES.find(t => t.id === template.id)) {
                            // Weitere Validierung
                            if (!template.name) template.name = 'Unbenanntes Template';
                            if (!template.category) template.category = 'Custom';
                            if (!template.html) template.html = '<div>Leeres Template</div>';
                            if (!template.properties) template.properties = {};
                            
                            MODULE_TEMPLATES.push(template);
                        }
                    });
                }
            } catch (e) {
                console.error('Fehler beim Laden der Custom Templates:', e);
                // Falls localStorage korrupt ist, l√∂sche es
                localStorage.removeItem('kerberos-custom-templates');
            }
        }

        // Template-Blacklist Management
        function addToDeletedTemplatesBlacklist(templateId) {
            try {
                const deletedList = getDeletedTemplatesBlacklist();
                if (!deletedList.includes(templateId)) {
                    deletedList.push(templateId);
                    localStorage.setItem('kerberos-deleted-templates', JSON.stringify(deletedList));
                }
            } catch (e) {
                console.error('Fehler beim Speichern der Blacklist:', e);
            }
        }

        function getDeletedTemplatesBlacklist() {
            try {
                const saved = localStorage.getItem('kerberos-deleted-templates');
                return saved ? JSON.parse(saved) : [];
            } catch (e) {
                console.error('Fehler beim Laden der Blacklist:', e);
                return [];
            }
        }

        function removeFromDeletedTemplatesBlacklist(templateId) {
            try {
                const deletedList = getDeletedTemplatesBlacklist();
                const index = deletedList.indexOf(templateId);
                if (index > -1) {
                    deletedList.splice(index, 1);
                    localStorage.setItem('kerberos-deleted-templates', JSON.stringify(deletedList));
                }
            } catch (e) {
                console.error('Fehler beim Aktualisieren der Blacklist:', e);
            }
        }

        // Template-Wiederherstellung
        function restoreDeletedTemplate(templateId) {
            // Entferne von Blacklist
            removeFromDeletedTemplatesBlacklist(templateId);
            
            // Lade Templates neu
            loadCustomTemplates();
            loadModuleLibrary();
            loadModuleLibraryList();
            
            showNotification(`‚úÖ Template wiederhergestellt`);
        }

        // Library Filter & Search
        function setupLibraryFilters() {
            // Filter Buttons
            document.querySelectorAll('.library-filter-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const category = btn.dataset.category;
                    
                    document.querySelectorAll('.library-filter-btn').forEach(b => {
                        const isActive = b.dataset.category === category;
                        b.style.background = isActive ? 'var(--kerberos-primary)' : 'transparent';
                        b.style.color = isActive ? 'white' : 'var(--kerberos-primary)';
                    });
                    
                    const searchTerm = document.getElementById('librarySearchInput').value;
                    loadModuleLibraryList(category, searchTerm);
                });
            });
            
            // Search Input
            document.getElementById('librarySearchInput')?.addEventListener('input', (e) => {
                const activeFilter = document.querySelector('.library-filter-btn[style*="var(--kerberos-primary)"]')?.dataset.category || 'all';
                loadModuleLibraryList(activeFilter, e.target.value);
            });
        }

        function switchSettingsTab(tabName) {
            document.querySelectorAll('#settingsModal .tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('#settingsModal .tab-content').forEach(content => content.classList.remove('active'));
            
            document.querySelector(`[onclick="switchSettingsTab('${tabName}')"]`).classList.add('active');
            document.getElementById(`settings${tabName.charAt(0).toUpperCase() + tabName.slice(1)}Tab`).classList.add('active');
        }

        function loadSpacingSettings() {
            document.getElementById('sectionPaddingSelect').value = globalSpacing.sectionPadding;
            document.getElementById('elementSpacingSelect').value = globalSpacing.elementSpacing;
            document.getElementById('textSpacingSelect').value = globalSpacing.textSpacing;
        }

        function updateSpacing(type, value) {
            globalSpacing[type] = value;
            localStorage.setItem('kerberos-global-spacing', JSON.stringify(globalSpacing));
            showNotification('‚úÖ ' + type + ' aktualisiert');
        }

        function applySpacingToAll() {
            if (confirm('Neue Abst√§nde auf alle Module anwenden?')) {
                modules.forEach(module => {
                    module.html = updateModuleSpacing(module.html);
                });
                renderCanvas();
                showNotification('‚úÖ Abst√§nde auf alle Module angewandt');
            }
        }

        function updateModuleSpacing(html) {
            // Padding ersetzen
            html = html.replace(/padding:\s*[\d\.]+rem\s+[\d\.]+/g, `padding: ${globalSpacing.sectionPadding}`);
            // Gap ersetzen
            html = html.replace(/gap:\s*[\d\.]+rem/g, `gap: ${globalSpacing.elementSpacing}`);
            return html;
        }

        // Modul-Info bearbeiten
        function editModuleInfo(moduleId) {
            const module = modules.find(m => m.id === moduleId);
            if (!module) return;
            
            const template = MODULE_TEMPLATES.find(t => t.id === module.templateId);
            
            document.getElementById('editModuleName').value = module.name;
            document.getElementById('editModuleCategory').value = module.category || template?.category || 'Custom';
            document.getElementById('editModuleDescription').value = module.description || template?.description || '';
            
            document.getElementById('moduleEditModal').style.display = 'block';
            document.getElementById('moduleEditModal').dataset.moduleId = moduleId;
        }

        function closeModuleEditModal() {
            document.getElementById('moduleEditModal').style.display = 'none';
        }

        function saveModuleInfo() {
            const modal = document.getElementById('moduleEditModal');
            const moduleId = modal.dataset.moduleId;
            const isTemplate = modal.dataset.isTemplate === 'true';
            
            if (isTemplate) {
                // Template bearbeiten
                const template = MODULE_TEMPLATES.find(t => t.id === moduleId);
                if (template) {
                    template.name = document.getElementById('editModuleName').value;
                    template.category = document.getElementById('editModuleCategory').value;
                    template.description = document.getElementById('editModuleDescription').value;
                    template.customized = true;
                    
                    loadModuleLibrary();
                    loadModuleLibraryList();
                    saveCustomTemplates();
                    showNotification('‚úÖ Template aktualisiert');
                }
            } else {
                // Normales Modul bearbeiten (bestehende Funktionalit√§t)
                const module = modules.find(m => m.id === moduleId);
                if (module) {
                    module.name = document.getElementById('editModuleName').value;
                    module.category = document.getElementById('editModuleCategory').value;
                    module.description = document.getElementById('editModuleDescription').value;
                    
                    renderCanvas();
                    showNotification('‚úÖ Modul-Info aktualisiert');
                }
            }
            
            closeModuleEditModal();
        }

        // Import File Handler
        document.getElementById('importInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file && file.type === 'application/json') {
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        const data = JSON.parse(e.target.result);
                        document.getElementById('importTextarea').value = JSON.stringify(data, null, 2);
                        handleImportData(data);
                    } catch (err) {
                        showNotification('‚ùå Fehler beim Lesen der Datei: ' + err.message);
                    }
                };
                reader.readAsText(file);
            }
        });
        
        window.copyModuleCode = function(moduleId) {
            const module = modules.find(m => m.id === moduleId);
            if (!module) return;
            
            navigator.clipboard.writeText(processModuleHTML(module)).then(() => {
                showNotification('üìã ' + module.name + ' Code kopiert');
            });
        };

        window.moveModule = function(moduleId, direction) {
            const index = modules.findIndex(m => m.id === moduleId);
            if (index === -1) return;
            
            const newIndex = index + direction;
            if (newIndex < 0 || newIndex >= modules.length) return;
            
            [modules[index], modules[newIndex]] = [modules[newIndex], modules[index]];
            renderCanvas();
            selectModule(moduleId);
        };

        window.deleteModule = function(moduleId) {
            if (confirm('Modul wirklich l√∂schen?')) {
                const module = modules.find(m => m.id === moduleId);
                if (!module) return;
                
                const moduleName = module.name;
                modules = modules.filter(m => m.id !== moduleId);
                renderCanvas();
                
                // Wenn das gel√∂schte Modul ausgew√§hlt war, Property Panel zur√ºcksetzen
                if (selectedModule && selectedModule.id === moduleId) {
                    selectedModule = null;
                    renderPropertyPanel();
                }
                
                // Placeholder anzeigen falls keine Module mehr da sind
                if (modules.length === 0) {
                    const placeholder = document.querySelector('.canvas-placeholder');
                    if (placeholder) placeholder.style.display = 'block';
                }
                
                showNotification(`üóëÔ∏è Modul "${moduleName}" gel√∂scht`);
            }
        };

        window.duplicateModule = function(moduleId) {
            const module = modules.find(m => m.id === moduleId);
            if (!module) return;
            
            const duplicate = {
                id: `module_${++moduleCounter}`,
                templateId: module.templateId,
                html: module.html,
                properties: { ...module.properties },
                name: module.name + ' (Kopie)'
            };
            
            const index = modules.findIndex(m => m.id === moduleId);
            modules.splice(index + 1, 0, duplicate);
            renderCanvas();
            showNotification('üìã Modul dupliziert');
        };

        // Export & Preview
        function exportPage() {
            const pageName = document.getElementById('pageNameInput').value || 'Kerberos-Seite';
            
            let html = `<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${pageName} - Kerberos Compliance</title>
    <!-- Kerberos Website CSS wird automatisch geladen -->
    <!-- Module verwenden Squarespace CSS-Variablen f√ºr optimale Integration -->
</head>
<body>
    <!-- Kerberos ${pageName} -->
    <!-- Erstellt mit Kerberos Module Editor (Squarespace-optimiert) -->
    
`;
            
            modules.forEach((module, index) => {
                html += `    <!-- ${module.name} -->\n`;
                html += '    ' + processModuleHTML(module).replace(/\n/g, '\n    ') + '\n\n';
            });
            
            html += `    <!-- Ende ${pageName} -->
    <!-- Hinweis: Module nutzen var(--heading-font-font-family) und andere Squarespace CSS-Variablen -->
</body>
</html>`;
            
            const blob = new Blob([html], { type: 'text/html; charset=utf-8' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${pageName.toLowerCase().replace(/[^a-z0-9]/g, '-')}-kerberos.html`;
            a.click();
            URL.revokeObjectURL(url);
            
            showNotification('üìÑ Squarespace-optimierte Seite exportiert');
        }

        // === NEUE EXPORT/L√ñSCH FUNKTIONEN ===

        function exportAllCurrentModules() {
            if (modules.length === 0) {
                showNotification('‚ùå Keine Module zum Exportieren vorhanden');
                return;
            }
            
            const pageName = document.getElementById('pageNameInput').value || 'Kerberos-Module';
            const exportData = {
                name: `Alle Module von "${pageName}"`,
                description: `Backup aller ${modules.length} Module vom ${new Date().toLocaleString('de-DE')}`,
                modules: modules.map(module => ({
                    templateId: module.templateId,
                    name: module.name,
                    category: module.category,
                    description: module.description,
                    properties: module.properties,
                    customized: true
                })),
                created: new Date().toISOString(),
                type: 'module-backup',
                version: '2.0'
            };
            
            const jsonData = JSON.stringify(exportData, null, 2);
            const filename = `kerberos-module-backup-${Date.now()}.json`;
            downloadJSON(jsonData, filename);
            
            showNotification(`üì¶ ${modules.length} Module erfolgreich exportiert`);
        }

        function deleteIndividualModule(moduleId) {
            const module = modules.find(m => m.id === moduleId);
            if (!module) return;
            
            const moduleName = module.name || 'Unbenanntes Modul';
            
            if (confirm(`Modul "${moduleName}" wirklich l√∂schen?\n\nDiese Aktion kann nicht r√ºckg√§ngig gemacht werden.`)) {
                modules = modules.filter(m => m.id !== moduleId);
                
                // Canvas neu rendern
                renderCanvas();
                
                // Wenn das gel√∂schte Modul ausgew√§hlt war, Property Panel zur√ºcksetzen
                if (selectedModule && selectedModule.id === moduleId) {
                    selectedModule = null;
                    renderPropertyPanel();
                }
                
                // Placeholder anzeigen falls keine Module mehr da sind
                if (modules.length === 0) {
                    const placeholder = document.querySelector('.canvas-placeholder');
                    if (placeholder) placeholder.style.display = 'block';
                }
                
                showNotification(`üóëÔ∏è Modul "${moduleName}" gel√∂scht`);
            }
        }

        function showModuleQuickActions(moduleId) {
            const module = modules.find(m => m.id === moduleId);
            if (!module) return;
            
            const actions = `
                <div style="position: absolute; top: 100%; right: 0; background: white; border: 1px solid #DEE2E6; border-radius: 6px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 1000; min-width: 200px;">
                    <div style="padding: 0.5rem;">
                        <button onclick="selectModule('${moduleId}')" style="width: 100%; padding: 0.5rem; border: none; background: transparent; text-align: left; cursor: pointer; border-radius: 4px;" onmouseover="this.style.background='#f8f9fa'" onmouseout="this.style.background='transparent'">‚úèÔ∏è Bearbeiten</button>
                        <button onclick="duplicateModule('${moduleId}')" style="width: 100%; padding: 0.5rem; border: none; background: transparent; text-align: left; cursor: pointer; border-radius: 4px;" onmouseover="this.style.background='#f8f9fa'" onmouseout="this.style.background='transparent'">üìã Duplizieren</button>
                        <button onclick="exportSingleModule('${moduleId}')" style="width: 100%; padding: 0.5rem; border: none; background: transparent; text-align: left; cursor: pointer; border-radius: 4px;" onmouseover="this.style.background='#f8f9fa'" onmouseout="this.style.background='transparent'">üì§ Exportieren</button>
                        <hr style="margin: 0.5rem 0; border: none; border-top: 1px solid #DEE2E6;">
                        <button onclick="deleteIndividualModule('${moduleId}')" style="width: 100%; padding: 0.5rem; border: none; background: transparent; text-align: left; cursor: pointer; border-radius: 4px; color: #dc3545;" onmouseover="this.style.background='#fee'" onmouseout="this.style.background='transparent'">üóëÔ∏è L√∂schen</button>
                    </div>
                </div>`;
            
            return actions;
        }

        function exportSingleModule(moduleId) {
            const module = modules.find(m => m.id === moduleId);
            if (!module) return;
            
            const template = MODULE_TEMPLATES.find(t => t.id === module.templateId);
            const exportData = {
                name: module.name,
                description: `Einzelmodul-Export: ${module.name}`,
                module: {
                    templateId: module.templateId,
                    name: module.name,
                    category: module.category || template?.category || 'Custom',
                    description: module.description || template?.description || '',
                    properties: module.properties,
                    customized: true
                },
                created: new Date().toISOString(),
                type: 'single-module',
                version: '2.0'
            };
            
            const jsonData = JSON.stringify(exportData, null, 2);
            const filename = `${module.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}-modul.json`;
            downloadJSON(jsonData, filename);
            
            showNotification(`üì§ Modul "${module.name}" exportiert`);
        }

        function showPreview() {
            const modal = document.getElementById('previewModal');
            const content = document.getElementById('previewContent');
            
            let html = '';
            modules.forEach(module => {
                html += processModuleHTML(module);
            });
            
            content.innerHTML = html;
            modal.style.display = 'block';
        }

        window.closePreview = function() {
            document.getElementById('previewModal').style.display = 'none';
        };

        function clearAll() {
            if (confirm('Alle Module l√∂schen?')) {
                modules = [];
                selectedModule = null;
                renderCanvas();
                renderPropertyPanel();
                showNotification('üóëÔ∏è Alle Module gel√∂scht');
            }
        }

        // Utility Functions
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function copyToClipboard(elementId) {
            const text = processModuleHTML(selectedModule);
            
            navigator.clipboard.writeText(text).then(() => {
                showNotification('üìã Code in Zwischenablage kopiert');
            }).catch(() => {
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                showNotification('üìã Code kopiert');
            });
        }

        // Search
        function setupSearch() {
            const searchInput = document.getElementById('searchInput');
            searchInput.addEventListener('input', (e) => {
                const term = e.target.value.toLowerCase();
                document.querySelectorAll('.module-template').forEach(el => {
                    const name = el.querySelector('.module-name').textContent.toLowerCase();
                    const desc = el.querySelector('.module-description').textContent.toLowerCase();
                    el.style.display = (name.includes(term) || desc.includes(term)) ? 'block' : 'none';
                });
                
                document.querySelectorAll('.category-title').forEach(title => {
                    const nextElements = [];
                    let next = title.nextElementSibling;
                    while (next && !next.classList.contains('category-title')) {
                        if (next.classList.contains('module-template')) {
                            nextElements.push(next);
                        }
                        next = next.nextElementSibling;
                    }
                    const hasVisibleModules = nextElements.some(el => el.style.display !== 'none');
                    title.style.display = hasVisibleModules ? 'block' : 'none';
                });
            });
        }

        // Library Filter Setup
        function setupLibraryFilters() {
            // Warte bis das Modal existiert, dann initialisiere Filter
            setTimeout(() => {
                const filterButtons = document.querySelectorAll('.library-filter-btn');
                const searchInput = document.getElementById('librarySearchInput');
                
                if (filterButtons.length > 0) {
                    filterButtons.forEach(btn => {
                        btn.addEventListener('click', () => {
                            const category = btn.dataset.category;
                            
                            filterButtons.forEach(b => {
                                const isActive = b.dataset.category === category;
                                b.style.background = isActive ? 'var(--kerberos-primary)' : 'transparent';
                                b.style.color = isActive ? 'white' : 'var(--kerberos-primary)';
                            });
                            
                            const searchTerm = searchInput ? searchInput.value : '';
                            loadModuleLibraryList(category, searchTerm);
                        });
                    });
                }
                
                if (searchInput) {
                    searchInput.addEventListener('input', (e) => {
                        const activeFilter = document.querySelector('.library-filter-btn[style*="var(--kerberos-primary)"]')?.dataset.category || 'all';
                        loadModuleLibraryList(activeFilter, e.target.value);
                    });
                }
            }, 100);
        }

        // Icon Search
        document.getElementById('iconSearch').addEventListener('input', (e) => {
            const term = e.target.value.toLowerCase();
            document.querySelectorAll('.icon-option').forEach((icon, index) => {
                const iconData = FONT_AWESOME_ICONS[index];
                const iconName = iconData ? iconData.name.toLowerCase() : '';
                icon.style.display = iconName.includes(term) ? 'block' : 'none';
            });
        });

        // Notification
        function showNotification(message) {
            const notification = document.createElement('div');
            notification.className = 'notification';
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => notification.classList.add('show'), 100);
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // Event Listeners
        // Globale Funktionen definieren
        window.updateProperty = updateProperty;
        window.showIconPicker = showIconPicker;
        window.showImagePicker = showImagePicker;
        window.selectIcon = selectIcon;
        window.selectImage = selectImage;
        window.closeIconModal = closeIconModal;
        window.closeImageModal = closeImageModal;
        window.switchTab = switchTab;
        window.switchImportTab = switchImportTab;
        window.switchSettingsTab = switchSettingsTab;
        window.updateSpacing = updateSpacing;
        window.applySpacingToAll = applySpacingToAll;
        window.applyChanges = applyChanges;
        window.saveCurrentPage = saveCurrentPage;
        window.closeSavePageModal = closeSavePageModal;
        window.loadPage = loadPage;
        window.deleteSavedPage = deleteSavedPage;
        window.exportSavedPage = exportSavedPage;
        window.closeLoadPageModal = closeLoadPageModal;
        window.importData = importData;
        window.closeImportModal = closeImportModal;
        window.exportCurrentPage = exportCurrentPage;
        window.exportModuleTemplates = exportModuleTemplates;
        window.exportSelectedModule = exportSelectedModule;
        window.showSavePageDialog = showSavePageDialog;
        window.showLoadPageDialog = showLoadPageDialog;
        window.showImportModal = showImportModal;
        window.showSettingsModal = showSettingsModal;
        window.closeSettingsModal = closeSettingsModal;
        window.editModuleInfo = editModuleInfo;
        window.closeModuleEditModal = closeModuleEditModal;
        window.saveModuleInfo = saveModuleInfo;
        window.showCreateModuleDialog = showCreateModuleDialog;
        window.updatePropertyFromRichText = updatePropertyFromRichText;
        // Erg√§nze diese zu den bestehenden window.functionName Zuweisungen:
        window.exportAllCurrentModules = exportAllCurrentModules;
        window.deleteIndividualModule = deleteIndividualModule;
        window.exportSingleModule = exportSingleModule;
        // Sichere Modul-Referenz-Pr√ºfung
        function validateModuleReference(moduleId) {
            if (!moduleId) return false;
            if (!modules || !Array.isArray(modules)) return false;
            return modules.some(m => m && m.id === moduleId);
        }

        // Globale Funktionen sicher verf√ºgbar machen
        window.validateModuleReference = validateModuleReference;
        // Bestehende window-Definitionen...
        window.showBulkEditModal = showBulkEditModal;
        window.closeBulkEditModal = closeBulkEditModal;
        window.applyBulkPriceChange = applyBulkPriceChange;
        window.applyBulkColorChange = applyBulkColorChange;
        window.applyBulkTextChange = applyBulkTextChange;
        window.applyPlanTemplate = applyPlanTemplate;
        window.copyFromPlan = copyFromPlan;
        window.switchPropertyTab = switchPropertyTab;
        window.groupPropertiesByContext = groupPropertiesByContext;
        window.renderPlanQuickSetup = renderPlanQuickSetup;
        window.renderCanvasWithInteractivity = renderCanvasWithInteractivity;

        // Create Module Dialog Functions
        function showCreateModuleDialog() {
            // Erstelle ein einfaches Modal f√ºr benutzerdefinierte Module
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
                background: rgba(0,0,0,0.8); z-index: 2000; display: flex; 
                align-items: center; justify-content: center;
            `;
            
            modal.innerHTML = `
                <div style="background: white; padding: 2rem; border-radius: 8px; max-width: 500px; width: 90%;">
                    <h3 style="margin: 0 0 1rem 0; color: var(--kerberos-primary);">Neues Modul erstellen</h3>
                    <p style="color: #6c757d; margin-bottom: 2rem;">Diese Funktion ist in der Vollversion verf√ºgbar. Erstellen Sie eigene Module mit benutzerdefinierten HTML-Templates.</p>
                    
                    <div style="margin-bottom: 1rem;">
                        <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Modul-Name</label>
                        <input type="text" id="newModuleName" placeholder="z.B. Mein Custom Hero" style="width: 100%; padding: 0.5rem; border: 1px solid #dee2e6; border-radius: 4px;">
                    </div>
                    
                    <div style="margin-bottom: 1rem;">
                        <label style="display: block; margin-bottom: 0.5rem; font-weight: 600;">Kategorie</label>
                        <select id="newModuleCategory" style="width: 100%; padding: 0.5rem; border: 1px solid #dee2e6; border-radius: 4px;">
                            <option value="Hero & Header">Hero & Header</option>
                            <option value="Content & Services">Content & Services</option>
                            <option value="Team & About">Team & About</option>
                            <option value="Contact & CTA">Contact & CTA</option>
                            <option value="Statistics & Numbers">Statistics & Numbers</option>
                            <option value="Content & Images">Content & Images</option>
                            <option value="Process & Steps">Process & Steps</option>
                            <option value="Custom">Custom</option>
                        </select>
                    </div>
                    
                    <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; padding: 1rem; margin-bottom: 2rem;">
                        <h4 style="color: #856404; margin: 0 0 0.5rem 0; font-size: 0.9rem;">üöÄ Vollversion Features</h4>
                        <p style="color: #856404; margin: 0; font-size: 0.85rem;">‚Ä¢ HTML-Editor f√ºr benutzerdefinierte Module<br>‚Ä¢ Erweiterte Property-Typen<br>‚Ä¢ Module-Bibliothek Verwaltung<br>‚Ä¢ Export eigener Module</p>
                    </div>
                    
                    <div style="display: flex; gap: 0.5rem; justify-content: flex-end;">
                        <button onclick="closeCreateModuleDialog()" style="padding: 0.5rem 1rem; border: 1px solid #dee2e6; background: white; border-radius: 4px; cursor: pointer;">Abbrechen</button>
                        <button onclick="createCustomModule()" style="padding: 0.5rem 1rem; border: none; background: var(--kerberos-primary); color: white; border-radius: 4px; cursor: pointer;">Erstellen (Demo)</button>
                    </div>
                </div>
            `;
            
            modal.id = 'createModuleModal';
            document.body.appendChild(modal);
            
            // Close on outside click
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeCreateModuleDialog();
                }
            });
        }

        function closeCreateModuleDialog() {
            const modal = document.getElementById('createModuleModal');
            if (modal) {
                modal.remove();
            }
        }

        function createCustomModule() {
            const name = document.getElementById('newModuleName').value.trim();
            const category = document.getElementById('newModuleCategory').value;
            
            if (!name) {
                showNotification('‚ùå Bitte Modul-Name eingeben');
                return;
            }
            
            // Demo: Erstelle ein einfaches Custom-Modul basierend auf einem existierenden Template
            const customModule = {
                id: 'kerberos-custom-' + Date.now(),
                name: name,
                category: category,
                description: 'Benutzerdefiniertes Modul (Demo-Version)',
                html: `<section style="padding: {{sectionSpacing}}; background: {{backgroundColor}}; text-align: center;">
                    <div style="max-width: 1200px; margin: 0 auto; padding: 0 2rem;">
                        <div style="font-family: 'Font Awesome 5 Pro'; font-size: 3rem; color: {{iconColor}}; margin-bottom: 2rem;">{{iconClass}}</div>
                        <h2 style="font-family: var(--heading-font-font-family); font-size: var(--heading-2-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: {{titleColor}}; margin: 0 0 1rem 0;">{{title}}</h2>
                        <p style="font-family: var(--body-font-font-family); font-size: var(--normal-text-size); line-height: var(--body-font-line-height); color: {{textColor}}; margin: 0 0 2rem 0;">{{text}}</p>
                        <a href="{{buttonLink}}" style="font-family: var(--button-font-family); font-weight: var(--button-font-weight); background: {{buttonBgColor}}; color: {{buttonTextColor}}; padding: 1rem 2rem; border-radius: 8px; text-decoration: none; display: inline-block;">{{buttonText}}</a>
                    </div>
                </section>`,
                properties: {
                    title: name + ' Titel',
                    titleColor: '#063AA8',
                    text: 'Beschreibungstext f√ºr Ihr benutzerdefiniertes Modul',
                    textColor: '#6c757d',
                    buttonText: 'Mehr erfahren',
                    buttonLink: '#',
                    buttonBgColor: '#063AA8',
                    buttonTextColor: '#FFFFFF',
                    iconClass: '&#xf005;',
                    iconColor: '#063AA8',
                    backgroundColor: '#FFFFFF',
                    sectionSpacing: '6rem 0'
                }
            };
            
            // F√ºge zur Template-Liste hinzu
            MODULE_TEMPLATES.push(customModule);
            
            // Lade Module-Bibliothek neu
            loadModuleLibrary();
            
            closeCreateModuleDialog();
            showNotification('‚úÖ Custom-Modul "' + name + '" erstellt (Demo-Version)');
        }

        // Globale Funktionen definieren
        window.showCreateModuleDialog = showCreateModuleDialog;
        window.closeCreateModuleDialog = closeCreateModuleDialog;
        window.createCustomModule = createCustomModule;

        // Event Listeners
        document.getElementById('exportPageBtn').addEventListener('click', exportPage);
        // Module Library Manager Event Listeners
        window.showModuleLibraryManager = showModuleLibraryManager;
        window.closeModuleLibraryModal = closeModuleLibraryModal;
        window.loadModuleLibraryList = loadModuleLibraryList;
        window.deleteModuleTemplate = deleteModuleTemplate;
        window.duplicateModuleTemplate = duplicateModuleTemplate;
        window.editModuleTemplate = editModuleTemplate;
        window.exportModuleTemplate = exportModuleTemplate;
        window.exportModuleLibrary = exportModuleLibrary;
        window.showDeletedTemplatesManager = showDeletedTemplatesManager;
        window.closeDeletedTemplatesModal = closeDeletedTemplatesModal;
        window.restoreDeletedTemplate = restoreDeletedTemplate;
        document.getElementById('savePageBtn').addEventListener('click', showSavePageDialog);
        document.getElementById('loadPageBtn').addEventListener('click', showLoadPageDialog);
        document.getElementById('importBtn').addEventListener('click', showImportModal);
        document.getElementById('settingsBtn').addEventListener('click', showSettingsModal);
        document.getElementById('clearBtn').addEventListener('click', clearAll);
        document.getElementById('previewBtn').addEventListener('click', showPreview);
        document.getElementById('exportAllModulesBtn').addEventListener('click', exportAllCurrentModules);

        // Modal close
        document.getElementById('previewModal').addEventListener('click', (e) => {
            if (e.target.id === 'previewModal') {
                closePreview();
            }
        });

        // Close modals on escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                // Nur sichtbare Modals schlie√üen
                const modals = ['previewModal', 'iconModal', 'imageModal', 'savePageModal', 'loadPageModal', 'importModal', 'settingsModal', 'moduleEditModal'];
                modals.forEach(modalId => {
                    const modal = document.getElementById(modalId);
                    if (modal && modal.style.display === 'block') {
                        modal.style.display = 'none';
                    }
                });
            }
        });

        // Keyboard Shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case 's':
                        e.preventDefault();
                        if (selectedModule) applyChanges();
                        break;
                    case 'e':
                        e.preventDefault();
                        exportPage();
                        break;
                    case 'p':
                        e.preventDefault();
                        showPreview();
                        break;
                    case 'c':
                        if (selectedModule) {
                            e.preventDefault();
                            copyModuleCode(selectedModule.id);
                        }
                        break;
                }
            }
        });

        // Initialisierung
        document.addEventListener('DOMContentLoaded', () => {
            loadModuleLibrary();
            setupSearch();
            setupLibraryFilters(); 
            renderPropertyPanel();
            loadSavedPages();
            
            // Load global spacing settings
            try {
                const savedSpacing = localStorage.getItem('kerberos-global-spacing');
                if (savedSpacing) {
                    globalSpacing = JSON.parse(savedSpacing);
                }
            } catch (e) {
                console.error('Fehler beim Laden der Spacing-Einstellungen:', e);
            }
            
            setTimeout(() => {
                showNotification('üõ°Ô∏è Kerberos Module Editor (Vollversion) bereit');
            }, 500);

            // Testimonials initialisieren falls bereits Module vorhanden
            setTimeout(() => {
                initializeTestimonialsCarousels();
            }, 200);
        });

        // ‚ú® FADE HOVER PRODUKT-√úBERSICHT MODUL (KORRIGIERT) ‚ú®
        function processKerberosProductFadeOverview(module, html) {
            console.log('üî• Process-Funktion wird ausgef√ºhrt f√ºr:', module.name);
            const props = module.properties;
            
            // === HEADER CONTENT ===
            let headerContent = '';
            if (props.title) {
                headerContent += `<div style="text-align: center; margin-bottom: 3rem;">
                    <h2 style="font-family: var(--heading-font-font-family); font-size: var(--heading-2-size); font-weight: var(--heading-font-font-weight); line-height: var(--heading-font-line-height); color: ${props.titleColor}; margin: 0 0 1rem 0;">${props.title}</h2>`;
                
                if (props.showSubtitle === 'true' && props.subtitle) {
                    headerContent += `<p style="font-family: var(--body-font-font-family); font-size: var(--normal-text-size); line-height: var(--body-font-line-height); color: ${props.subtitleColor}; max-width: 800px; margin: 0 auto;">${props.subtitle}</p>`;
                }
                
                headerContent += `</div>`;
            }
            
            // === PRODUCT CARDS ===
            let productCards = '';
            for (let i = 1; i <= 6; i++) {
                const isActive = props[`product${i}Active`] === 'true';
                const title = props[`product${i}Title`];
                const description = props[`product${i}Description`];
                const image = props[`product${i}Image`];
                const link = props[`product${i}Link`];
                
                if (isActive && title) {
                    productCards += `
                        <a href="${link || '#'}" style="
                            background: ${props.cardBackgroundColor}; 
                            border: 1px solid ${props.cardBorderColor}; 
                            border-radius: ${props.cardBorderRadius}; 
                            overflow: hidden; 
                            text-decoration: none; 
                            display: block; 
                            cursor: pointer;
                            box-shadow: ${props.cardShadow};
                            transform: translateY(0);
                            opacity: 1;
                            transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
                        ">
                            ${image ? `<img src="${image}" alt="${title}" style="width: 100%; height: 200px; object-fit: cover; transition: transform 0.4s ease;">` : ''}
                            <div style="padding: 1rem; transition: all 0.4s ease;">
                                <h4 class="product-fade-title-${module.id}" style="font-family: var(--heading-font-font-family); color: ${props.cardTitleColor}; margin: 0 0 0.5rem 0; font-size: 1.1rem; transition: color 0.4s ease;">${title}</h4>
                                <p class="product-fade-description-${module.id}" style="font-family: var(--body-font-font-family); color: ${props.cardDescriptionColor}; margin: 0; font-size: 0.9rem; transition: color 0.4s ease;">${description}</p>
                            </div>
                        </a>`;
                }
            }
            
            // === FADE HOVER CSS (KORRIGIERT F√úR BUTTON-KLASSEN) ===
            const fadeHoverCSS = `<style>
                /* Kerberos Product Fade Hover Effects - ${module.name} */
                .kerberos-btn-${module.id} {
                    position: relative !important;
                    overflow: hidden !important;
                    animation: fadeInUp 0.6s ease-out !important;
                }
                
                /* √úBERSCHREIBE STANDARD BUTTON-HOVER KOMPLETT */
                .kerberos-btn-${module.id}:hover {
                    background: ${props.cardHoverBackground} !important;
                    color: inherit !important;
                    transform: ${props.cardHoverTransform} !important;
                    box-shadow: ${props.cardHoverShadow} !important;
                    border-color: ${props.cardHoverBackground} !important;
                    opacity: ${props.cardHoverOpacity} !important;
                }
                
                .kerberos-btn-${module.id}:hover .product-fade-title-${module.id} {
                    color: ${props.cardHoverTitleColor} !important;
                }
                
                .kerberos-btn-${module.id}:hover .product-fade-description-${module.id} {
                    color: ${props.cardHoverDescriptionColor} !important;
                }
                
                .kerberos-btn-${module.id}:hover img {
                    transform: scale(1.05) !important;
                    filter: brightness(1.1) !important;
                }
                
                .kerberos-btn-${module.id}:active {
                    transform: translateY(-4px) !important;
                    transition: all 0.2s ease !important;
                }
                
                /* Fade-In Animation */
                @keyframes fadeInUp {
                    from {
                        opacity: 0;
                        transform: translateY(20px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }
                
                /* Responsive Verhalten */
                @media (max-width: 768px) {
                    .kerberos-btn-${module.id}:hover {
                        transform: translateY(-4px) !important;
                    }
                }
            </style>`;
            
            // === TEMPLATE ZUSAMMENBAUEN ===
            html = html.replace('{{headerContent}}', headerContent);
            html = html.replace('{{productCards}}', productCards);
            
            // CSS hinzuf√ºgen
            html = fadeHoverCSS + html;
            
            console.log('‚úÖ Process-Funktion erfolgreich ausgef√ºhrt');
            return html;
        }
        
        // Feature Breaker Modul Verarbeitung
        function processKerberosFeatureBreaker(module, html) {
            const props = module.properties;
            
            // Header Content
            let headerContent = `<div style="text-align: ${props.contentAlignment}; position: relative;">`;
            
            // Badge Element (falls aktiviert)
            if (props.showBadge === 'true' && props.badgeText) {
                const badgePosition = props.badgePosition === 'top-left' ? 'top: 1rem; left: 1rem;' : 
                                    props.badgePosition === 'top-center' ? 'top: 1rem; left: 50%; transform: translateX(-50%);' :
                                    'top: 1rem; right: 1rem;';
                
                headerContent += `<div style="position: absolute; ${badgePosition} background: ${props.badgeColor}; color: ${props.badgeTextColor}; padding: 0.5rem 1rem; border-radius: 20px; font-size: 0.8rem; font-weight: 700; text-transform: uppercase; letter-spacing: 1px; z-index: 10; box-shadow: 0 4px 12px rgba(0,0,0,0.2);">${props.badgeText}</div>`;
            }
            
            // Icon Element
            if (props.showIcon === 'true' && props.iconClass) {
                headerContent += `<div style="font-family: 'Font Awesome 5 Pro'; font-size: ${props.iconSize}; color: ${props.iconColor}; margin-bottom: 1.5rem; filter: drop-shadow(${props.iconGlow});">${props.iconClass}</div>`;
            }
            
            // Titel
            headerContent += `<h1 style="font-family: var(--heading-font-font-family); font-size: 3rem; font-weight: 800; line-height: 1.1; color: ${props.titleColor}; margin: 0 0 1rem 0; text-shadow: ${props.textShadow};">${props.title}</h1>`;
            
            // Untertitel
            if (props.subtitle) {
                headerContent += `<h2 style="font-family: var(--heading-font-font-family); font-size: 1.5rem; font-weight: 400; line-height: 1.3; color: ${props.subtitleColor}; margin: 0 0 1.5rem 0; text-shadow: ${props.textShadow};">${props.subtitle}</h2>`;
            }
            
            // Beschreibung
            if (props.description) {
                headerContent += `<p style="font-family: var(--body-font-font-family); font-size: 1.2rem; line-height: 1.6; color: ${props.descriptionColor}; margin: 0 0 2rem 0; max-width: 600px; ${props.contentAlignment === 'center' ? 'margin-left: auto; margin-right: auto;' : ''}">${props.description}</p>`;
            }
            
            // Pricing (falls aktiviert)
            if (props.showPricing === 'true' && props.priceText) {
                headerContent += `<div style="margin: 2rem 0;">
                    <div style="display: inline-flex; align-items: center; gap: 1rem; background: rgba(255,255,255,0.1); padding: 1rem 2rem; border-radius: 50px; backdrop-filter: blur(10px);">
                        <span style="font-size: 2.5rem; font-weight: 800; color: ${props.priceColor}; font-family: var(--heading-font-font-family);">${props.priceText}</span>
                        ${props.originalPrice ? `<span style="font-size: 1.2rem; color: ${props.originalPriceColor}; text-decoration: line-through;">${props.originalPrice}</span>` : ''}
                    </div>
                </div>`;
            }
            
            // Buttons
            const buttonAlign = props.contentAlignment === 'center' ? 'justify-content: center;' : props.contentAlignment === 'right' ? 'justify-content: flex-end;' : 'justify-content: flex-start;';
            
            headerContent += `<div style="display: flex; gap: 1rem; flex-wrap: wrap; margin-top: 2rem; ${buttonAlign}">`;
            
            // Prim√§rer Button
            if (props.primaryButtonText) {
                headerContent += `<a href="${props.primaryButtonLink}" class="breaker-btn-primary breaker-btn-${module.id}" style="font-family: var(--button-font-family); font-weight: 700; font-size: 1.1rem; background: ${props.primaryButtonBgColor}; color: ${props.primaryButtonTextColor}; padding: 1rem 2rem; border-radius: 50px; text-decoration: none; display: inline-flex; align-items: center; gap: 0.5rem; box-shadow: ${props.cardShadow}; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); text-transform: uppercase; letter-spacing: 1px;">${props.primaryButtonText}${props.primaryButtonIcon ? ` <span style="font-family: 'Font Awesome 5 Pro';">${props.primaryButtonIcon}</span>` : ''}</a>`;
            }
            
            // Sekund√§rer Button
            if (props.showSecondaryButton === 'true' && props.secondaryButtonText) {
                headerContent += `<a href="${props.secondaryButtonLink}" class="breaker-btn-secondary breaker-btn-${module.id}" style="font-family: var(--button-font-family); font-weight: 600; font-size: 1.1rem; background: ${props.secondaryButtonBgColor}; color: ${props.secondaryButtonTextColor}; padding: 1rem 2rem; border-radius: 50px; text-decoration: none; display: inline-flex; align-items: center; gap: 0.5rem; border: ${props.secondaryButtonBorder}; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); text-transform: uppercase; letter-spacing: 1px; backdrop-filter: blur(10px);">${props.secondaryButtonText}</a>`;
            }
            
            headerContent += `</div></div>`;
            
            // CSS f√ºr Hover-Effekte
            const hoverCSS = `<style>
                .breaker-btn-${module.id}:hover {
                    transform: translateY(-2px) !important;
                    filter: brightness(1.1) !important;
                }
                .breaker-btn-${module.id}:active {
                    transform: translateY(0px) !important;
                    transition: all 0.1s ease !important;
                }
                @media (max-width: 768px) {
                    .kerberos-module-${module.templateId} h1 {
                        font-size: 2rem !important;
                    }
                    .kerberos-module-${module.templateId} h2 {
                        font-size: 1.2rem !important;
                    }
                    .kerberos-module-${module.templateId} p {
                        font-size: 1rem !important;
                    }
                    .kerberos-module-${module.templateId} .breaker-btn-${module.id} {
                        width: 100% !important;
                        justify-content: center !important;
                        max-width: 300px !important;
                    }
                }
            </style>`;
            
            // Template zusammenbauen
            html = html.replace('{{breakerContent}}', headerContent);
            
            // CSS hinzuf√ºgen
            html = hoverCSS + html;
            
            return html;
        }


        function processKerberosWarningFacts(module, html) {
            const props = module.properties;
            
            // Sammle alle aktiven Facts
            const facts = [];
            for (let i = 1; i <= 6; i++) {
                const active = props[`fact${i}Active`];
                const number = props[`fact${i}Number`];
                const description = props[`fact${i}Description`];
                
                if (active === 'true' && number && description) {
                    facts.push({
                        number: number,
                        description: description
                    });
                }
            }
            
            // Generiere Facts HTML
            let factsHTML = '';
            if (facts.length > 0) {
                factsHTML = `
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: ${props.factsGap}; margin-top: ${props.factsSpacing};">
                        ${facts.map(fact => `
                            <div style="text-align: center; position: relative;">
                                <div style="display: flex; align-items: center; justify-content: center; margin-bottom: 1rem;">
                                    <div style="width: 2px; height: 80px; background: ${props.lineColor}; margin-right: 1rem; border-radius: 2px;"></div>
                                    <div>
                                        <div style="font-size: ${props.factNumberSize}; font-weight: bold; color: ${props.factNumberColor}; line-height: 1.2; margin-bottom: 0.5rem;">${fact.number}</div>
                                        <div style="font-size: ${props.factTextSize}; color: ${props.factTextColor}; line-height: 1.4;">${fact.description}</div>
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                `;
            }
            
            // Ersetze Platzhalter
            html = html.replace('{{factsContent}}', factsHTML);
            
            return html;
        }

        // Testimonials Carousel Funktionalit√§t f√ºr Kerberos Module Editor
        function initializeTestimonialsCarousels() {
            const containers = document.querySelectorAll('.kerberos-testimonials-container');
            
            containers.forEach((container, containerIndex) => {
                const track = container.querySelector('.kerberos-testimonials-track');
                if (!track) return;
                
                const slides = track.querySelectorAll('.testimonial-slide');
                if (slides.length === 0) return;
                
                const moduleElement = container.closest('.canvas-module') || container.closest('section');
                const dots = moduleElement ? moduleElement.querySelectorAll('.testimonial-dot') : [];
                
                // DIESE ZEILEN √ÑNDERN:
                const prevBtn = container.querySelector('.kerberos-prev');  // ‚Üê war .nav-prev
                const nextBtn = container.querySelector('.kerberos-next');  // ‚Üê war .nav-next
                
                
                let currentSlide = 0;
                let autoPlay = true;
                let autoPlayInterval;
                let isTransitioning = false;
                
                function goToSlide(index, smooth = true) {
                    if (isTransitioning) return;
                    
                    isTransitioning = true;
                    currentSlide = Math.max(0, Math.min(index, slides.length - 1));
                    
                    track.style.transition = smooth ? 'transform 0.6s cubic-bezier(0.4, 0, 0.2, 1)' : 'none';
                    track.style.transform = `translateX(-${currentSlide * 100}%)`;
                    
                    dots.forEach((dot, i) => {
                        if (i === currentSlide) {
                            dot.classList.add('active');
                            dot.style.background = '#063AA8';
                            dot.style.transform = 'scale(1.2)';
                        } else {
                            dot.classList.remove('active');
                            dot.style.background = '#DEE2E6';
                            dot.style.transform = 'scale(1)';
                        }
                    });
                    
                    setTimeout(() => {
                        isTransitioning = false;
                    }, smooth ? 600 : 0);
                }
                
                function nextSlide() {
                    const nextIndex = currentSlide >= slides.length - 1 ? 0 : currentSlide + 1;
                    goToSlide(nextIndex);
                }
                
                function prevSlide() {
                    const prevIndex = currentSlide <= 0 ? slides.length - 1 : currentSlide - 1;
                    goToSlide(prevIndex);
                }
                
                function startAutoPlay() {
                    if (autoPlay && slides.length > 1) {
                        autoPlayInterval = setInterval(nextSlide, 5000);
                    }
                }
                
                function stopAutoPlay() {
                    if (autoPlayInterval) {
                        clearInterval(autoPlayInterval);
                        autoPlayInterval = null;
                    }
                }
                
                if (nextBtn) {
                    nextBtn.addEventListener('click', (e) => {
                        e.preventDefault();
                        nextSlide();
                        autoPlay = false;
                        stopAutoPlay();
                    });
                }
                
                if (prevBtn) {
                    prevBtn.addEventListener('click', (e) => {
                        e.preventDefault();
                        prevSlide();
                        autoPlay = false;
                        stopAutoPlay();
                    });
                }
                
                dots.forEach((dot, index) => {
                    dot.addEventListener('click', (e) => {
                        e.preventDefault();
                        goToSlide(index);
                        autoPlay = false;
                        stopAutoPlay();
                    });
                });
                
                let touchStartX = 0;
                let touchEndX = 0;
                
                track.addEventListener('touchstart', (e) => {
                    touchStartX = e.changedTouches[0].screenX;
                    stopAutoPlay();
                });
                
                track.addEventListener('touchend', (e) => {
                    touchEndX = e.changedTouches[0].screenX;
                    const swipeDistance = touchEndX - touchStartX;
                    
                    if (Math.abs(swipeDistance) > 50) {
                        if (swipeDistance > 0) {
                            prevSlide();
                        } else {
                            nextSlide();
                        }
                        autoPlay = false;
                    }
                });
                
                container.addEventListener('mouseenter', stopAutoPlay);
                container.addEventListener('mouseleave', () => {
                    if (autoPlay) startAutoPlay();
                });
                
                goToSlide(0, false);
                startAutoPlay();
            });
        }

        // Debug-Funktion um Template-Probleme zu finden
        function debugTemplates() {
            console.log('=== TEMPLATE DEBUG ===');
            console.log('Total Templates:', MODULE_TEMPLATES.length);
            
            MODULE_TEMPLATES.forEach((template, index) => {
                if (!template) {
                    console.error(`Template ${index} ist undefined`);
                } else if (!template.id) {
                    console.error(`Template ${index} hat keine ID:`, template);
                } else if (!template.name) {
                    console.warn(`Template ${template.id} hat keinen Namen`);
                }
            });
            
            // LocalStorage Debug
            try {
                const saved = localStorage.getItem('kerberos-custom-templates');
                if (saved) {
                    const customTemplates = JSON.parse(saved);
                    console.log('Custom Templates im LocalStorage:', customTemplates.length);
                    customTemplates.forEach((template, index) => {
                        if (!template || !template.id) {
                            console.error(`LocalStorage Template ${index} ist ung√ºltig:`, template);
                        }
                    });
                }
            } catch (e) {
                console.error('LocalStorage ist korrupt:', e);
            }
        }

        // Globale Funktion verf√ºgbar machen
        window.debugTemplates = debugTemplates;

        function resetLocalStorage() {
            if (confirm('‚ö†Ô∏è WARNUNG: Dies l√∂scht alle gespeicherten Custom Templates, Seiten und Einstellungen!\n\nFortfahren?')) {
                localStorage.removeItem('kerberos-custom-templates');
                localStorage.removeItem('kerberos-saved-pages');
                localStorage.removeItem('kerberos-deleted-templates');
                
                // Seite neu laden um frischen Zustand zu haben
                location.reload();
            }
        }

        function fixMissingTemplate(moduleId) {
            const module = modules.find(m => m.id === moduleId);
            if (!module) return;
            
            // Versuche, ein passendes Template zu finden oder erstelle ein Basis-Template
            let template = MODULE_TEMPLATES.find(t => t && t.name && t.name.includes(module.name));
            
            if (!template) {
                // Erstelle ein Notfall-Template
                template = {
                    id: module.templateId,
                    name: module.name || 'Repariertes Template',
                    category: 'Custom',
                    description: 'Automatisch repariertes Template',
                    html: module.html || '<div>{{title}}</div>',
                    properties: module.properties || { title: 'Titel' },
                    customized: true
                };
                
                MODULE_TEMPLATES.push(template);
                saveCustomTemplates();
            }
            
            // Aktualisiere das Modul
            module.templateId = template.id;
            
            renderPropertyPanel();
            showNotification('‚úÖ Template repariert');
        }

    </script>
</body>
</html>
